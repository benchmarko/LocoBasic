/* globals cpcBasic */

"use strict";

cpcBasic.addItem("", `
REM locobas - LocoBasic
REM
MODE 2
FOR s=1 TO 15
  in$=SPACE$(s)
  CLS
  t=TIME+15
  GOSUB 1000
  WHILE TIME<T:FRAME:WEND
NEXT
END
'
' banner
1000 FOR i=1 TO 4:PRINT:NEXT
'
?in$;"'##::::::::'#######:::'######:::'#######::      "
?in$;" ##:::::::'##.... ##:'##... ##:'##.... ##:      "
?in$;" ##::::::: ##:::: ##: ##:::..:: ##:::: ##:      "
?in$;" ##::::::: ##:::: ##: ##::::::: ##:::: ##:      "
?in$;" ##::::::: ##:::: ##: ##::::::: ##:::: ##:      "
?in$;" ##::::::: ##:::: ##: ##::: ##: ##:::: ##:      "
?in$;" ########:. #######::. ######::. #######::      "
?in$;"........:::.......::::......::::.......:::      "
?in$;"'########:::::'###:::::'######::'####::'######::"
?in$;" ##.... ##:::'## ##:::'##... ##:. ##::'##... ##:"
?in$;" ##:::: ##::'##:. ##:: ##:::..::: ##:: ##:::..::"
?in$;" ########::'##:::. ##:. ######::: ##:: ##:::::::"
?in$;" ##.... ##: #########::..... ##:: ##:: ##:::::::"
?in$;" ##:::: ##: ##.... ##:'##::: ##:: ##:: ##::: ##:"
?in$;" ########:: ##:::: ##:. ######::'####:. ######::"
?in$;"........:::..:::::..:::......:::....:::......:::"
RETURN
'
'generated by: https://manytools.org/hacker-tools/ascii-banner/
'
`);

cpcBasic.addItem("", `
  REM locobas2 - LocoBasic 2
  REM
  '
  MODE 2
  PEN 1: PAPER 0
  '
  PRINT "LLLLLLLLLLL                                                                   "
  PRINT "LL:::::::LL                                                                   "
  PRINT "  L:::::L                 ooooooooooo      cccccccccccccccc  ooooooooooo      "
  PRINT "  L:::::L               oo:::::::::::oo  cc:::::::::::::::coo:::::::::::oo    "
  PRINT "  L:::::L              o:::::ooooo:::::c:::::::cccccc:::::o:::::ooooo:::::o   "
  PRINT "  L:::::L              o::::o     o::::c::::::c     cccccco::::o     o::::o   "
  PRINT "  L:::::L              o::::o     o::::c:::::c            o::::o     o::::o   "
  PRINT "  L:::::L         LLLLLo::::o     o::::c::::::c     cccccco::::o     o::::o   "
  PRINT "LL:::::::LLLLLLLLL:::::o:::::ooooo:::::c:::::::cccccc:::::o:::::ooooo:::::o   "
  PRINT "L::::::::::::::::::::::Loo:::::::::::oo  cc:::::::::::::::coo:::::::::::oo    "
  PRINT "LLLLLLLLLLLLLLLLLLLLLLLL  ooooooooooo      cccccccccccccccc  ooooooooooo      "
  'PRINT 
  PRINT "BBBBBBBBBBBBBBBBB                                    iiii                     "
  PRINT "B::::::::::::::::B                                  i::::i                    "
  PRINT "B::::::BBBBBB:::::B                                  iiii                     "
  PRINT "BB:::::B     B:::::B                                                          "
  PRINT "  B::::B     B:::::B aaaaaaaaaaaaa     ssssssssss  iiiiiii    cccccccccccccccc"
  PRINT "  B::::B     B:::::B a::::::::::::a  ss::::::::::s i:::::i  cc:::::::::::::::c"
  PRINT "  B::::BBBBBB:::::B  aaaaaaaaa:::::ss:::::::::::::s i::::i c:::::::::::::::::c"
  PRINT "  B:::::::::::::BB            a::::s::::::ssss:::::si::::ic:::::::cccccc:::::c"
  PRINT "  B::::BBBBBB:::::B    aaaaaaa:::::as:::::s  ssssss i::::ic::::::c     ccccccc"
  PRINT "  B::::B     B:::::B aa::::::::::::a  s::::::s      i::::ic:::::c             "
  PRINT "  B::::B     B:::::Ba::::aaaa::::::a     s::::::s   i::::ic:::::c             "
  PRINT "  B::::B     B:::::a::::a    a:::::ssssss   s:::::s i::::ic::::::c     ccccccc"
  PRINT "BB:::::BBBBBB::::::a::::a    a:::::s:::::ssss::::::i::::::c:::::::cccccc:::::c"
  PRINT "B:::::::::::::::::Ba:::::aaaa::::::s::::::::::::::si::::::ic:::::::::::::::::c"
  PRINT "BBBBBBBBBBBBBBBBB    aaaaaaaaaa  aaaasssssssssss   iiiiiiii   cccccccccccccccc";
  '
  'generated by: https://manytools.org/hacker-tools/ascii-banner/
  '
  `);

cpcBasic.addItem("", `
REM bmbench08 - BM Bench - bmbench.bas (BASIC)
MODE 2
REM BM Bench - bmbench.bas (BASIC)
REM (c) Marco Vieth, 2002-2023
REM http://www.benchmarko.de
REM
REM 06.05.2002  0.01
REM 18.05.2002  0.02
REM 24.01.2003  0.05  output format changed
REM 01.04.2023  0.08  adapted for new version
REM
prgLanguage$ = "Basic"
prgVersion$ = "0.08"
startTs = 0
maxBench = 6
DEF FNmod1(x,q) = x - INT(x / q) * q: REM x MOD q (without overflow)
basicver$ = "Locomotive Basic 1.1"
DEF FNgetTs = TIME - startTs
DEF FNconvMs(ts) = ts * 10.0 / 3.0: REM time conversion factor for ms, usually 300 Hz
startTs = FNgetTs
DIM command$(5)
REM
REM main()
6000 bench1 = 0: REM first benchmark to test
bench2 = 5: REM last benchmark to test
n = 1000000: REM maximum number
IF bwbasic = 0 THEN n = 10000: REM reduce n for Locomotive BASIC
caliMs = 1001
deltaMs = 100
IF command$(1) <> "" THEN bench1 = VAL(command$(1))
IF command$(2) <> "" THEN bench2 = VAL(command$(2))
IF command$(3) <> "" THEN n = VAL(command$(3))
IF command$(4) <> "" THEN caliMs = VAL(command$(4))
IF command$(5) <> "" THEN deltaMs = VAL(command$(5))
GOSUB 5480: 'startBench
tMeas = FNconvMs(FNgetTs)
PRINT "Total elapsed time:"; tMeas; "ms"
END
REM
REM
REM bench00(n): x
1570 x = 0
ndiv = INT(n / 65536)
nmod = (n - ndiv * 65536)
FOR i = ndiv TO 1 STEP -1
  FOR j = 32767 TO 1 STEP -1
    x = x + j
  NEXT j
  FOR j = -32768 TO -1
    x = x + j
  NEXT j
NEXT i
FOR j = nmod TO 1 STEP -1
  x = x + j
NEXT j
x = FNmod1(x, 65536)
RETURN
REM
REM
REM bench01(n): x
1840 x = 0
sum = 0
FOR i = 1 TO n
sum = sum + i
IF sum >= n THEN sum = sum - n: x = x + 1
NEXT i
RETURN
REM
REM
REM bench02(n): x (Floating Point)
2040 x = 0
sum = 0.0
FOR i = 1 TO n
sum = sum + i
IF sum >= n THEN sum = sum - n: x = x + 1
NEXT i
RETURN
REM
REM
REM bench03(n): x
2060 nHalf = INT(n / 2)
REM initialize sieve
FOR i = 0 TO nHalf: sieve1(i) = 0: NEXT i
REM compute primes
i = 0
m = 3
x = 1
WHILE m * m <= n
  IF sieve1(i) = 0 THEN x = x + 1: j = INT((m * m - 3) / 2): WHILE j < nHalf: sieve1(j) = 1: j = j + m: WEND
  i = i + 1
  m = m + 2
WEND
REM count remaining primes
WHILE m <= n
  IF sieve1(i) = 0 THEN x = x + 1
  i = i + 1
  m = m + 2
WEND
RETURN
REM
REM
REM bench04(n): x
2150 m = 2147483647
a = 16807
q = 127773
r = 2836
x = 1
FOR i = n TO 1 STEP - 1
xDivQ = INT(x / q)
xModQ = x - q * xDivQ
x = a * xModQ - r * xDivQ
IF x <= 0 THEN x = x + m
NEXT i
RETURN
REM
REM
REM bench05(n): x
2200 b05nSave = n
n = INT(n / 2)
k = INT(n / 2)
IF (n - k) < k THEN k = n - k
REM initialize (not needed)
FOR j = 0 TO k: line1(j) = 0: NEXT j
line1(0) = 1
IF k >= 1 THEN line1(1) = 2
REM compute lines of Pascal's triangle
FOR i = 3 TO n
min1 = INT((i - 1) / 2)
IF (i AND 1) = 0 THEN line1(min1 + 1) = 2 * line1(min1)
prev1 = line1(1)
FOR j = 2 TO min1
num1 = line1(j)
line1(j) = FNmod1(line1(j) + prev1, 65536)
prev1 = num1
NEXT j
line1(1) = i
NEXT i
REM compute sum of ((n/2)Ck)^2 mod 65536 for k=0..n/2
x = 0
FOR j = 0 TO k - 1
REM x = (x + 2 * line1(j) * line1(j)) MOD 65536
xHelp = line1(j)
xHelp = FNmod1(2.0 * (xHelp * xHelp), 65536)
x = FNmod1(x + xHelp, 65536)
NEXT j
REM x = (x + line1(k) * line1(k)) AND 65535
xHelp = line1(k)
xHelp = FNmod1(xHelp * xHelp, 65536)
x = FNmod1(x + xHelp, 65536)
n = b05nSave
RETURN
REM
REM
REM
REM bench06(n): x
2240 sum = 0.0
flip = -1.0
FOR i = 1 TO n
flip = flip * -1.0
sum = sum + flip / (2 * i - 1)
NEXT i
x = ((sum * 4.0) * 100000000)
RETURN
REM
REM
REM run_bench(bench, loops, n, check): x
2260 x = 0
IF bench > maxBench THEN PRINT "Error: Unknown benchmark:"; bench: RETURN
l = loops
WHILE l > 0 AND x = 0
ON bench + 1 GOSUB 1570, 1840, 2040, 2060, 2150, 2200, 2240
x = x - check
l = l - 1
WEND
x = x + check
IF x <> check THEN PRINT "Error(bench"; bench ;"): x=";x : x = -1
RETURN
REM
REM
REM bench03Check(n): x
2280 x = 1
FOR j = 3 TO n STEP 2
isPrime = 1
i = 3
WHILE (i * i <= j) AND (isPrime = 1)
IF j MOD i = 0 THEN isPrime = 0
i = i + 2
WEND
IF isPrime = 1 THEN x = x + 1
NEXT j
RETURN
REM
REM
REM getCheck(bench, n): check
2300 check = -1
IF bench = 0 THEN check = FNmod1((n / 2) * (n + 1), 65536)
IF bench = 1 OR bench = 2 THEN check = INT((n + 1) / 2)
IF bench = 3 THEN IF n = 500000 THEN check = 41538 ELSE GOSUB 2280: check = x
IF bench = 4 THEN IF n = 1000000 THEN check = 1227283347 ELSE GOSUB 2150: check = x
IF bench = 5 THEN IF n = 5000 THEN check = 17376 ELSE GOSUB 2200: check = x
IF bench = 6 THEN IF n = 1000000 THEN check = 314159165 ELSE GOSUB 2240: check = x
IF check = -1 THEN PRINT "Error: Unknown benchmark:"; bench
RETURN
REM
REM
REM getPrecMs: t0, t1
2320 gtsMeasCnt = 0
t1 = FNgetTs
t0 = t1
WHILE t1 = t0
t1 = FNgetTs
gtsMeasCnt = gtsMeasCnt + 1
WEND
RETURN
REM
REM
REM correctTime(t0, t1, gtsMeasCnt, gtsPrecCnt): t1Ms
2380 t1Ms = FNconvMs(t1)
IF gtsMeasCnt < gtsPrecCnt THEN t0MsTmp = FNconvMs(t0) + gtsPrecMs * ((gtsPrecCnt - gtsMeasCnt) * 1.0 / gtsPrecCnt) : IF t0MsTmp < t1Ms THEN t1Ms = t0MsTmp
RETURN
REM
REM
REM determineTsPrecision(): {global gtsPrecCnt, gtsPrecMs}
2400 GOSUB 2320: REM getPrecMs
t0tmp = t1
GOSUB 2320: REM getPrecMs
t1tmp = t1
gtsPrecMs = FNconvMs(t1tmp) - FNconvMs(t0tmp)
gtsPrecCnt = gtsMeasCnt
REM do it again
t0tmp = t1tmp
GOSUB 2320: REM getPrecMs
t1tmp = t1
IF gtsMeasCnt > gtsPrecCnt THEN gtsPrecCnt = gtsMeasCnt: gtsPrecMs = FNconvMs(t1tmp) - FNconvMs(t0tmp)
RETURN
REM
REM checkbitsFloat()
3000 num = 1
lastNum = 0
bits = 0
WHILE (((num - 1) / 2) = lastNum) AND (bits < 101)
lastNum = num
num = num * 2
num = num + 1
bits = bits + 1
WEND
RETURN
REM
REM
REM printInfo(): void
3400 GOSUB 3000
PRINT "BM Bench v"; prgVersion$; " ("; prgLanguage$; ") -- (float:"; bits; "tsMs:"; gtsPrecMs; "tsCnt:"; gtsPrecCnt; ") -- "; basicver$
PRINT "(c) Marco Vieth, 2002-2023"
RETURN
REM
REM
REM printResult(): void
3500 PRINT: PRINT "Throughput for all benchmarks (loops per sec):"
PRINT "BMR ("; prgLanguage$; ") :";
FOR bench = bench1 TO bench2
PRINT USING "#######.###"; benchres(bench);:PRINT " ";
NEXT bench
PRINT
RETURN
REM
REM
REM printLine1(): void
3800 PRINT "Benchmark"; bench; "("; prgLanguage$; "):";
PRINT ROUND(loopsPsec, 3); : REM loops per sec
PRINT "/s (time="; ROUND(tMeas, 3); "ms, loops="; loops;
PRINT ", delta="; ROUND(tDelta, 3); "ms)"
RETURN
REM
REM
REM measureBench(bench1, bench2, n, check, caliMs, deltaMs): throughput
4000 maxMs = 10000
loops = 1
tEsti = 0
throughput = 0
PRINT "Calibrating benchmark"; bench; "with loops ="; loops; ", n ="; n; ", check ="; check
WHILE throughput = 0
'FRAME: 'TODO
GOSUB 2320: REM getPrecMs
t0m = t1
GOSUB 2260: REM run_bench
GOSUB 2320: REM getPrecMs
GOSUB 2380: REM correctTime
tMeas = t1Ms - FNconvMs(t0m)
tDelta = tEsti - tMeas
IF tDelta < 0 THEN tDelta = -tDelta
REM  xx IF tEsti > tMeas THEN tDelta = tEsti - tMeas ELSE tDelta = tMeas - tEsti
loopsPsec = 0
IF tMeas > 0 THEN loopsPsec = (loops * 1000) / tMeas
PRINT USING "######.###";loopsPsec;
PRINT "/s (time="; USING "#####.###"; tMeas;
PRINT " ms, loops="; USING "#######"; loops;
PRINT ", delta="; USING "#####.###"; tDelta;: PRINT " ms)"
IF x <> -1 THEN GOSUB 4200 ELSE throughput = -1
WEND
RETURN
'
4200 IF tMeas > maxMs THEN PRINT "Benchmark"; bench; "("; prgLanguage$; "): Time already >"; maxMs; " ms. No measurement possible.": throughput = -loopsPsec: IF throughput = 0 THEN throughput = -1: RETURN ELSE RETURN
IF tEsti > 0 AND tDelta < deltaMs THEN throughput = loopsPsec: GOSUB 3800: RETURN
IF tMeas = 0 THEN scaleFact = 50 ELSE IF tMeas < caliMs THEN scaleFact = INT((caliMs + 100) / tMeas) + 1 ELSE scaleFact = 2
loops = loops * scaleFact
tEsti = tMeas * scaleFact
RETURN
'
REM
REM
REM startBench(bench1, bench2, n): void
5480 GOSUB 2400: REM determineTsPrecision
GOSUB 3400: REM printInfo
DIM benchres(maxBench): REM benchmark timing results
nSave = n
FOR bench = bench1 TO bench2
FRAME
n = nSave
IF bench = 3 THEN n = INT(n / 2): DIM sieve1(ROUND(n / 2 + 1)) ELSE IF bench = 5 THEN n = INT(n / 200): DIM line1(ROUND(n / 4))
GOSUB 2300: REM getCheck
throughput = -1
IF check > 0 THEN GOSUB 4000: REM measureBench
benchres(bench) = throughput
NEXT bench
GOSUB 3500: REM printResult
RETURN
REM
REM end
'
`);

cpcBasic.addItem("", `
994 REM countries - Countries and Cities (Landen)
995 REM J van Noort
996 REM http://www.basicode.de/download/neue.zip
997 REM Modifications: only overview list
998 REM
999 REM
1000 MODE 2
1009 REM
1010 n=178:REM n=AANTAL LANDEN+STEDEN
1020 GOSUB 5020
1030 END
1040 '
5000 REM +++LANDEN EN STEDEN+++
5020 PRINT "OVERZICHT LANDEN":PRINT 
5030 RESTORE :FOR i=1 TO n
5040 READ l$,h$,po$,li$,hi$
5050 a=38-LEN (l$+h$)
5060 w$=LEFT$("......................................",a)
5070 PRINT l$;w$;h$;" - ";po$;" km2"
5072 a=48-LEN (li$+hi$)
5073 w$=LEFT$("......................................",a)
5080 PRINT " 19";li$;w$;" - 19";hi$
5100 NEXT i
5110 RETURN
5120 '
25000 REM +++DATA REGELS+++
25010 DATA "AFGANISTAN","KABOEL","647.000"
25020 DATA "83  17.222.000","82  1.036.407"
25030 DATA "ALBANIE","TIRANA","28.748"
25040 DATA "83  2.841.000","83  206.100"
25050 DATA "ALGERIJE","ALGIERS","2.381.741"
25060 DATA "83  20.500.000","83  1.721.610"
25070 DATA "ANDORRA","ANDORRA-LA-VELLA","453"
25080 DATA "83  34.000","83  16.200"
25090 DATA "ANGOLA","LUANDA","1.246.700"
25100 DATA "83  8.339.000","82  1.200.000"
25110 DATA "ANTIGUA & BARBUDA","ST.JOHN'S","442"
25120 DATA "83  78.000","83  36.000"
25130 DATA "ARGENTINIE","BUENOS AIRES","2.766.889"
25140 DATA "83  ruim 29 miljoen","80  9.927.404"
25150 DATA "AUSTRALIE","CANBERRA","7.686.848"
25160 DATA "83  15.369.000","83  256.000"
25170 DATA "BAHAMA-EILANDEN","NASSAU","13.939"
25180 DATA "83  222.000","82  135.000"
25190 DATA "BAHREIN","AL-MANAMAH","622"
25200 DATA "83  397.000","81  121.986"
25210 DATA "BANGLADESH","DACCA","144.000"
25220 DATA "83  94.651.000","81  3.458.600"
25230 DATA "BARBADOS","BRIDGETOWN","431"
25240 DATA "83  252.000","80  7517"
25250 DATA "BELGIE","BRUSSEL","30.518"
25260 DATA "83  9.856.000","86  996.182"
25270 DATA "BELIZE","BELMOPAN","22.965"
25280 DATA "83  156.000","80  2.932"
25290 DATA "BENIN","PORTO NOVA","112.622"
25300 DATA "83  3.720.000","80  123.000"
25310 DATA "BHUTAN","THIMBU","47.000"
25320 DATA "83  ruim 1,3 miljoen","82  ca 20.000"
25330 DATA "BOLIVIA","SUCRE","bijna 1,1 miljoen"
25340 DATA "82  6.082.000","82  79.900"
25350 DATA "BONDSREPUBLIEK DUITSLAND (BRD)","BONN"
25360 DATA "248.577","83  61.421.000","83  292.900"
25370 DATA "BOTSWANA","GABARONE","600.372"
25380 DATA "83  1.007.000","83  72.200"
25390 DATA "BOVENVOLTA","OUAGADOUGOU","274.200"
25400 DATA "83 meer dan 6,5 miljoen","80  247.900"
25410 DATA "BRAZILIE","BRASILIA","8.511.965"
25420 DATA "83  129 miljoen","80  411.300"
25430 DATA "BRUNEI","BANDER","5765"
25440 DATA "83  260.000","81  57.558"
25450 DATA "BULGARIJE","SOFIA","110.912"
25460 DATA "83  8.939.000","84  1.102.000"
25470 DATA "BURMA","RANGOON","676.552"
25480 DATA "83  37.553.000","83  2.459.000"
25490 DATA "BURUNDI","BUJUMBURA","27.834"
25500 DATA "83  4.421.000","79  172.200"
25510 DATA "CANADA","OTTAWA","9.976.139"
25520 DATA "83  24.907.000","83  737.600"
25530 DATA "CENTRAFRIKA","BANGUI","622.984"
25540 DATA "83  2.450.000","82  340.000"
25550 DATA "CHILI","SANTIAGO","756.945"
25560 DATA "83  11.682.000","84  4.225.300"
25570 DATA "CHINA","BEIJING (PEKING)","9.560.980"
25580 DATA "83  1.039.677.000","83  5.670.000"
25590 DATA "COLOMBIA","BOGOTA","1,1 miljoen"
25600 DATA "83  ca.27,5 miljoen","83  4.584.000"
25610 DATA "COMOREN","MORINI","2171"
25620 DATA "83  421.000","80  22.000"
25630 DATA "COSTA RICA","SAN-JOSE","50.700"
25640 DATA "83  2.435.000","84  277.800"
25650 DATA "CUBA","HAVANA","114.524"
25660 DATA "83  9.891.000","83  1.951.400"
25670 DATA "CYPRES","NICOSIA","9251"
25680 DATA "83  655.000","82  149.100"
25690 DATA "DENEMARKEN","KOPENHAGEN","43.069"
25700 DATA "83  5.114.000","83  1.372.019"
25710 DATA "DJIBOUTI","DJIBOUTI","22.000"
25720 DATA "83  330.000","82  230.000"
25730 DATA "DOMINICA","ROSEAU","751"
25740 DATA "83  76.000","81  8.346"
25750 DATA "DOMINICAANSE REPUBLIEK","SANTO DOMINGO"
25760 DATA "48.734","83  5.960.000","81  1.313.172"
25770 DATA "DUITSE DEM.REPUBLIEK (DDR)","BERLIJN"
25780 DATA "108.178","83  16.699.000","82  1.186.000"
25790 DATA "ECUADOR","QUITO","283.561"
25800 DATA "83  ca.9,2 miljoen","82  1.110.250"
25810 DATA "EGYPTE","CAIRO","1.001.449"
25820 DATA "83  44,5 miljoen","78  5.291.000"
25830 DATA "EL-SALVADOR","SAN-SALVADOR","21.041"
25840 DATA "83  5.232.000","83  445.100"
25850 DATA "EQUATORIAAL GUINEA","MALABO","28.051"
25860 DATA "83  375.000","73  37.000"
25870 DATA "ETIOPIE","ADDIS ABEBA","1.221.900"
25880 DATA "83  33.680.000","80  1.277.159"
25890 DATA "FAEROER","THORSHAVN","1399"
25900 DATA "83  45.000","83  13.175"
25910 DATA "FIJI","SUVA","18.274"
25920 DATA "83  670.000","82  71.255"
25930 DATA "FILIPIJNEN","MANILA","300.000"
25940 DATA "83  52 miljoen","80  5.150.000"
25950 DATA "FINLAND","HELSINKI","337.032"
25960 DATA "83  4.863.000","84  484.500"
25970 DATA "FRANKRIJK","PARIJS","547.026"
25980 DATA "83  54.652.000","82  2.188.918"
25990 DATA "FRANS GUYANA","CAYENNE","91.000"
26000 DATA "82  73.022","82  38.135"
26010 DATA "GABON","LIBREVILLE","267.667"
26020 DATA "83  1.127.000","82  350.000"
26030 DATA "GAMBIA","BANJUL","11.295"
26040 DATA "83  697.000","83  44.536"
26050 DATA "GHANA","ACCRA","238.537"
26060 DATA "83  12.700.000","80  1.176.000"
26070 DATA "GRENADA","ST.GEORGE'S","344"
26080 DATA "83  114.000","80  7500"
26090 DATA "GRIEKENLAND","ATHENE","131.944"
26100 DATA "83  9.840.000","81  885.737"
26110 DATA "GROENLAND","GODTHAB","2.175.600"
26120 DATA "84  52.347","84  10.468"
26130 DATA "GROOTBRITTANNIE","LONDEN","244.046"
26140 DATA "83  55.610.000","83  6.754.500"
26150 DATA "GUATEMALA","GUATEMALA","108.889"
26160 DATA "83  7.932.000","81  754.243"
26170 DATA "GUINEE","CONAKRY","245.857"
26180 DATA "83  5.177.000","80  763.000"
26190 DATA "GUINEE-BISSAU","BISSAU","36.125"
26200 DATA "83  863.000","79  109.486"
26210 DATA "GUYANA","GEORGETOWN","214.969"
26220 DATA "83  918.000","83  188.000"
26230 DATA "HAITI","PORT-AU-PRINCE","27.750"
26240 DATA "83  5,3 miljoen","83  719.000"
26250 DATA "HONDURAS","TEGUCIGALPA","112.088"
26260 DATA "83  4,092.000","83  532.500"
26270 DATA "HONGARIJE","BUDAPEST","93.030"
26280 DATA "83  10.690.000","85  2.071.484"
26290 DATA "HONGKONG","VICTORIA","1063"
26300 DATA "83  ca.5 miljoen","76  501.680"
26310 DATA "IERLAND","DUBLIN","70.283"
26320 DATA "83  3.508.000","81  915.115"
26330 DATA "INDIA","NEW-DELHI","3.287.590"
26340 DATA "83  ca.732 miljoen","81  301.801"
26350 DATA "INDONESIE","JAKARTA","1.904.569"
26360 DATA "83  ca.159,4 miljoen","83  7.636.000"
26370 DATA "IRAK","BAGDAD","434.924"
26380 DATA "83  14,6 miljoen","80  3.300.000"
26390 DATA "IRAN","TEHERAN","1.648.000"
26400 DATA "83  41.635.000","82  5.734.199"
26410 DATA "ISRAEL","JERUZALEM","20.770"
26420 DATA "83  4.097.000","83  428.668"
26430 DATA "ITALIE","ROME","301.225"
26440 DATA "83  56.559.000","83  2.834.094"
26450 DATA "IVOORKUST","YAMOUSSOUKRO","322.463"
26460 DATA "83  ca.9.1 miljoen","83  80.000"
26470 DATA "JAMAICA","KINGSTON","10.991"
26480 DATA "83  2.258.000","80  662.500"
26490 DATA "JAPAN","TOKIO","372.313"
26500 DATA "83   ruim 119 miljoen","83  11.728.000"
26510 DATA "JOEGOSLAVIE","BELGRADO","255.804"
26520 DATA "83  22.855.000","81  1.470.073"
26530 DATA "JORDANIE","AMMAN","97.740"
26540 DATA "83  3.247.000","83  744.000"
26550 DATA "KAAPVERDIE","PRAIA","4033"
26560 DATA "83  ca.313.000","80  39.794"
26570 DATA "KAMBODJA","PHNUM PENH","181.035"
26580 DATA "83  ca.6.888.000","83  600.000"
26590 DATA "KAMEROEN","YAOUNDE","475.442"
26600 DATA "83  ca.9.165.000","83  488.000"
26610 DATA "KATAR","DOHA","11.000"
26620 DATA "83  281.000","80  180.000"
26630 DATA "KENYA","NAIROBI","582.646"
26640 DATA "83  18.784.000","79  828.000"
26650 DATA "KIRIBATI","BAIRIKI","728"
26660 DATA "83  ca.61.000","80  22.148"
26670 DATA "KOEWEIT","KOEWEIT","17.818"
26680 DATA "83  1.672.000","80  182.300"
26690 DATA "KONGO","BRAZZAVILLE","342.000"
26700 DATA "83  1.651.000","85  480.544"
26710 DATA "LAOS","VIENTIANE","236.800"
26720 DATA "83  ca.4.209.000","81  210.000"
26730 DATA "LESOTHO","MASERU","30.355"
26740 DATA "83  ca.1.444.000","81  75.000"
26750 DATA "LIBANON","BEIROET","10.400"
26760 DATA "83  ca.2.635.000","71  702.000"
26770 DATA "LIBERIA","MONROVIA","111.369"
26780 DATA "81  ca.2.090.000","81  306.000"
26790 DATA "LIBIE","TRIPOLI","1.759.540"
26800 DATA "83  3.342.000","81  859.000"
26810 DATA "LIECHTENSTEIN","VADUZ","160"
26820 DATA "83  26.512","84  4872"
26830 DATA "LUXEMBURG","LUXEMBURG","2586"
26840 DATA "83  365.000","85  76.130"
26850 DATA "MADAGASKAR","ANTANANAROVI","587.041"
26860 DATA "83  ruim 9,4miljoen","82  700.000"
26870 DATA "MALAWI","LILONGWE","94.276"
26880 DATA "83  6.429.000","81  103.000"
26890 DATA "MALDIVEN","MALE","298"
26900 DATA "83  168.000","83  36.593"
26910 DATA "MALEISIE","KUALA LUMPUR","329.749"
26920 DATA "80  13.745.241","80  937.875"
26930 DATA "MALI","BAMAKO","1.240.000"
26940 DATA "83  ca.7.528.000","80  600.000"
26950 DATA "MALTA","VALLETTA","316"
26960 DATA "83  ca.377.000","83  14.040"
26970 DATA "MAROKKO","RABAT","446.550"
26980 DATA "83  22.109.000","81  841.800"
26990 DATA "MAURITANIE","NOUAKCHOTT","1.779.700"
27000 DATA "81  1.681.000","82  150.000"
27010 DATA "MAURITIUS","PORT LOUIS","2045"
27020 DATA "83  993.000","82  147.600"
27030 DATA "MEXICO","MEXICO-STAD","1.972.547"
27040 DATA "83  75.103.000","79  9.191.295"
27050 DATA "MONACO","MONACO","ca.1,81"
27060 DATA "83  27.000","83  27.000"
27070 DATA "MONGOLIE","ULAANBAATAR","1.565.000"
27080 DATA "83  1.803.000","84  470.500"
27090 DATA "MOZAMBIQUE","MAPUTO","801.590"
27100 DATA "83  13.311.000","80  850.000"
27110 DATA "NAMIBIE","WINDHOEK","824.292"
27120 DATA "83  ca.1.465.000","84  120.000"
27130 DATA "NAURU","YAREN","21"
27140 DATA "83  8042","83  8042"
27150 DATA "NEDERLAND","AMSTERDAM","41.473"
27160 DATA "83  14.339.551","85  675.579"
27170 DATA "NEDERLANDSE ANTILLEN","WILLEMSTAD","993"
27180 DATA "83  256.000","77  43.500"
27190 DATA "NEPAL","KATMANDU","140.797"
27200 DATA "83  ruim 15,7 miljoen","81  393.494"
27210 DATA "NICARAGUA","MANAQUA","130.000"
27220 DATA "83  3.058.000","79  608.000"
27230 DATA "NIEUWZEELAND","WELLINGTON","268.676"
27240 DATA "83  3.203.000","85  342.500"
27250 DATA "NIGER","NIAMEY","1.267.000"
27260 DATA "83  ca.5.772.000","83  399.100"
27270 DATA "NIGERIA","ABUJA","923.768"
27280 DATA "83  ruim 100 miljoen","83  ----"
27290 DATA "NOORDJEMEN","SANA","195.000"
27300 DATA "83  ca.6.232.000","81  277.820"
27310 DATA "NOORDKOREA","PYONGYANG","120.538"
27320 DATA "83  19.185.000","81  1.7 miljoen"
27330 DATA "NOORWEGEN","OSLO","324.219"
27340 DATA "83  ca.4.129.000","85  447.351"
27350 DATA "OMAN","MASQAT","212.457-300.000"
27360 DATA "83  1.131.000","78  ca.60.000"
27370 DATA "OOSTENRIJK","WENEN","83.849"
27380 DATA "83  7.549.000","81  1.531.346"
27390 DATA "PAKISTAN","ISLAMABAD","803.943"
27400 DATA "83  90 miljoen","81  201.000"
27410 DATA "PANAMA","PANAMA","77.082"
27420 DATA "83  2.089.000","80  388.600"
27430 DATA "PAPUA-NIEUWGUINEA","PORT MORESBY"
27440 DATA "461.691","83  ca.3.19 miljoen","84  144.300"
27450 DATA "PARAGUAY","ASUNCION","406.752"
27460 DATA "82  3.026.165","82  455.517"
27470 DATA "PERU","LIMA","1.285.216"
27480 DATA "83  ca.18,7 miljoen","85  5.008.400"
27490 DATA "POLEN","WARSCHAU","312.677"
27500 DATA "83  36.571.000","85  1.649.000"
27510 DATA "PORTUGAL","LISSABON","92.082"
27520 DATA "83  ca.10.099.000","81  807.167"
27530 DATA "PUERTO RICO","SAN-JUAN","8897"
27540 DATA "83  3.350.000","80  434.849"
27550 DATA "ROEMENIE","BOEKAREST","237.500"
27560 DATA "83  22.533.000","84  2.197.700"
27570 DATA "RWANDA","KIGALI","26.338"
27580 DATA "83  ca.5,7 miljoen","83  181.600"
27590 DATA "SAINT KITTS-NEVIS","BASSETERRE","261"
27600 DATA "83  53.000","80  14.725"
27610 DATA "SAN-MARINO","SAN-MARINO","61"
27620 DATA "83  ca.22.000","84  4516"
27630 DATA "SAO-TOME & PRINCIPE","SAO-TOME","964"
27640 DATA "83  103.000","78  25.000"
27650 DATA "SAUDIARABIE","RIYADH","ca.2,15 miljoen "
27660 DATA "83  10.421.000","80  1.000.000"
27670 DATA "SENEGAL","DAKAR","196.192"
27680 DATA "83  ca.6.316.000","79  979.000"
27690 DATA "SEYCHELLEN","VICTORIA","280"
27700 DATA "83  ca.65.000","77  23.334"
27710 DATA "SIERRA LEONE","FREETOWN","71.740"
27720 DATA "83  ca.3,5 miljoen","85  448.200"
27730 DATA "SINGAPORE","SINGAPORE","618"
27740 DATA "83  ca.2.502.000","74  1.327.500"
27750 DATA "SINT LUCIA","CASTRIES","616"
27760 DATA "83  ca.125.000","84  50.700"
27770 DATA "SINT VINCENT","KINGSTOWN","389"
27780 DATA "83  ca.102.000","82  33.694"
27790 DATA "SOLOMONEILANDEN","HONIARA","28.446"
27800 DATA "83  254.000","84  23.500"
27810 DATA "SOMALIA","MOGADISHO","637.657"
27820 DATA "83  ruim 5,2 miljoen","81  500.000"
27830 DATA "SOVJETUNIE","MOSKOU","22.402.200"
27840 DATA "83  ca.272.500.000","85  8.646.000"
27850 DATA "SPANJE","MADRID","504.782"
27860 DATA "83  38.228.000","81  3.188.297"
27870 DATA "SRI-LANKA","COLOMBO","65.610"
27880 DATA "83  15.416.000","83  623.000"
27890 DATA "SUDAN","KHARTOEM","2.505.813"
27900 DATA "83  ca.20.564.000","83  1.511.000"
27910 DATA "SURINAME","PARAMARIBO","163.265"
27920 DATA "83  ca.351.000","80  67.718"
27930 DATA "SWAZILAND","MBABANE","17.363"
27940 DATA "83  ca.605.000","82  38.636"
27950 DATA "SYRIE","DAMASKUS","185.180"
27960 DATA "83  ca.9,6 miljoen","81  1.112.200"
27970 DATA "TAIWAN","T'AIPEI","36.002"
27980 DATA "83  18.733.000","84  2.288.374"
27990 DATA "TANZANIA","DAR-ES-SALAAM","945.087"
28000 DATA "83  ca.20.378.000","78  757.000"
28010 DATA "THAILAND","BANGKOK","514,000"
28020 DATA "83  ca.49,5 miljoen","84  5.018.330"
28030 DATA "TOGO","LOME","56.785"
28040 DATA "83  ca.2,7 miljoen","80  240.000"
28050 DATA "TONGA","NUKUALOFA","699"
28060 DATA "82  68.746","84  27.740"
28070 DATA "TRINIDAD & TOBAGO","PORT OF SPAIN","5128"
28080 DATA "80  1.059.825","80  65.906"
28090 DATA "TSJAAD","NDJAMENA","1.284.000"
28100 DATA "83  ca.4,8 miljoen","79  303.000"
28110 DATA "TSJECHOSLOWAKIJE","PRAAG","127.896"
28120 DATA "83  15.400.000","84  1.186.250"
28130 DATA "TUNESIE","TUNIS","163.610"
28140 DATA "83  ca.6,89 miljoen","84  596.654"
28150 DATA "TURKIJE","ANKARA","780.576"
28160 DATA "83  47,3 miljoen","83  1.981.300"
28170 DATA "TUVALU","FUNAFUTI","26"
28180 DATA "79  7349","79  2191"
28190 DATA "UGANDA","KAMPALA","236.036"
28200 DATA "83  ca.14.625.000","82  460.000"
28210 DATA "URUGUAY","MONTEVIDEO","176.215"
28220 DATA "83  2,9 miljoen","83  1.362.002"
28230 DATA "VANUATU","VILA","14.763"
28240 DATA "83  ca.124.000","79  14.598"
28250 DATA "VATICAANSTAD","+++++","0,44"
28260 DATA "83  ca.1000","83  ----"
28270 DATA "VENEZUELA","CARACAS","912.050"
28280 DATA "83  17.257.000","84  4.000.000"
28290 DATA "VERENIGDE ARAB. EMIRATEN","ABU DHABY"
28300 DATA "83.600","83  ruim 1,2 miljoen","80  265.702"
28310 DATA "VERENIGDE STATEN","WASHINGTON (DC)"
28320 DATA "9.369.885","83  233.700.000","84  622.823"
28330 DATA "VIETNAM","HA-NOI","329.566"
28340 DATA "83  ca.57.181.000","84  2.674.400"
28350 DATA "WESTSAHARA","LAAYOUNE","266.000"
28360 DATA "81  ca.1000.000","70  28.500"
28370 DATA "WESTSAMOA","APIA","2842"
28380 DATA "83  ca.161.000","81  33.784"
28390 DATA "IJSLAND","REYKJAVIK","103.000"
28400 DATA "83  237.000","84  88.745"
28410 DATA "ZAIRE","KINSHASA","2.345.409"
28420 DATA "83  ruim 31 miljoen","80  3.700.000"
28430 DATA "ZAMBIA","LUSAKA","752.614"
28440 DATA "83  ca. 6.240.000","80  538.469"
28450 DATA "ZIMBABWE","HARARE","390.580"
28460 DATA "83  ca.7,7 miljoen","82  656.000"
28470 DATA "ZUIDAFRIKA","PRETORIA","1.221.037"
28480 DATA "83  ca.30,8 miljoen","80  453.335"
28490 DATA "ZUIDJEMEN","ADEN","332.968"
28500 DATA "83  ca.2.158.000","80  343.000"
28510 DATA "ZUIDKOREA","SEOEL","98.484"
28520 DATA "83  39.951.000","83  9.204.000"
28530 DATA "ZWEDEN","STOCKHOLM","449.964"
28540 DATA "83  8.329.000","85  653.455"
28550 DATA "ZWITSERLAND","BERN","41.288"
28560 DATA "83  6.505.000","85  300.505"
28570 DATA "","","","",""
30000 REM **************************
30010 REM *                        *
30020 REM * 178 LANDEN             *
30030 REM *          MET           *
30040 REM *            HOOFDSTEDEN *
30050 REM *                        *
30060 REM **************************
32000 REM
32010 REM ******** TROS ************
32020 REM *                        *
32030 REM *    J van NOORT         *
32040 REM *                        *
32050 REM      PEPPELSTRAAT 16.
32060 REM T                        T
32070 REM R    3203 VK             R
32080 REM O                        O
32090 REM S    SPIJKENISSE         S
32100 REM
32110 REM *    DECEMBER 1989       *
32120 REM *                        *
32130 REM *    MSX-2  BASICODE-3   *
32140 REM *                        *
32150 REM ******** TROS ************
32160 REM
32170 REM TROS-RADIO dd 900411
32180 '
`);

cpcBasic.addItem("", `
REM cpcmhz - CPC MHz: Time measurement
PRINT "Measurement started."
DIM r(5)
ms300=100:mxcpc=90
loops=2
'
FOR i=0 TO loops-1
  c=0:t1=TIME:t=t1
  WHILE t=t1:t=TIME:c=c+1:WEND
  c=0:t1=t+ms300
  WHILE t<t1:t=TIME:c=c+1:WEND
  r(i)=c
NEXT
PRINT "In";ROUND(ms300*10/3);"ms we can count to:";
mx=0
FOR i=0 TO loops-1
  PRINT STR$(r(i));
  mx=MAX(mx,r(i))
NEXT
mhz=mx/mxcpc*4
PRINT "":PRINT "=> max:";STR$(mx);", CPC";mhz;"MHz"
'
`);

cpcBasic.addItem("", `
100 REM crypto1 - Cryptology 1 (Kryptoanalyse - Kryptologie)
110 'Die geheime Nachricht, Umschau Verlag, S.63
120 '16.11.1988
130 '
160 DIM z(5,27): '6 languages with 28 data points: 26 letters + vowels/consonants
170 'Reading the frequency of letters
180 FOR j=0 TO 5:FOR i=0 TO 27:READ z(j,i):NEXT i,j
190 MODE 2
200 PRINT "Cryptanalysis - Cryptology - Letter frequency (%)"
215 padlen=12
225 DEF FNpad$(s$)=SPACE$(padlen-LEN(s$))+s$
230 PRINT "   ";FNpad$("German");FNpad$("English");FNpad$("French");FNpad$("Italian");FNpad$("Spanish");FNpad$("Portuguese")
240 FOR i=0 TO 27
243   IF i<26 THEN PRINT CHR$(i+65)+"  "; ELSE IF i=26 THEN PRINT:PRINT "vow"; ELSE PRINT "con";
245   FOR j=0 TO 5
250     PRINT FNpad$(DEC$(z(j,i),"###.##"));
255   NEXT j
262   PRINT
268 NEXT i
270 '
290 'PRINT"sum";
300 'FOR j=0 TO 5:su=0:FOR i=0 TO 25:su=su+z(j,i):NEXT i:PRINT fnpad$(DEC$(su,"###.#"));:NEXT j
305 't=time+900:while time<t:frame:wend
308 PRINT "[vow= vowels, con=most frequent consonants L, N, R, S, T]"
309 PRINT
310 '
320 '
330 'Comparison table of the frequency of individual letters based on 100-word texts:
340 'Table: 1. Proportion of individual letters A-Z
350 '2. Proportion of vowels (1 number)
360 '2. Proportion of the most frequent consonants L, N, R, S, T (1 number)
370 '
380 'German
390 DATA 5,2.5,1.5,5,18.5,1.5,4,4,8,0,1,3,2.5,11.5,3.5,0.5,0,7,7,5,5,1,1.5,0,0,1.5
400 DATA 40,34
410 'English
420 DATA 7.81,1.28,2.93,4.11,13.05,2.88,1.39,5.85,6.77,0.23,0.42,3.6,2.62,7.28,8.21,2.15,0.14,6.64,6.46,9.02,2.77,1,1.49,0.3,1.51,0.09
430 DATA 40,33
440 'French
450 DATA 9.42,1.02,2.64,3.38,15.87,0.95,1.04,0.77,8.41,0.89,0,5.34,3.24,7.15,5.14,2.86,1.06,6.46,7.9,7.26,6.24,2.15,0,0.3,0.24,0.32
460 DATA 45,34
470 'Italian
480 DATA 11.74,0.92,4.5,3.73,11.79,0.95,1.64,1.54,11.28,0,0,6.51,2.51,6.88,9.83,3.05,0.61,6.37,4.98,5.62,3.01,2.1,0,0,0,0.49
490 DATA 48,30
500 'Spanish
510 DATA 12.69,1.41,3.93,5.58,13.15,0.46,1.12,1.24,6.25,0.56,0,5.94,2.65,6.95,9.49,2.43,1.16,6.25,7.6,3.91,4.63,1.07,0,0.13,1.06,0.35
520 DATA 47,31
530 'Portuguese
540 DATA 13.5,0.5,3.5,5,13,1,1,1,6,0.5,0,3.5,4.5,5.5,11.5,3,1.5,7.5,7.5,4.5,4,1.5,0,0.2,0,0.3
550 DATA 48,29
560 '
570 '
610 REM Kryptoanalyse - Kryptologie
620 'Die geheime Nachricht, Umschau Verlag, S.62
630 '16.11.1988
640 '
670 ma=25:mb=23:mc=6:md=15:me=14 :'count-1
680 DIM a$(ma),b$(mb),c$(mc),d$(md),e$(me) :'fields for letter groups (count-1)
690 'Read letter groups
700 FOR i=0 TO ma:READ a$(i):NEXT
710 FOR i=0 TO mb:READ b$(i):NEXT
720 FOR i=0 TO mc:READ c$(i):NEXT
730 FOR i=0 TO md:READ d$(i):NEXT
740 FOR i=0 TO me:READ e$(i):NEXT
750 '
760 'MODE 2
770 'PRINT "Kryptoanalyse - Kryptologie"
775 'print
780 PRINT "Order of frequencies for letters and letter groups in German"
790 FOR i=0 TO ma:PRINT a$(i);",";:NEXT:PRINT
800 FOR i=0 TO mb:PRINT b$(i);",";:NEXT:PRINT
810 FOR i=0 TO mc:PRINT c$(i);",";:NEXT:PRINT
820 FOR i=0 TO md:PRINT d$(i);",";:NEXT:PRINT
830 FOR i=0 TO me:PRINT e$(i);",";:NEXT:PRINT
840 '
850 '
855 'PRINT:FRAME:'TODO: wait key
857 END
860 '
870 'Order of frequencies for letters and letter groups in German
880 '
890 'Individual letters
900 DATA "E","N","R","I","S","T","U","D","A","H","G","L","O","C","M","B","Z","F","W","K","V","P","J","Q","X","Y"
910 'Two-letter groups
920 DATA "EN","ER","CH","DE","GE","EI","IE","IN","NE","BE","EL","TE","UN","ST","DI","ND","UE","SE","AU","RE","HE","IT","RI","TZ"
930 'Double letters
940 DATA "EE","TT","LL","SS","DD","MM","NN"
950 'Three-letter groups
960 DATA "EIN","ICH","DEN","DER","TEN","CHT","SCH","CHE","DIE","UNG","GEN","UND","NEN","DES","BEN","RCH"
970 'Four-letter groups
980 DATA "ICHT","KEIT","HEIT","CHON","CHEN","CHER","URCH","EICH","DERN","AUCH","SCHA","SCHE","SCHI","SCHO","SCHU"
990 '
`);

cpcBasic.addItem("", `
1 REM eliza - Eliza (Boss)
2 REM (c) Olaf Hartwig, 1985
3 REM Kuenstliche Intelligenz auf dem CPC
4 REM Titel: Eliza Vorgesetzter
5 REM 'Modifications: line 3045: avoid endless loop when only one answer to choose
6 MODE 2
7 'WIDTH 60
10 '
30 'PAPER 3
40 'PEN 0
50 'CLS
70 '
100 GOSUB 30000
110 REM Initialisation
150 GOSUB 20000
160 REM Titel
170 '
175 i$="":WHILE i$<>"stop"
200 GOSUB 1000
210 REM Dialog Satzeingabe
215 IF i$="stop" THEN STOP
300 GOSUB 2000
310 REM Suchroutine
400 GOSUB 3000
410 REM Konjugation
500 GOSUB 4000
510 REM Antwortsatz
610 WEND
989 STOP
990 '
1000 REM Dialog Satzeingabe
1100 PRINT
1105 i$="":WHILE i$="" OR LEN(i$)<2 OR LEN(i$)>200
1110 INPUT "_ _ _> ";i$
1120 'IF i$="" THEN 1110
1125 'IF i$="stop" THEN STOP
1130 IF LEN(i$)<2 OR LEN(i$)>200 THEN PRINT "Ungueltige Eingabe...": 'GOTO 1110
1135 WEND
1800 RETURN
1990 '
2000 REM Suchschleife
2010 '
2020 REM Schluesselwort waehlen
2090 ma=0
2100 i=1: WHILE i<=46 AND ma<>9:'FOR i=1 TO 46
2110 zk$=k$(i)
2120 GOSUB 2500
2125 'IF ma=9 THEN 2150
2130 'NEXT i
2135 i=i+1
2136 WEND
2140 '
2150 RETURN
2160 '
2500 REM scanning
2510 FOR p=1 TO LEN(i$)
2520 w$=MID$(i$,p,LEN(zk$))
2530 IF w$=k$(i) THEN ma=9:k=i:RETURN
2540 NEXT p
2550 k=46:REM kein Keywort
2560 RETURN
2590 '
3000 REM Konjugation
3010 REM Antwortsatz vorwaehlen
3015 aw=aalt:zw=2
WHILE aw=aalt AND zw>1
3020 zw=n(k)-r(k)
3030 zr=INT(RND(1)*zw)
3040 aw=r(k)+zr
3045 'IF aw=aalt and zw>1 THEN 3000: 'IF aw=aalt THEN 3000
WEND
3047 aalt=aw
3050 '
3060 mk=0
3070 REM Restsatzmarker reset
3080 '
3100 REM Restsatz anfuegen?
3120 i=1: WHILE i<= LEN(a$(aw)) AND  MID$(a$(aw),i,1)<>"*":'FOR i=1 TO LEN(a$(aw))
3130 'IF MID$(a$(aw),i,1)="*" THEN 3200
3140 'NEXT i
i=i+1
WEND
IF MID$(a$(aw),i,1)="*" THEN GOSUB 3200
3150 RETURN
3160 REM kein Restsatz
3170 REM und keine Konjugation
3200 '
3300 REM Restsatz isolieren
3310 re$=MID$(i$,p+LEN(zk$),LEN(i$))
3350 mk=99
3360 REM Restsatz in Antwort anfuegen
3510 '
3980 RETURN
3990 '
4000 REM Satzausgabe
4010 '
4100 PRINT " --> "
4120 'IF mk=99 THEN GOTO 4200
4130 IF mk=0 THEN GOSUB 4300: RETURN 'GOTO 4300
4140 '
4200 PRINT LEFT$(a$(aw),LEN(a$(aw))-1);re$
4250 RETURN
4260 '
4300 PRINT a$(aw)
4350 RETURN
5000 '
20000 REM Titel
20010 'CLS
20015 PRINT
20020 PRINT " E L I Z A   V O R G."
20030 PRINT
20040 PRINT "(c) Olaf Hartwig  1985"
20060 'WINDOW 6,79,6,25
20070 'PAPER 2
20080 'PEN 3
20090 'CLS
20100 RETURN
28000 '
30000 REM Initialisation
30010 DIM r(46):   REM Codezahl 1
30020 DIM n(46):   REM Codezahl 2
30030 DIM k$(46):  REM Keywoerter
30040 DIM a$(121): REM Antworten
30100 '
31000 REM Codezahlen lesen
31005 FOR i=1 TO 46
31010 READ r(i)
31020 READ n(i)
31030 NEXT i
31060 '
31100 REM data r(i), n(i)
31110 DATA 1,3
31120 DATA 4,6
31130 DATA 7,10
31140 DATA 11,15
31150 DATA 11,15
31160 DATA 16,20
31170 DATA 21,24
31180 DATA 25,27
31190 DATA 28,35
31200 DATA 28,35
31210 DATA 28,35
31220 DATA 28,35
31230 DATA 28,35
31240 DATA 28,35
31250 DATA 36,40
31260 DATA 36,40
31270 DATA 36,40
31280 DATA 41,45
31290 DATA 41,45
31300 DATA 41,45
31310 DATA 41,45
31320 DATA 41,45
31330 DATA 46,48
31340 DATA 49,53
31350 DATA 54,57
31360 DATA 58,63
31370 DATA 64,69
31380 DATA 64,69
31390 DATA 70,74
31400 DATA 70,74
31410 DATA 75,77
31420 DATA 75,77
31430 DATA 78,85
31440 DATA 86,89
31450 DATA 90,94
31460 DATA 90,94
31470 DATA 95,98
31480 DATA 95,98
31490 DATA 99,101
31500 DATA 102,106
31510 DATA 107,108
31520 DATA 109,111
31530 DATA 112,113
31540 DATA 112,113
31550 DATA 114,121
31560 DATA 114,121
31590 '
32000 REM Keywoerter einlesen
32010 FOR i=1 TO 46
32020 READ k$(i)
32030 NEXT i
32040 '
32100 REM data Keywoerter
32110 DATA "ich bin"
32120 DATA "ich kann"
32130 DATA "will"
32140 DATA "wuensche"
32150 DATA "wunsch"
32160 DATA "du"
32170 DATA "sie"
32180 DATA "immer"
32190 DATA "warum"
32200 DATA "wie"
32210 DATA "wer"
32220 DATA "was"
32230 DATA "wo"
32240 DATA "wann"
32250 DATA "nein"
32260 DATA "nicht"
32270 DATA "nie"
32280 DATA "ja"
32290 DATA "stimmt"
32300 DATA "immer"
32310 DATA "genau"
32320 DATA "richtig"
32330 DATA "grund"
32340 DATA "traum"
32350 DATA "hallo"
32360 DATA "denke"
32370 DATA "geld"
32380 DATA "gehalt"
32390 DATA "gleich"
32400 DATA "sofort"
32410 DATA "ende"
32420 DATA "freizeit"
32430 DATA "freund"
32440 DATA "computer"
32450 DATA "arbeit"
32460 DATA "beruf"
32470 DATA "idiot"
32480 DATA "trottel"
32490 DATA "streik"
32500 DATA "moegen"
32510 DATA "spielen"
32520 DATA "alt"
32530 DATA "chef"
32540 DATA "boss"
32550 DATA "kein keywort"
32555 DATA ""
32590 '
33000 REM Antworten einlesen
33010 FOR i=1 TO 121
33020 READ a$(i)
33030 NEXT i
33070 '
33100 REM Data Antworten
33110 DATA "sind sie sich da auch ganz sicher dass sie das wirklich sind und zwar*"
33120 DATA "vielleicht wuerden sie das ja gerne sein naehmlich*"
33130 DATA "ich glaube ihnen kein wort das sie das sind-*"
33140 DATA "schoen wenn sie das koennen!"
33150 DATA "reden sie nicht so viel-fangen sie an!"
33160 DATA "dann setzen sie ihr koennen sinnvol ein und belaestigen sie mich nicht"
33170 DATA "was ist das fuer ein tonfall.sie wollen nicht sondern moechten."
33180 DATA "was wollen sie?!!"
33190 DATA "ihnen geht es wohl zu gut!"
33200 DATA "abgelehnt! sprechen sie nicht weiter!"
33210 DATA "was wuenschen sie? *"
33220 DATA "habe ich mich da verhoert?sie wuenschen*"
33230 DATA "jeder wunsch muss hier hart erarbeitet werden!"
33240 DATA "sie wuenschen sich da vielleicht etwas zu viel!"
33250 DATA "ich habe ihre wuensche allmaehlich gestrichen satt!"
33260 DATA "gewoehnen sie sich allmaehlich einen anderen tonfall an!"
33270 DATA "siezen sie mich gefaelligst!"
33280 DATA "wenn sie mich nicht augenblicklich mit 'sie' anreden fliegen sie raus"
33290 DATA "hoeren sie sofort mit ihrer duzerei auf!"
33300 DATA "wagen sie es nicht noch einmal 'du' zu mir zu sagen!"
33310 DATA "reden sie schon wieder von mir?"
33320 DATA "beziehen sie das auf mich?"
33330 DATA "ihr siezen gefaellt mir."
33340 DATA "warum wenden sie sich immer an mich?"
33350 DATA "wirklich immer?"
33360 DATA "immer noch?"
33370 DATA "warum?"
33380 DATA "weshalb fragen sie?"
33390 DATA "sie haben meine geduld bereits ueberstrapaziert! keine fragen mehr!"
33400 DATA "noch eine weitere frage und sie fliegen raus!"
33410 DATA "ihre ewige fragerei ist ja nicht zum aushalten!"
33420 DATA "stellen keine so idiotischen fragen!"
33430 DATA "schluss mit der fragerei!"
33440 DATA "hier wird nicht gefragt sondern gespurt."
33450 DATA "hier stelle ich die fragen."
33460 DATA "sagen sie nicht immer nein!"
33470 DATA "noch ein 'nein' und..."
33480 DATA "hier wird positiv gedacht!"
33490 DATA "wirklich nicht?"
33500 DATA "was soll das heissen?"
33510 DATA "prima!"
33520 DATA "jawohl! denken sie positiv!"
33530 DATA "heisst das sie sind mit mir einer meinung?"
33540 DATA "sie denken also positiv darueber?"
33550 DATA "es gefaellt mir wenn sie positiv denken."
33560 DATA "suchen sie nicht nach gruenden sondern arbeiten sie!"
33570 DATA "ihre gruende interessieren mich nicht!"
33580 DATA "behalten sie ihre gruende besser fuer sich!"
33590 DATA "haben sie etwa bei ihrer arbeit getraeumt?"
33600 DATA "sie haben doch wohl von mir getraeumt?"
33610 DATA "ihre traeume interessieren mich nicht!"
33620 DATA "kommen sie mir nicht mit solchen dingen!"
33630 DATA "traeumen koennen sie zu hause aber nicht bei der arbeit!"
33640 DATA "guten tag heisst das!"
33650 DATA "was erlauben sie sich?"
33660 DATA "sagen sie nicht noch einmal hallo zu mir!"
33670 DATA "wie sprechen sie mit ihrem vorgesetzten?"
33680 DATA "sie denken zu viel."
33690 DATA "verschwenden sie ihre energie nicht mit zu vielem denken!"
33700 DATA "denken sie nicht - arbeiten sie!"
33710 DATA "wenn sie das noch einmal denken fliegen sie raus!"
33720 DATA "genug gedacht fuer heute!"
33730 DATA "sie werden nicht fuers denken bezahlt sondern fuers arbeiten!"
33740 DATA "sie wollen etwa schon wieder mehr geld?"
33750 DATA "erwaehnen sie noch einmal das wort geld und ich kuerze ihr gehalt!"
33760 DATA "warum kommen sie auf geld?"
33770 DATA "geld geht mich nichts an."
33780 DATA "geld erhaelt nur der der arbeitet ... sie nicht!"
33790 DATA "aergern sie mich nicht mit ihren ewigen gedanken an geld!"
33800 DATA "sagen sie das nicht sondern handeln sie!"
33810 DATA "lassen sie dem satz taten folgen!"
33820 DATA "handeln sie endlich!"
33830 DATA "ihre ausfluechte reichen mir...tun sie etwas!"
33840 DATA "nicht gleich oder sofort sondern jetzt!keine ausfluechte!"
33850 DATA "wie koennen sie jetzt an ihre freizeit denken?"
33860 DATA "sie muessen heute ueberstunden machen...keine freizeit!"
33870 DATA "sie haben doch erst gerade ferien gehabt!"
33880 DATA "ihr einziger freund bin ich!"
33890 DATA "warum denken sie an freunde?"
33900 DATA "uebrigens ihre freunde gehen mir langsam auf die nerven!"
33910 DATA "wie koennen sie jetzt an freunde denken...sie muessen arbeiten!"
33920 DATA "belaestigen sie mich nicht immer mit ihren freunden!"
33930 DATA "sie haben jetzt keine zeit fuer freunde!"
33940 DATA "denken sie an etwas sinnvolleres!"
33950 DATA "haben sie ueberhaupt freunde?"
33960 DATA "was halten sie von computern?"
33970 DATA "haben sie etwas gegen computer?"
33980 DATA "computer sind sinnvoll. oder was finden sie?"
33990 DATA "wie bitte computer sind *"
34000 DATA "wie ist denn ihre arbeitseinstellung?"
34010 DATA "was? arbeit ist *"
34020 DATA "wie gefaellt ihnen denn ihre arbeit?"
34030 DATA "haben sie zu wenig arbeit?"
34040 DATA "sie moechten wohl mehr in ihrem beruf arbeiten?"
34050 DATA "reden sie etwa von mir?"
34060 DATA "was haben sie da eben gesagt?"
34070 DATA "meinen sie etwa mich?"
34080 DATA "ein weiteres wort und ich feuere sie...fristlos!"
34090 DATA "streik ??"
34100 DATA "schon wieder ein streik ?"
34110 DATA "bei streiks hilft nur aussperrung oder entlassungen!"
34120 DATA "was moegen sie? ...*"
34130 DATA "warum moegen sie*"
34140 DATA "moegen sie auch ihre arbeit?"
34150 DATA "sie moegen doch sicher ganz besonders mich nicht wahr?"
34160 DATA "sie moegen mir entschieden zu viel!"
34170 DATA "warum spielen sie das gerne und zwar*"
34180 DATA "bei mir wird nicht gespielt!"
34190 DATA "wer ist hier alt?"
34200 DATA "sie werden auch allmaehlich alt."
34210 DATA "finden sie mich etwa auch alt?"
34220 DATA "wie reden sie mit mir?"
34230 DATA "was bilden sie sich ein mich so zu nennen?"
34240 DATA "was wollen sie eigentlich?"
34250 DATA "halten sie gefaelligst ihren mund!"
34260 DATA "nuscheln sie nicht so!"
34270 DATA "gewoehnen sie sich einen anderen tonfall an!"
34280 DATA "ist das alles was sie mir zu sagen haben?"
34290 DATA "ich muss noch etwas erledigen. warten sie einige minuten!"
34300 DATA "entschuldigen sie mich fuer einige minuten. ich muss kurz telephonieren."
34310 DATA "starren sie mich nicht so aufdringlich an!"
34320 DATA ""
34330 DATA ""
34340 '
34350 RETURN
34360 '
`);

cpcBasic.addItem("", `
REM euler - Compute e with 1000-10000 digits
MODE 2
d=1000: ' can be set from 1000 to 10000
PRINT "Compute e with";d;"digits"
'
' Initialize array and variables
dpnum=5
maxnum=d/dpnum
DIM digits(maxnum+2)
base = 10 ^ dpnum
digits(0) = 1
' Compute e using a series expansion
' e = sum_{n=0}^{infty} frac{1}{n!}
' [check also this for an implementation in JavaScript: https://www.i4cy.com/euler/]
iterationsFor1000=450
iterations=iterationsFor1000*d/1000
iterationsDiv10=iterations\\10
PRINT "Progress: ";
FOR n = iterations TO 1 STEP -1
  IF digits(0) > 0 THEN GOSUB 300: IF n MOD iterationsDiv10 = 0 THEN PRINT n / iterationsDiv10;
  digits(0) = digits(0) + 1
NEXT
PRINT
'
' Round the result
digits(maxnum+1) = digits(maxnum+1) + INT(digits(maxnum+2) / base + 0.5)
'
' Normalize the digits
FOR i = maxnum TO 1 STEP -1
  carry = INT(digits(i) / base)
  digits(i) = digits(i) - base * carry
  digits(i - 1) = digits(i - 1) + carry
NEXT
'
' Print and check the result
PRINT "e="; digits(0); "."
c$="":c=1
FOR i = 1 TO maxnum
  digit$ = STR$(digits(i))
  digit$ = RIGHT$(digit$, LEN(digit$) - 1)
  digit$ = RIGHT$("0000" + digit$, dpnum)
  PRINT digit$; " ";
  ' Check
  IF c>LEN(c$) THEN READ c$:c=1
  IF digit$<>MID$(c$,c,dpnum) THEN PRINT "Error at pos";i*dpnum+(c-1);":";digit$;"<>";MID$(c$,c,dpnum):STOP
  c=c+dpnum
NEXT
PRINT
END
'
300 'compute
FOR i = 0 TO maxnum+1
  quotient = INT(digits(i) / n)
  remainder = digits(i) - quotient * n
  digits(i) = quotient
  digits(i + 1) = digits(i + 1) + base * remainder
NEXT
RETURN
'
'Data to check the result (arranged 75 decimal places on each line)
'https://mathshistory.st-andrews.ac.uk/HistTopics/e_10000/
'10000 digits of e
DATA "718281828459045235360287471352662497757247093699959574966967627724076630353"
DATA "547594571382178525166427427466391932003059921817413596629043572900334295260"
DATA "595630738132328627943490763233829880753195251019011573834187930702154089149"
DATA "934884167509244761460668082264800168477411853742345442437107539077744992069"
DATA "551702761838606261331384583000752044933826560297606737113200709328709127443"
DATA "747047230696977209310141692836819025515108657463772111252389784425056953696"
DATA "770785449969967946864454905987931636889230098793127736178215424999229576351"
DATA "482208269895193668033182528869398496465105820939239829488793320362509443117"
DATA "301238197068416140397019837679320683282376464804295311802328782509819455815"
DATA "301756717361332069811250996181881593041690351598888519345807273866738589422"
DATA "879228499892086805825749279610484198444363463244968487560233624827041978623"
DATA "209002160990235304369941849146314093431738143640546253152096183690888707016"
DATA "768396424378140592714563549061303107208510383750510115747704171898610687396"
DATA "965521267154688957035035402123407849819334321068170121005627880235193033224"
DATA "745015853904730419957777093503660416997329725088687696640355570716226844716"
DATA "256079882651787134195124665201030592123667719432527867539855894489697096409"
DATA "754591856956380236370162112047742722836489613422516445078182442352948636372"
DATA "141740238893441247963574370263755294448337998016125492278509257782562092622"
DATA "648326277933386566481627725164019105900491644998289315056604725802778631864"
DATA "155195653244258698294695930801915298721172556347546396447910145904090586298"
DATA "496791287406870504895858671747985466775757320568128845920541334053922000113"
DATA "786300945560688166740016984205580403363795376452030402432256613527836951177"
DATA "883863874439662532249850654995886234281899707733276171783928034946501434558"
DATA "897071942586398772754710962953741521115136835062752602326484728703920764310"
DATA "059584116612054529703023647254929666938115137322753645098889031360205724817"
DATA "658511806303644281231496550704751025446501172721155519486685080036853228183"
DATA "152196003735625279449515828418829478761085263981395599006737648292244375287"
DATA "184624578036192981971399147564488262603903381441823262515097482798777996437"
DATA "308997038886778227138360577297882412561190717663946507063304527954661855096"
DATA "666185664709711344474016070462621568071748187784437143698821855967095910259"
DATA "686200235371858874856965220005031173439207321139080329363447972735595527734"
DATA "907178379342163701205005451326383544000186323991490705479778056697853358048"
DATA "966906295119432473099587655236812859041383241160722602998330535370876138939"
DATA "639177957454016137223618789365260538155841587186925538606164779834025435128"
DATA "439612946035291332594279490433729908573158029095863138268329147711639633709"
DATA "240031689458636060645845925126994655724839186564209752685082307544254599376"
DATA "917041977780085362730941710163434907696423722294352366125572508814779223151"
DATA "974778060569672538017180776360346245927877846585065605078084421152969752189"
DATA "087401966090665180351650179250461950136658543663271254963990854914420001457"
DATA "476081930221206602433009641270489439039717719518069908699860663658323227870"
DATA "937650226014929101151717763594460202324930028040186772391028809786660565118"
DATA "326004368850881715723866984224220102495055188169480322100251542649463981287"
DATA "367765892768816359831247788652014117411091360116499507662907794364600585194"
DATA "199856016264790761532103872755712699251827568798930276176114616254935649590"
DATA "379804583818232336861201624373656984670378585330527583333793990752166069238"
DATA "053369887956513728559388349989470741618155012539706464817194670834819721448"
DATA "889879067650379590366967249499254527903372963616265897603949857674139735944"
DATA "102374432970935547798262961459144293645142861715858733974679189757121195618"
DATA "738578364475844842355558105002561149239151889309946342841393608038309166281"
DATA "881150371528496705974162562823609216807515017772538740256425347087908913729"
DATA "172282861151591568372524163077225440633787593105982676094420326192428531701"
DATA "878177296023541306067213604600038966109364709514141718577701418060644363681"
DATA "546444005331608778314317444081194942297559931401188868331483280270655383300"
DATA "469329011574414756313999722170380461709289457909627166226074071874997535921"
DATA "275608441473782330327033016823719364800217328573493594756433412994302485023"
DATA "573221459784328264142168487872167336701061509424345698440187331281010794512"
DATA "722373788612605816566805371439612788873252737389039289050686532413806279602"
DATA "593038772769778379286840932536588073398845721874602100531148335132385004782"
DATA "716937621800490479559795929059165547050577751430817511269898518840871856402"
DATA "603530558373783242292418562564425502267215598027401261797192804713960068916"
DATA "382866527700975276706977703643926022437284184088325184877047263844037953016"
DATA "690546593746161932384036389313136432713768884102681121989127522305625675625"
DATA "470172508634976536728860596675274086862740791285657699631378975303466061666"
DATA "980421826772456053066077389962421834085988207186468262321508028828635974683"
DATA "965435885668550377313129658797581050121491620765676995065971534476347032085"
DATA "321560367482860837865680307306265763346977429563464371670939719306087696349"
DATA "532884683361303882943104080029687386911706666614680001512114344225602387447"
DATA "432525076938707777519329994213727721125884360871583483562696166198057252661"
DATA "220679754062106208064988291845439530152998209250300549825704339055357016865"
DATA "312052649561485724925738620691740369521353373253166634546658859728665945113"
DATA "644137033139367211856955395210845840724432383558606310680696492485123263269"
DATA "951460359603729725319836842336390463213671011619282171115028280160448805880"
DATA "238203198149309636959673583274202498824568494127386056649135252670604623445"
DATA "054922758115170931492187959271800194096886698683703730220047531433818109270"
DATA "803001720593553052070070607223399946399057131158709963577735902719628506114"
DATA "651483752620956534671329002599439766311454590268589897911583709341937044115"
DATA "512192011716488056694593813118384376562062784631049034629395002945834116482"
DATA "411496975832601180073169943739350696629571241027323913874175492307186245454"
DATA "322203955273529524024590380574450289224688628533654221381572213116328811205"
DATA "214648980518009202471939171055539011394331668151582884368760696110250517100"
DATA "739276238555338627255353883096067164466237092264680967125406186950214317621"
DATA "166814009759528149390722260111268115310838731761732323526360583817315103459"
DATA "573653822353499293582283685100781088463434998351840445170427018938199424341"
DATA "009057537625776757111809008816418331920196262341628816652137471732547772778"
DATA "348877436651882875215668571950637193656539038944936642176400312152787022236"
DATA "646363575550356557694888654950027085392361710550213114741374410613444554419"
DATA "210133617299628569489919336918472947858072915608851039678195942983318648075"
DATA "608367955149663644896559294818785178403877332624705194505041984774201418394"
DATA "773120281588684570729054405751060128525805659470304683634459265255213700806"
DATA "875200959345360731622611872817392807462309468536782310609792159936001994623"
DATA "799343421068781349734695924646975250624695861690917857397659519939299399556"
DATA "754271465491045686070209901260681870498417807917392407194599632306025470790"
DATA "177452751318680998228473086076653686685551646770291133682756310722334672611"
DATA "370549079536583453863719623585631261838715677411873852772292259474337378569"
DATA "553845624680101390572787101651296663676445187246565373040244368414081448873"
DATA "295784734849000301947788802046032466084287535184836495919508288832320652212"
DATA "810419044804724794929134228495197002260131043006241071797150279343326340799"
DATA "596053144605323048852897291765987601666781193793237245385720960758227717848"
DATA "336161358261289622611812945592746276713779448758675365754486140761193112595"
DATA "851265575973457301533364263076798544338576171533346232527057200530398828949"
DATA "903425956623297578248873502925916682589445689465599265845476269452878051650"
DATA "172067478541788798227680653665064191097343452887833862172615626958265447820"
DATA "567298775642632532159429441803994321700009054265076309558846589517170914760"
DATA "743713689331946909098190450129030709956622662030318264936573369841955577696"
DATA "378762491885286568660760056602560544571133728684020557441603083705231224258"
DATA "722343885412317948138855007568938112493538631863528708379984569261998179452"
DATA "336408742959118074745341955142035172618420084550917084568236820089773945584"
DATA "267921427347756087964427920270831215015640634134161716644806981548376449157"
DATA "390012121704154787259199894382536495051477137939914720521952907939613762110"
DATA "723849429061635760459623125350606853765142311534966568371511660422079639446"
DATA "662116325515772907097847315627827759878813649195125748332879377157145909106"
DATA "484164267830994972367442017586226940215940792448054125536043131799269673915"
DATA "754241929660731239376354213923061787675395871143610408940996608947141834069"
DATA "836299367536262154524729846421375289107988438130609555262272083751862983706"
DATA "678722443019579379378607210725427728907173285487437435578196651171661833088"
DATA "112912024520404868220007234403502544820283425418788465360259150644527165770"
DATA "004452109773558589762265548494162171498953238342160011406295071849042778925"
DATA "855274303522139683567901807640604213830730877446017084268827226117718084266"
DATA "433365178000217190344923426426629226145600433738386833555534345300426481847"
DATA "398921562708609565062934040526494324426144566592129122564889356965500915430"
DATA "642613425266847259491431423939884543248632746184284665598533231221046625989"
DATA "014171210344608427161661900125719587079321756969854401339762209674945418540"
DATA "711844643394699016269835160784892451405894094639526780735457970030705116368"
DATA "251948770118976400282764841416058720618418529718915401968825328930914966534"
DATA "575357142731848201638464483249903788606900807270932767312758196656394114896"
DATA "171683298045513972950668760474091542042842999354102582911350224169076943166"
DATA "857424252250902693903481485645130306992519959043638402842926741257342244776"
DATA "558417788617173726546208549829449894678735092958165263207225899236876845701"
DATA "782303809656788311228930580914057261086588484587310165815116753332767488701"
DATA "482916741970151255978257270740643180860142814902414678047232759768426963393"
DATA "577354293018673943971638861176420900406866339885684168100387238921448317607"
DATA "011668450388721236436704331409115573328018297798873659091665961240202177855"
DATA "885487617616198937079438005666336488436508914480557103976521469602766258359"
DATA "9051987042300179465536788"
'
`);

cpcBasic.addItem("", `
REM factorial - Big Factorials
MODE 2
PRINT "Big Factorials"
n=252
INPUT "Which number:"; n
PRINT
'
DEF FNnumStr$(x) = RIGHT$(STR$(x), LEN(STR$(x)) - 1)
'
PRINT "Properties of "; FNnumStr$(n); "!:"
GOSUB 400 ' number of digits of n!
GOSUB 500 ' trailing zeroes of n! (for checking the result)
PRINT
FRAME
GOSUB 1000 ' algorithm1
PRINT
FRAME
GOSUB 2000 ' algorithm2
END
'
REM Calculate number of digits
REM https://www.geeksforgeeks.org/count-digits-in-a-factorial-using-logarithm/
400 digits = 0
FOR i = 2 TO n
  digits = digits + LOG10(i)
NEXT
digits = INT(digits) + 1
'or use Stirling's formula:
econst = 2.718281828459045
digits2 = n * LOG10(n / econst) + LOG10(2 * PI * n) / 2.0
digits2 = INT(digits2+1)
if digits<>digits2 THEN ?"digits calculation differs:"; digits; digits2
PRINT "Number of digits:"; digits
RETURN
'
REM Calculate number of trailing zeroes (to check the result)
REM https://www.geeksforgeeks.org/count-trailing-zeroes-factorial-number/
500 trailz = 0
i = 5
WHILE INT(n / i) >= 1
  trailz = trailz + INT(n / i)
  i = i * 5
WEND
PRINT "Number of trailing zeroes:"; trailz
RETURN
'
REM factorial 1
1000 t = TIME
ri = INT(digits / 5) - (digits mod 5 <> 0): 'number of 5-digit blocks
DIM r(ri + 1): 'one more to allow carry
r(1) = 1
'
REM Calculate factorial using sum of logarithms
REM log_{10}(n!) = log_{10}(1) + log_{10}(2) + log_{10}(3) + ldots + log_{10}(n)
l = 1
FOR i = n TO 2 STEP -1
  l = l + LOG10(i)
  li = l / 5 + 1
  u = 0
  'multiply each block by the current number i; u=carry over to the next block
  FOR j = 1 TO li
    h = r(j) * i + u
    IF h < -100000 THEN u = 0 ELSE u = INT(h / 100000) : h = h - u * 100000
    r(j) = h
  NEXT j
NEXT i
t = TIME - t
'
REM Output the result
PRINT "Algorithm 1 (Sum of logarithms):"; ROUND(t * 10 / 3, 3); "ms"
PRINT FNnumStr$(n); "! ="
IF ri >= 1 THEN PRINT FNnumStr$(r(ri));
FOR i = ri - 1 TO 1 STEP -1
   PRINT RIGHT$("0000" + FNnumStr$(r(i)), 5);
NEXT
PRINT
'
REM Check result (number of trailing zeroes)
count = 0
i = 1
WHILE i <= ri AND r(i)=0
  count = count + 5
  i = i + 1
WEND
value = r(i)
DEF FNmod10(a) = a - 10 * INT(a / 10)
WHILE fnmod10(value)=0
  count = count + 1
  value = INT(value / 10)
WEND
IF count <> trailz THEN PRINT "Error in algorithm 1: trailing zeroes"; count; "<>"; trailz
RETURN
'
REM factorial2
REM based on: https://www.geeksforgeeks.org/factorial-large-number/
2000 t = TIME
DIM res(digits)
res(1) = 1
resSize = 1
FOR x = 2 TO n
  carry = 0
  FOR i = 1 TO resSize
    prod = res(i) * x + carry
    carry = INT(prod / 10)
    res(i) = prod - carry * 10
  NEXT i
  WHILE carry > 0
    resSize = resSize + 1
    res(resSize) = carry MOD 10
    carry = INT(carry / 10)
  WEND
NEXT x
t = TIME - t
'
REM Output the result
PRINT "Algorithm 2 (Multiplication of numbers 1..n):"; ROUND(t * 10 / 3, 3); "ms"
PRINT FNnumStr$(n); "! ="
FOR i = resSize TO 1 STEP -1
  PRINT FNnumStr$(res(i));
NEXT i
PRINT
'
REM Check result (number of trailing zeroes)
count = 0
i=1
WHILE i<=resSize AND res(i)=0
  count = count + 1
  i = i + 1
WEND
IF count <> trailz THEN PRINT "Error in algorithm 2: trailing zeroes"; count; "<>"; trailz
RETURN
'
`);

cpcBasic.addItem("", `
REM funcspec - Functional Spectrum
REM
m = 2
xd = 2 ^ (2 - MIN(m, 2))
yd = ((m = 3) + 2)
cols = 80 / xd - 1
rows = 50 / yd
MODE m
xoff = 0
yoff = 0
'
k = 6: GOSUB 260: FRAME
'
REM Get user choice
k = 0
INPUT "Functional Spectrum choice (1-16)"; k
IF k < 1 OR k > 16 THEN STOP
'
REM Animate spectrum
FOR xoff = 0 TO -30 STEP -10
  GOSUB 260
NEXT
FOR xoff = -30 TO 30 STEP 10
  GOSUB 260
NEXT
FOR xoff = 30 TO 0 STEP -10
  GOSUB 260
NEXT
END
'
'AnimateSpectrum
260 CLS
fchar = 65 + 32
xh = cols \\ 2 + xoff
yh = (rows \\ 2 + 1) + yoff
FOR z = 1 TO rows
  FOR s = 1 TO cols
    x = s - xh
    y = z - yh
    ON k GOSUB 410,420,430,440,450,460,470,480,490,500,510,520,530,540,550,560
    qu = ROUND(ABS((p MOD 16)))
    PEN qu
    PRINT CHR$(fchar + qu);
  NEXT s
  PRINT
NEXT z
t = TIME + 40: WHILE TIME < t: FRAME: WEND
RETURN
'
REM Calculations
410 p = 15 * (EXP(x) + EXP(-x)) / 2 + LOG(y + SQR(y * y + 1))
RETURN
420 p = 15 * EXP(-(x * z + y * s) / 200)
RETURN
430 p = 15 * EXP(-(SIN(x) + COS(y)) / 150)
RETURN
440 p = 15 * EXP(-(x * x + COS(y * 2)) / 100)
RETURN
450 p = 15 * EXP(-(COS(x * x + y * y)) / 150)
RETURN
460 p = 15 * EXP(-(x * x + y * y) / 150)
RETURN
470 p = 3 * (ATN(x) + ATN(y))
RETURN
480 p = 15 * 3 * ((x * x + y * y) > 18) * ATN(x / 2 + y / 2)
RETURN
490 p = 3 * ((x * x + y * y) > 18) * ATN(x / 2 + y / 2)
RETURN
500 p = 3 * (x * x * x - y * y) * SIN((x + y) / 20) / (x * x + y * y + 0.3)
RETURN
510 p = (SIN(x) - SIN(y)) ^ 3
RETURN
520 p = SIN(x - y) + SQR(ABS(x * y))
RETURN
530 p = 7 * (SIN(x / 5) + COS(y))
RETURN
540 p = (COS(2 * x) + 1) * (COS(2 * y) + 1)
RETURN
550 p = 3 * x ^ 2 + 5 * x + y
RETURN
560 p = 15 * SQR(ABS(y)) * COS(x)
RETURN
'
`);

cpcBasic.addItem("", `
REM labyrinth - Drawing Labyrinth
MODE 2
'
' Initialize arrays and variables
DIM directions(4), dx(4), dy(4)
dx(0) = 0: dy(0) = -1  ' Up
dx(1) = 1: dy(1) = 0   ' Right
dx(2) = 0: dy(2) = 1   ' Down
dx(3) = -1: dy(3) = 0  ' Left
'
' Set labyrinth size: cols (1-63), rows (1-49)
cols = 19
rows = 12
totalCells = cols * rows
cols = cols - 1
rows = rows - 1
DIM maze(cols, rows)
'
' Compute and output the labyrinth
GOSUB 200
GOSUB 610
END
'
' Compute the labyrinth
200 col = INT(RND * cols)
row = INT(RND * rows)
r = 1
WHILE r < totalCells
  q = 0
  IF row > 0 THEN IF maze(col, row - 1) = 0 THEN q = q + 1: directions(q) = 0
  IF col < cols THEN IF maze(col + 1, row) = 0 THEN q = q + 1: directions(q) = 1
  IF row < rows THEN IF maze(col, row + 1) = 0 THEN q = q + 1: directions(q) = 2
  IF col > 0 THEN IF maze(col - 1, row) = 0 THEN q = q + 1: directions(q) = 3
  IF q = 0 THEN GOSUB 565 ELSE GOSUB 580
  ' Add progress tracking
  'IF r MOD (totalCells / 10) = 0 THEN PRINT "Progress: "; (r / totalCells) * 100; "%"
WEND
maze(0, 0) = maze(0, 0) + 1
RETURN
'
' Find the next starting point
565 start = 1
WHILE start = 1 OR maze(col, row) = 0
  start = 0
  row = row + 1
  IF row > rows THEN row = 0: col = col + 1: IF col > cols THEN col = 0
WEND
RETURN
'
' Update the labyrinth
580 directionIndex = directions(INT(RND * q) + 1)
maze(col, row) = maze(col, row) + 2 ^ directionIndex
col = col + dx(directionIndex)
row = row + dy(directionIndex)
oppositeDirection = directionIndex - 2
IF oppositeDirection < 0 THEN oppositeDirection = oppositeDirection + 4
maze(col, row) = maze(col, row) + 2 ^ oppositeDirection
r = r + 1
RETURN
'
' Print textual maze
610 FOR row = 0 TO rows
  topPart$ = ""
  bottomPart$ = ""
  FOR col = 0 TO cols
    topPart$ = topPart$ + "#"
    IF maze(col, row) AND 1 THEN topPart$ = topPart$ + " " ELSE topPart$ = topPart$ + "#"
    IF maze(col, row) AND 8 THEN bottomPart$ = bottomPart$ + " " ELSE bottomPart$ = bottomPart$ + "#"
    bottomPart$ = bottomPart$ + " "
  NEXT
  PRINT topPart$ + "#"
  PRINT bottomPart$ + "#"
NEXT row
' Bottom border of the labyrinth
PRINT STRING$(cols * 2, "#") + "# #"
RETURN
'
`);

cpcBasic.addItem("", `
REM lifegame - Game of Life
maxlp=10
cols=30:rows=20:DIM grid(cols+1, rows):DIM newg(cols+1, rows):DIM mc(rows)
'
mode 1
GOSUB 700 'random
c1=5:r1=7:RESTORE 1210:GOSUB 800: 'blinker
c1=5:r1=r1+3:RESTORE 1210:GOSUB 800: 'blinker (distance 2)
c1=10:r1=5:RESTORE 1310:GOSUB 800: 'glider
'
lp=1:changed=1
WHILE lp<=maxlp AND changed<>0
  t=TIME+200
  CLS
  PRINT "L I F E G A M E"
  GOSUB 300 'output
  GOSUB 400 'compute
  GOSUB 500 'copy
  WHILE TIME<t:FRAME:WEND
  lp=lp+1
WEND
PRINT
PRINT "Stop after";lp;"generations"
IF changed=0 THEN PRINT " No change any more"
STOP
'
300 'output
FOR r=1 TO rows-1
  FOR c=1 TO mc(r)
    IF grid(c,r)=0 THEN PRINT " "; ELSE PRINT "*";
  NEXT c
  PRINT
NEXT r
RETURN
'
400 'compute
FOR r=1 TO rows-1
  mc1=0
  FOR c=1 TO cols
    nbs=grid(c-1,r-1)+grid(c-1,r)+grid(c-1,r+1)+grid(c,r-1)+grid(c,r+1)+grid(c+1,r-1)+grid(c+1,r)+grid(c+1,r+1)
    IF (nbs=3) or ((nbs=2) and (grid(c,r)=1)) THEN ng1=1 ELSE ng1=0
    '?? ne(i,j)=-(an=3 OR (al(i,j)=1 AND an=2))
    newg(c,r)=ng1
    IF ng1>0 THEN mc1=c
  NEXT c
  mc(r)=mc1
NEXT r
RETURN
'
' copy newg->grid
500 changed=0
FOR r=1 TO rows-1
  FOR c=1 TO cols
    IF grid(c,r)<>newg(c,r) THEN grid(c,r)=newg(c,r):changed=-1
  NEXT c
NEXT r
RETURN
'
'
' random
700 FOR w=1 TO 50
  c=INT(cols*RND(1)+1):r=INT(rows*RND(1)+1): grid(c,r)=1:IF c>mc(r) THEN mc(r)=c
NEXT w
'grid(4,5)=1:grid(5,5)=1:grid(6,5)=1
RETURN
'
' draw pattern at pos c1,r1
800 read n
FOR r=1 TO n
  READ pat$
  FOR c=1 TO LEN(pat$)
    IF MID$(pat$,c,1)="1" THEN grid(c1+c,r1+r)=1
  NEXT c
  IF (c1+LEN(pat$))>mc(r1+r) THEN mc(r1+r)=c1+LEN(pat$)
NEXT r
RETURN
'
'
' https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns
'
'1. Still lifes
' block
1110 DATA 2
DATA "11"
DATA "11"
'
' beevive
1120 DATA 3
DATA "0110"
DATA "1001"
DATA "0110"
'
' loaf
1130 DATA 4
DATA "0110"
DATA "1001"
DATA "0101"
DATA "0010"
'
' boat
1140 DATA 3
DATA "110"
DATA "101"
DATA "010"
'
' tub
1150 DATA 3
DATA "010"
DATA "101"
DATA "010"
'
'2. Oscillators
' blinker
1210 DATA 1
DATA "111"
'
' toad
1220 DATA 2
DATA "0111"
DATA "1110"
'
' beacon
1230 DATA 4
DATA "1100"
DATA "1100"
DATA "0011"
DATA "0011"
'...
'
'3. Spaceships
' glider (https://conwaylife.com/wiki/Glider)
1310 DATA 3
DATA "001"
DATA "101"
DATA "011"
'
'...
'
`);

cpcBasic.addItem("", `
REM manspri - Man Sprite
REM Sample from http://www.cpcwiki.eu/forum/programming/silly-programming-ideas-turning-text-into-graphics/msg33246/#msg33246
REM
MODE 2
FOR ind = 1 TO 20 STEP 2
  CLS
  indent$=SPACE$(ind)
  GOSUB 2000
  t=TIME+30:WHILE TIME<t:FRAME:WEND
NEXT
END
'
2000 'output
RESTORE 3000
FOR y=1 TO 22
  PRINT indent$;
  FOR x=1 TO 11
    READ p
    IF p>0 THEN ch$=CHR$(65+p) ELSE ch$=" "
    PRINT STRING$(4,ch$);
  NEXT x
  PRINT
NEXT y
RETURN
'
3000 DATA 0,4,4,4,4,4,4,0,0,0,0
DATA 0,4,4,4,4,4,4,4,4,4,0
DATA 0,4,4,4,4,4,4,9,4,4,0
DATA 4,4,4,4,4,4,4,9,4,4,0
DATA 4,4,4,4,4,4,9,9,9,4,4
DATA 4,4,4,4,1,0,9,0,1,4,4
DATA 4,9,4,9,1,0,9,0,1,4,4
DATA 0,9,4,9,1,0,9,0,1,4,4
DATA 0,9,9,9,1,0,9,0,1,4,0
DATA 0,4,9,9,1,1,9,1,9,9,0
DATA 0,4,9,9,9,1,9,1,9,9,0
DATA 0,4,9,9,9,9,9,9,9,9,0
DATA 0,7,4,9,9,9,0,9,9,9,0
DATA 7,7,7,9,9,9,9,9,9,8,0
DATA 7,7,7,8,7,7,7,8,7,8,0
DATA 7,7,9,8,7,7,7,8,9,9,0
DATA 7,9,9,9,8,8,8,8,9,9,0
DATA 0,9,9,8,6,1,6,1,8,9,0
DATA 0,8,8,8,8,6,6,6,6,8,0
DATA 0,8,8,8,8,8,8,8,8,8,8
DATA 0,4,6,6,6,0,6,6,6,6,4
DATA 0,4,4,4,4,0,4,4,4,4,4
'
`);

cpcBasic.addItem("", `
REM mandelbro - Mandelbrot Set
REM https://rosettacode.org/wiki/Mandelbrot_set#Locomotive_Basic
REM https://en.wikipedia.org/wiki/Mandelbrot_set
MODE 3 ' Note the CPCBasic-only screen mode!
t=TIME
FOR xp = 0 TO 639
FOR yp = 0 TO 399
x = 0 : y = 0
x0 = xp / 213 - 2 : y0 = yp / 200 - 1
iteration = 0
maxIteration = 100
WHILE (x * x + y * y <= (2 * 2) AND iteration < maxIteration)
xtemp = x * x - y * y + x0
y = 2 * x * y + y0
x = xtemp
iteration = iteration + 1
WEND
IF iteration <> maxIteration THEN c = iteration ELSE c = 0
PLOT xp, yp, c MOD 16
NEXT
NEXT
t=TIME-t
FRAME
PRINT ROUND(t*10/3,3)
'
`);

cpcBasic.addItem("", `
REM nicholas - House of St. Nicholas
REM with Characters using Bresenham's Line Algorithm
REM
MODE 2
GOSUB 5000 :'read cooordinates
'
DIM house$(25,80),smc(25): 'house will grow so we do not need to init smc
'
FOR sc=0.5 TO 1 STEP 0.1
GOSUB 1000 'init
GOSUB 2000 'draw
GOSUB 3000 'print
'
t=TIME+30:WHILE TIME<t:FRAME:WEND
NEXT
END
'
REM Initialize the grid with spaces
1000 FOR y = 1 TO 25
  FOR x = 1 TO 80
    house$(y, x) = " "
  NEXT x
NEXT y
RETURN
'
REM Draw the house
2000 i=0
x0=xp(i):y0=yp(i)
FOR i = 1 TO 18
  x1=xp(i):y1=yp(i)
  GOSUB 2500 'DrawLine x0, y0, x1, y1
  x0=x1
  y0=y1
NEXT i
RETURN
'
REM Bresenham's Line Algorithm
'SUB DrawLine(x0, y0, x1, y1)
2500 dx = ABS(x1 - x0)
  dy = ABS(y1 - y0)
  sx = SGN(x1 - x0)
  sy = SGN(y1 - y0)
  err1 = dx - dy
'
  WHILE x0 <> x1 OR y0 <> y1
    'house$(y0, x0) = "*"
    y0s=ROUND(y0*sc): x0s=ROUND(x0*sc)
    house$(y0s, x0s) = "*"
    IF x0s>smc(y0s) THEN smc(y0s)=x0s 
    e2 = 2 * err1
    IF e2 > -dy THEN err1 = err1 - dy: x0 = x0 + sx
    IF e2 < dx THEN err1 = err1 + dx: y0 = y0 + sy
  WEND
RETURN
'END SUB
'
REM Print the house
3000 CLS
FOR y = 1 TO 25
  FOR x = 1 TO smc(y)
    PRINT house$(y, x);
  NEXT x
  PRINT
NEXT y
RETURN
'
REM Define the house shape using coordinates
DATA 40,2 : 'move
DATA 40,13, 35,18, 35,24, 30,24, 30,20, 25,25, 15,13, 15,2
DATA 40,13, 15,13, 40,2, 15,2
DATA 10,2, 10,7, 15,9, 5,12, 10,9, 20,11
'
REM Read the coordinates
5000 DIM xp(18),yp(18) 
FOR i = 0 TO 18 STEP 1
  READ xp(i),yp(i)
  yp(i)=25+1-yp(i)
NEXT i
RETURN
'
`);

cpcBasic.addItem("", `
REM ninedig - Nine Digits Puzzle
'21.5.1988 Kopf um Kopf
'
'The riddle is a mathematical puzzle where you need to find distinct digits from 1 to 9 that satisfy the following conditions:
'ab * c = de  and  de + fg = hi
'The goal is to find the values of a, b, c, d, e, f, g, h, and i such that the above equations hold true and all digits are distinct.
'
CLS
PRINT "Nine Digits Puzzle"
PRINT "ab * c = de ; de + fg = hi"
PRINT "with a..i are distinct digits from 1 to 9"
PRINT
PRINT "Please wait ...  ( on a real CPC approx. 1 min 34 sec )"
PRINT
'
t=TIME
FOR a=1 TO 9
  FOR b=1 TO 9
    FOR c=1 TO 9
      FOR f=1 TO 9
        FOR g=1 TO 9
          cnd = -1
          de=(a*10+b)*c
          cnd = cnd AND NOT (de>99)
          hi=de+(f*10+g)
          cnd = cnd AND NOT (hi>99)
          d=INT(de/10):e=de MOD 10:h=INT(hi/10):i=hi MOD 10
          cnd = cnd AND NOT (a=b OR a=c OR a=d OR a=e OR a=f OR a=g OR a=h OR a=i)
          cnd = cnd AND NOT (b=c OR b=d OR b=e OR b=f OR b=g OR b=h OR b=i)
          cnd = cnd AND NOT (c=d OR c=e OR c=f OR c=g OR c=h OR c=i)
          cnd = cnd AND NOT (d=e OR d=f OR d=g OR d=h OR d=i)
          cnd = cnd AND NOT (e=f OR e=g OR e=h OR e=i)
          cnd = cnd AND NOT (f=g OR f=h OR f=i)
          cnd = cnd AND NOT (g=h OR g=i)
          cnd = cnd AND NOT (h=i)
          cnd = cnd AND NOT (i=0)
          IF cnd<>0 THEN GOSUB 350: STOP
        NEXT g
      NEXT f
    NEXT c
  NEXT b
NEXT a
PRINT "No solution found!"
STOP
'
350 t=TIME-t
PRINT "The solution (computed in";ROUND(t * 10 / 3, 3); "ms):"
PRINT
DEF FNnumStr$(x) = RIGHT$(STR$(x), LEN(STR$(x)) - 1)
PRINT "ab * c = de ; de + fg = hi"
PRINT FNnumStr$(a*10+b);" *";c;"=";de;";";de;"+";f*10+g;"=";hi
PRINT
IF (a*10+b)*c<>de OR de<>68 THEN PRINT "a,b,c,de not ok": ERROR 33
IF de+f*10+g<>hi OR hi<>93 THEN PRINT "f,g,hi not ok": ERROR 33
RETURN
'
'Here it is:
'https://brainly.in/question/16558729
'ab * c = de ; de + fg = hi. values will be from 1 to 9 and no digit should be repeated
'Oberservations:
'b , c can not be 1  or 5
' as  ab * 1 = ab => ab = de ( with same digits)
' a1 * c will end with c   a5 * c  will end with 5 or 0
' ab * 5 will end with 0 or 5   ( 0 not available , 5 will be repeated digit in c & i)
'...
'17 * 4 = 68   remaining digits 2 , 3 ,  5 , 9  (68 + 25 = 93) we got 1st Solution .
'
'or:
'https://mindyourdecisions.com/blog/2024/02/26/put-the-digits-1-to-9-in-boxes-puzzle/
'
`);

cpcBasic.addItem("", `
REM questions - Funny Questions and Answers
MODE 2
GOSUB 2000
PRINT "Funny Questions and Answers"
PRINT
PRINT "What do you do when..."
PRINT
DIM a(n)
GOSUB 1000 ' Shuffle the indices
'FOR i = 1 TO n: PRINT USING "##"; a(i);: PRINT " ";: NEXT: PRINT
'
FOR i = 1 TO n
  j = a(i)
  PRINT i;
  PRINT question$(i); "? -- ";
  PRINT answer$(j); "."
  PRINT
NEXT i
END
'
' Shuffle subroutine
1000 FOR i = 1 TO n
  J = INT(RND * I + 1) :'1 ≤ j ≤ i
  a(i) = i: 'a[i] ← source[i]: a[i] ← a[j]: a[j] ← source[i]
  a(i) = a(j)
  a(j) = i 
NEXT i
RETURN
'
' Read questions and answers
2000 READ n
DIM question$(n), answer$(n)
FOR i = 1 TO n
  READ question$(i), answer$(i)
NEXT i
READ endMarker$: IF endMarker$<>"end" THEN PRINT "Error in data: End not found": STOP
RETURN
'
DATA 75
DATA "You find a corpse", "Dig a grave"
DATA "You have a million in debt", "Hang myself"
DATA "A nuclear war breaks out", "Emigrate to Australia"
DATA "You're faced with doubt", "Decide on the right thing"
DATA "The police are after you", "Go underground"
DATA "You oversleep", "Faint"
DATA "You sink into a bog", "Scream as loud as I can"
DATA "You get visitors", "Flee"
DATA "Your bed collapses", "Keep sleeping"
DATA "You feel sad", "Start crying"
DATA "A horse kicks you", "Start singing"
DATA "You hear a joke", "Laugh myself to pieces"
DATA "You don't have time", "Take my time"
DATA "It rains", "Get my umbrella"
DATA "You're thirsty", "Get drunk"
DATA "You're imprisoned", "Free myself from all evil"
DATA "Your God abandons you", "Become a pastor"
DATA "The devil wants to take you", "Endure it all"
DATA "You miss the bus", "Ride my bike"
'
DATA "You get lost in a forest", "Climb the tallest tree"
DATA "Your computer crashes", "Meditate for wisdom"
DATA "You meet an alien", "Offer it a coffee"
DATA "You're attacked by zombies", "Teach them to dance"
DATA "You win the lottery", "Start a llama farm"
DATA "Your phone battery dies", "Write letters by hand"
DATA "Your car breaks down", "Push it to the nearest bakery"
DATA "You spill coffee on your shirt", "Call it a new trend"
DATA "You forget someone's name", "Call everyone 'friend'"
DATA "A lion escapes from the zoo", "Challenge it to a staring contest"
DATA "Your neighbor throws a loud party", "Join with a karaoke machine"
DATA "A time traveler visits you", "Ask for next week's lottery numbers"
DATA "Your houseplants start talking", "Ask for gardening advice"
DATA "You lose your wallet", "Check the fridge"
DATA "A robot malfunctions in your house", "Teach it how to bake cookies"
DATA "You drop your ice cream", "Turn it into abstract art"
DATA "A ghost appears in your room", "Play cards with it"
DATA "Your favorite show gets canceled", "Write your own episodes"
DATA "You run out of toothpaste", "Use peanut butter instead"
DATA "A penguin knocks on your door", "Offer it a warm scarf"
DATA "You step on a Lego", "Build a castle with the rest"
DATA "Your umbrella blows away", "Turn it into a kite"
DATA "You wake up as a cat", "Take a nap immediately"
DATA "You find a secret tunnel", "Throw a surprise party in it"
DATA "Your shadow starts moving on its own", "Start a dance duet"
DATA "A dragon lands in your backyard", "Teach it to barbecue"
'
DATA "You discover a hidden treasure chest", "Donate it to a squirrel"
DATA "A talking dog approaches you", "Ask it for stock market advice"
DATA "You wake up invisible", "Start a street mime act"
DATA "Your dinner burns", "Serve it as 'charcoal cuisine'"
DATA "Your mirror breaks", "Compliment your reflection anyway"
DATA "You find a magic lamp", "Wish for infinite socks"
DATA "Your shoes disappear", "Walk on your hands"
DATA "The sun stops shining", "Start a flashlight collection"
DATA "Your favorite food is banned", "Smuggle it in like a spy"
DATA "Your alarm clock doesn't go off", "Blame time itself"
DATA "You grow wings overnight", "Start delivering pizzas"
DATA "You shrink to the size of an ant", "Build a leaf canoe"
DATA "You accidentally clone yourself", "Send your clone to work"
DATA "Your refrigerator starts talking", "Negotiate over who eats the last slice of cake"
DATA "A giant spider knocks on your window", "Teach it to knit webs"
DATA "You lose all your clothes in the wind", "Wrap yourself in newspapers"
DATA "Your toaster starts launching bread", "Call it breakfast artillery"
DATA "Your house floats into the sky", "Use it to spot new coffee shops"
DATA "A vampire invites you to dinner", "Bring garlic as a side dish"
DATA "You find a door to another dimension", "Open a tourist agency for it"
DATA "Your goldfish grows ten times its size", "Ride it to work"
DATA "The moon falls out of the sky", "Use it as a disco ball"
DATA "You’re cursed to always speak in rhyme", "Become a professional poet"
DATA "You gain the ability to control weather", "Use it to schedule picnics"
DATA "You’re transported to the Middle Ages", "Open a fast-food chain"
DATA "Your car turns into a pumpkin", "Start a pumpkin pie business"
DATA "You find out gravity doesn’t affect you", "Take up juggling for fun"
DATA "You’re suddenly fluent in every language", "Argue with birds"
DATA "A genie gives you one wish", "Wish for unlimited bubble wrap"
DATA "You get trapped in a video game", "Make it a speedrun"
DATA "end"
'
`);

cpcBasic.addItem("", `
REM rectangl - Rectangles Test
REM Marco Vieth, 2019
FOR m=0 TO 3
t0=TIME
GOSUB 290
FRAME:t=t0+300:WHILE TIME<t:FRAME:WEND
NEXT
END
'
290 'draw rectangle
MODE m
xd=2^(2-MIN(m,2)):yd=((m=3)+2)
cols=80/xd:rows=50/yd
'window (9-(m=0))/80*cols,cols-8/80*cols,rows/5.4,rows-rows/6
pens=4^(2-m MOD 3)+ABS(m=2)
PRINT "Mode: ";m
PRINT "Cols:";cols
PRINT "Rows:";rows
PRINT "Res.:";cols*8;"x";STR$(rows*8)
PRINT "Pens:";pens
PRINT
FOR i=0 TO 48 STEP 2
GRAPHICS PEN ROUND(((i + 1) / 2)) MOD 16
MOVE 0+i,0+i
DRAW 639-i,0+i
DRAW 639-i,399-i
DRAW 0+i,399-i
DRAW 0+i,0+i
NEXT i
RETURN
'
`);

cpcBasic.addItem("", `
REM sandpile - Abelian sandpile model
REM https://rosettacode.org/wiki/Abelian_sandpile_model#Locomotive_Basic
REM modified for ASCII output
REM
mode 1: 'defint a-z
for rows = 5 to 25 step 5
cols = rows
height=4*cols*rows + rows
t0=time
dim grid(cols,rows)
gosub 200 'calculate
t=time-t0
cls
gosub 600 'textual output
PRINT "height";height;", cols=";cols;", rows=";rows;", time=";round(t*10/3,3)
gosub 700 'graphical output
frame:t=t0+300:while time<t:frame:wend
next rows
end
'
' calculate
200 grid(round(cols/2),round(rows/2))=height
moretodo=1
while moretodo
moretodo=0
for x=1 to cols
for y=1 to rows
if grid(x,y)>=4 then moretodo=1: gosub 500
next:next
wend
return
'
' cell overspill
500 overspill=int(grid(x,y)/4)
grid(x,y)=grid(x,y) mod 4
if x>1 then grid(x-1,y)=grid(x-1,y)+overspill
if y>1 then grid(x,y-1)=grid(x,y-1)+overspill
if x<cols then grid(x+1,y)=grid(x+1,y)+overspill
if y<rows then grid(x,y+1)=grid(x,y+1)+overspill
return
'
' textual output
600 for y=1 to rows
for x=1 to cols
pen grid(x,y)
PRINT CHR$(48+grid(x,y));
next
print
next
PEN 1
return
'
' graphical output
700 for y=1 to rows
for x=1 to cols
x4=x*4:y4=y*4
graphics pen grid(x,y)
plot x4,y4
plot x4+2,y4
plot x4,y4+2
plot x4+2,y4+2
next:next
return
'
`);

cpcBasic.addItem("", `
100 REM seconds - Seconds Test
110 REM Marco Vieth, 2019
115 CLS
116 loops=2
120 PRINT "Timing 1 (FRAME):"
125 FOR cnt=1 TO loops
130   t1=TIME
140   FOR i=1 TO 50:FRAME:NEXT
150   t1=TIME-t1
160   PRINT INT(1000*t1/300)/1000
170 NEXT
190 '
200 PRINT "Timing 2 (check time):"
210 FOR cnt=1 TO loops
220   t1=TIME
230   civ=50:ct=TIME+civ*6:WHILE TIME<ct:FRAME:WEND
240   t1=TIME-t1
250   PRINT INT(1000*t1/300)/1000
260 NEXT
270 '
300 'print"Timing 3 (after)"
310 END
320 '
`);

cpcBasic.addItem("", `
REM scrollit - Scrolling text
REM
MODE 1
width1=40
steps=60
a$="This is a very simple scrolling text for the CPC..."
a=LEN(a$)
a$=a$+a$
FOR i=1 TO steps
  CLS
  PRINT:PRINT MID$(a$,(i MOD a)+1,width1)
  t=TIME+20:WHILE TIME<t:FRAME:WEND
NEXT i
END
'
`);

cpcBasic.addItem("", `
  REM sierpin - Sierpinski triangle
  REM see also: https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle
  DEG
  MODE 2
  DIM cx(5),cy(5),r(5),lc(5),s$(80,25),smc(25)
  cx(1)=320*80/640:cy(1)=140*25/400
  r(1)=75:r(2)=40:r(3)=20:r(4)=12:r(5)=8
  '
  sa=120
  st=1
  GOSUB 800: 'init
  GOSUB 1000: 'compute
  GOSUB 2000: 'output
  END
  '
  ' Initialize output array
  800 FOR r1=1 TO 25
    FOR c1=1 TO 79
      s$(c1,r1)=" "
    NEXT
  NEXT
  RETURN
  '
  ' Compute
  1000 cx1=ROUND(cx(st))
  cy1=ROUND((25-cy(st)))
  'lc(st)=0
  s$(cx1,cy1)=chr$(48+st)
  IF cx1>smc(cy1) THEN smc(cy1)=cx1 'update max column
  IF st<5 THEN GOSUB 2000:FRAME: 'intermediate output
  IF st=5 THEN RETURN
  lc(st)=0
  start=1
  WHILE (lc(st) MOD 360)<>0 OR start=1
    start=0
    cx(st+1)=cx(st)+1.7*80/640*r(st)*SIN(sa+lc(st))
    cy(st+1)=cy(st)+1.7*25/400*r(st)*COS(sa+lc(st))
    st=st+1
    GOSUB 1000 'recursive call
    st=st-1
    lc(st)=lc(st)+2*sa
  WEND
  RETURN
  '
  ' Output
  2000 CLS
  FOR r1=1 TO 25
    FOR c1=1 TO smc(r1)
      PRINT s$(c1,r1);
    NEXT
    PRINT
  NEXT
  RETURN
  '
`);

cpcBasic.addItem("", `
REM sievebe - Sieve Benchmark
MODE 2
n=5000
PRINT "Sieve Benchmark"
PRINT "Number of primes below n=";n
ndiv2=INT(n/2)
'
loops=10
minms=100
PRINT "Testing loops:";
t=0
WHILE t<minms
  loops=loops*10
  FRAME
  PRINT loops;
  GOSUB 500
WEND
PRINT
'
maxtput=0
tput=maxtput+1
maxruns=8
r=1
FRAME
WHILE r<=maxruns AND tput>maxtput
  GOSUB 500
  tput=loops/(t/1000)
  PRINT "n=";n;", primes=";x;", loops=";loops;", time=";DEC$(t,"####.###");" ms , loops/sec=";DEC$(tput,"######.###")
  IF tput>maxtput THEN maxtput=tput:tput=maxtput+1
  r=r+1
WEND
PRINT "maximum thoughput=";DEC$(maxtput,"######.###")
END
'
' measurement
500 t=TIME:FOR l=1 TO loops:DIM s(ndiv2+1):GOSUB 1000:ERASE s:NEXT:t=(TIME-t)*10/3
RETURN
'
' compute primes (using Sieve of Eratosthenes and a 2-wheel)
1000 i=0:m=3:x=1:WHILE m*m<=n:IF s(i)=0 THEN x=x+1:j=(m*m-3)\\2:WHILE j<ndiv2:s(j)=1:j=j+m:WEND
i=i+1:m=m+2:WEND:WHILE m<=n:IF s(i)=0 THEN x=x+1
i=i+1:m=m+2:WEND
RETURN
'
'1200 i=0:m=3:x=1
'WHILE m*m<=n
'IF s(i)=0 THEN x=x+1: j=(m*m-3)\\2: WHILE j<ndiv2: s(j)=1: j=j+m: WEND
'i=i+1:m=m+2
'WEND
'WHILE m<=n
'IF s(i)=0 THEN x=x+1
'i=i+1:m=m+2
'WEND
'RETURN
'
`);

cpcBasic.addItem("", `
REM striart - String Art (just draw)
MODE 2
DEG
r=180:'radius
s=360/p:'step size
DEF FNx(i)=SIN(s*i)*r+320:DEF FNy(i)=COS(s*i)*r+200
'
'p=48:d=15:a=0
READ p,d,a
WHILE p>=0
  t=TIME+300
  GOSUB 980
  WHILE TIME<t:FRAME:WEND
  READ p,d,a
WEND
END
'
REM draw
980 CLS
s=360/p:'step size
FOR i=0 TO p-1:PLOT FNx(i),FNy(i):NEXT
d0=d
FOR i=0 TO p-1
MOVE FNx(i),FNy(i):DRAW FNx(i+d0),FNy(i+d0):d0=d0+a
NEXT
RETURN
'
DATA 48,15,0:  'ring, stop at drop
DATA 48,15,1:  'rounded heart
DATA 48,15,-1: 'Fan, Rays
DATA 48,15,-2: 'Diagonally hatched
DATA 48,15,-3: 'diagonal "triangulated"
DATA 48,15,-4: 'Diagonally irregular "checkered"
DATA 48,15,-10: 'skeins with thin stripes
DATA -1,-1,-1: '"end"
'
`);

cpcBasic.addItem("", `
10 REM testinpu - Test Input
20 CLS
30 PRINT "Name"
40 INPUT n$
50 PRINT "Name is: ";n$
60 STOP
`);

cpcBasic.addItem("", `
REM testkey - Test keyboard keys
CLS
PRINT "Press some keys..."
WHILE 1
t$="":WHILE t$="":t$=INKEY$:WEND
PRINT t$;ASC(t$);
WEND
STOP
`);

cpcBasic.addItem("", `
REM testsub - Test Subroutines
CLS
PRINT "start"
GOSUB 350
PRINT "end"
END
'
100 PRINT "sub100"
RETURN
'
200 PRINT "sub200"
  PRINT "inside sub200"
  GOSUB 100
RETURN
'
GOSUB 200
PRINT "in between"
'
300 PRINT "sub300"
  PRINT "inside sub300"
  'PRINT "\\x1b[6A\\x1b[D"; 'cursor up and back
  'PRINT "Hi -";
  'PRINT "\\x1b[31m Hello World (red)\\x1b[39m";
  'PRINT "\\x1b[5;15H";"locate 15,5"
  'PRINT "\\x1b[4;17H";"locate 17,4"
  ''gosub 400
RETURN
'
350 'main
GOSUB 100
GOSUB 200
GOSUB 300
a=1
ON a GOSUB 200, 300
RETURN
'
`);

cpcBasic.addItem("", `
REM testpage - Test Page
MODE 2
CLS
PRINT "Test Page"
'
PRINT "Numbers: ";
a=1
a=1.2
a=-1.2
a=+7.2
a=&0
a=&A7
a=-&A7
a=&7FFF
a=&8000
a=&FFFF
a=&E123
a=&X0
a=&X10100111
a=-&X111111111111111
a=255
a=-255
a=256
a=-256
a=32767
a=-32767
a=32768
a=-32768
a=65536
a=1.2E+9
a=-1.2E-3: IF a<>-0.0012 THEN ERROR 33
''a=&x2
a=1: IF a<>1 THEN ERROR 33
a=1.2: IF a<>1.2 THEN ERROR 33
a=-1.2: IF a<>-1.2 THEN ERROR 33
a=1200: IF a<>1200 THEN ERROR 33
a=-7.2: IF a<>-7.2 THEN ERROR 33
a=ROUND(-7.2): IF a<>-7 THEN ERROR 33
a=+7.2: IF a<>7.2 THEN ERROR 33
a=0.2: IF a<>0.2 THEN ERROR 33
a=2: IF a<>2 THEN ERROR 33
a=10000: IF a<>10000 THEN ERROR 33
a=0.0001: IF a<>0.0001 THEN ERROR 33
a=1E+09-1: IF a<>1E+09-1 OR a<>999999999 THEN ERROR 33
'
PRINT "hex(&), ";
a=&A7: IF a<>167 THEN ERROR 33
a=-&A7: IF a<>-167 THEN ERROR 33
a=&7FFF: IF a<>32767 THEN ERROR 33
'
PRINT "bin(&x)"
a=&0: IF a<>0 THEN ERROR 33
a=&X10100111: IF a<>167 THEN ERROR 33
a=&X111111111111111: IF a<>32767 THEN ERROR 33
a=-&X111111111111111: IF a<>-32767 THEN ERROR 33
'
PRINT "Strings"
a$="a12": IF a$<>"a12" THEN ERROR 33
a$="7.1": IF a$<>"7.1" THEN ERROR 33
''a$="\\"
'
PRINT "Variables: types: $, ";
a=1.4: IF a<>1.4 THEN ERROR 33
a$="1.4": IF a$<>"1.4" THEN ERROR 33
''a!=1.4
''a%=1.4
a$="1.4"
case=1: IF case<>1 THEN ERROR 33
cASE=2: IF cASE<>2 OR case<>2 OR cAsE<>2 THEN ERROR 33
cAsE=case
''CaSe=cAsE
next1=2: IF next1<>2 THEN ERROR 33
'
''insert.line=2
''in.ser.t.lin.e=2
''a!(2)=1.4
''a%(2)=1.4
''1 a$=a%
''1 a$=a!
''1 abc=def
'newline=7
'
PRINT "Arrays"
DIM a(2), a$(2)
a(2)=1.4:IF a(2)<>1.4 THEN ERROR 33
a(2)=1.5:IF a(2)<>1.5 THEN ERROR 33
a$(2)="1.4":IF a$(2)<>"1.4" THEN ERROR 33
ERASE a,a$
DIM a$(2):a$(2)="1.4"
''a$[2]="1.4"
ERASE a$
DIM a(9),b(1,2):a(9)=b(1,2)
ERASE a,b
''a[9]=b[1,2]
DIM a(10,10,10),b(10,9):a(10,10,10)=b(10,9)
ERASE a,b
DIM a(2),b(2,2,1)
b(2,2,1)=4:a(ROUND(1.4))=b(ROUND(1.5),ROUND(2.4),1): IF a(1)<>4 THEN ERROR 33
i=1:b(1,2,1)=5:a(i+1)=b(i,i*2,ROUND(i-0.5)): IF a(i+1)<>5 THEN ERROR 33
i=1:b(1,2,0)=6:a(i-1)=b(INT(i),i*2,(i-1+&C) MOD 2): IF a(i-1)<>6 THEN ERROR 33
ERASE a,b
'
PRINT "Expressions, Operators +-*..."
a=1+2+3: IF a<>6 THEN ERROR 33
a=3-2-1: IF a<>0 THEN ERROR 33
a=&A7+&X10100111-(123-27): IF a<>238 THEN ERROR 33
a=(3+2)*(3-7): IF a<>-20 THEN ERROR 33
a=-(10-7)-(-6-2): IF a<>5 THEN ERROR 33
a=20/2.5: IF a<>8 THEN ERROR 33
a=20\\3: IF a<>6 THEN ERROR 33
a=3^2: IF a<>9 THEN ERROR 33
a=&X1001 AND &X1110: IF a<>8 THEN ERROR 33
a=&X1001 OR &X110: IF a<>15 THEN ERROR 33
a=&X1001 XOR &X1010: IF a<>3 THEN ERROR 33
a=NOT &X1001: IF a<>-10 THEN ERROR 33
a=+-9:IF a<>-9 THEN ERROR 33
a=(1=0):IF a<>0 THEN ERROR 33
a=(1>0)*(0<1):IF a<>1 THEN ERROR 33
a=1=1=-1:IF a<>-1 THEN ERROR 33
''a=+++++++++---9
a=(1=0)
a=(1>0)*(0<1)
a=(b>=c)*(d<=i)
a=1=1=-1
a=1>=1>1
a=(29+1) MOD 10=0 AND 5=7 :' num num
a=(29+1) MOD 10=9 AND "5"+"6"="56" :' num str
a="5"+"6"="56" AND (29+1) MOD 10=9 :' str num
a="5"+"6"="56" AND SPACE$(1)=" " :' str str
a=(29+1) MOD 10=0 OR 5=7 :' num num
a=(29+1) MOD 10=9 OR "5"+"6"="56" :' num str
a="5"+"6"="56" OR (29+1) MOD 10=9 :' str num
a="5"+"6"="56" OR SPACE$(1)=" " :' str str
a=a$<>"a2" OR b$<>"2"
a=a<>2 OR b<>2 OR b$<>"5"
'
' Line numbers
''0 c=1
''65535 c=1
''65536 c=1
''2 c=1
''1 c=1
'
' abs, after gosub, and, asc, atn, auto
'
PRINT "ABS, ";
a=ABS(+67.98):IF a<>67.98 THEN ERROR 33
a=ABS(-67.98):IF a<>67.98 THEN ERROR 33
a=ABS(0):IF a<>0 THEN ERROR 33
a=ABS(2.3)
''10 after 2 gosub 10010
''10 after 3,1 gosub 10010
''1 after gosub 10010
''1 after 1,2,3 gosub 10010
'
PRINT "AND (and OR), ";
a=4 OR 7 AND 2:IF a<>6 THEN ERROR 33
a=b AND c
'
PRINT "ASC, ";
a=ASC("a"):IF a<>97 THEN ERROR 33
a=ASC("ab"):IF a<>97 THEN ERROR 33
a=ASC("A")
b$="B":a=ASC(b$) AND c
'
PRINT "ATN; ";
a=ATN(0):IF a<>0 THEN ERROR 33
a=INT(ATN(1)*100000000)/100000000:IF a<>0.78539816 THEN ERROR 33
a=ATN(2.3)
DEG
a=ATN(0):IF a<>0 THEN ERROR 33
a=ATN(1):IF ROUND(a,7)<>45 THEN ERROR 33
RAD
'
''auto
''auto 100
'
' bin$, border
'
PRINT "BIN$, ";
a$=BIN$(3)
a$=BIN$(3,8)
a$=BIN$(&X1001)
b$=BIN$(0):IF b$<>"0" THEN ERROR 33
b$=BIN$(255):IF b$<>"11111111" THEN ERROR 33
b$=BIN$(255,10):IF b$<>"0011111111" THEN ERROR 33
b$=BIN$(170,6):IF b$<>"10101010" THEN ERROR 33
b$=BIN$(32767,16):IF b$<>"0111111111111111" THEN ERROR 33
b$=BIN$(65535):IF b$<>"1111111111111111" THEN ERROR 33
'
''border 5
''border 5,a
' call, cat, chain, chain merge, chr$, cint, clg, closein, closeout, cls, cont, copychr$, cos, creal, cursor
''call&a7bc
''call 4711,1,2,3,4
''cat
''chain"f1"
''chain"f2" , 10
''chain"f3" , 10+3
''chain "f4" , 10+3, delete 100-200
''chain "f5" , , delete 100-200
''chain merge "f1"
''chain merge "f2" , 10
''chain merge "f3" , 10+3
''chain merge "f4" , 10+3, delete 100-200
''chain merge "f5" , , delete 100-200
'
PRINT "CHR$, ";
a$=CHR$(65): IF a$<>"A" THEN ERROR 33
'
PRINT "CINT, ";
a=CINT(2.3): IF a<>2 THEN ERROR 33
'
''clear
''clear input
''clg
''clg 15-1
''closein
''closeout
''cls 'tested on top
''cls #5
''cls #a+7-2*b
''cont
''a$=copychr$(#0)
''a$=copychr$(#a+1)
'
PRINT "COS, ";
a=COS(0): IF a<>1 THEN ERROR 33
a=COS(PI): IF ROUND(a,7)<>-1 THEN ERROR 33
a=COS(2.3)
DEG
a=COS(180): IF ROUND(a,7)<>-1 THEN ERROR 33
a=COS(180+360): IF ROUND(a,7)<>-1 THEN ERROR 33
a=COS(0): IF a<>1 THEN ERROR 33
RAD
'
''a=creal(2.3+a)
''cursor
''cursor 0
''cursor 1
''cursor 1,1
''cursor ,1
''cursor #2
''cursor #2,1
''cursor #2,1,1
''cursor #2,,1
'
PRINT "DATA (and READ)"
' data, dec$, def fn, defint, defreal, defstr, deg, delete, derr, di, dim, draw, drawr
''data
''data ,
''data data 1,2,3
DATA "item1"," item2","item3 "
READ a$:IF a$<>"item1" THEN ERROR 33
READ a$:IF a$<>" item2" THEN ERROR 33
READ a$:IF a$<>"item3 " THEN ERROR 33
''data item1,item2,item3
DATA &a3,&x001,4,-7,"abc"
READ a,b:IF a<>&A3 THEN ERROR 33
IF b<>&X001 THEN ERROR 33
READ a,b:IF a<>4 THEN ERROR 33
IF b<>-7 THEN ERROR 33
READ a$:IF a$<>"abc" THEN ERROR 33
DATA " ","#$%&'()*+,"
READ a$:IF a$<>" " THEN ERROR 33
READ a$:IF a$<>"#$%&'()*+," THEN ERROR 33
''data "string in data with ... newline"
DATA &a7, &x10100111
READ a:IF a<>&A7 THEN ERROR 33
READ a:IF a<>&A7 THEN ERROR 33
'
PRINT "DEC$, ";
a$=DEC$(0,"##.##"): IF a$<>" 0.00" THEN ERROR 33
a$=DEC$(-1.2,"##.##"): IF a$<>"-1.20" THEN ERROR 33
''a$=DEC$(1.005,"##.##"): IF a$<>" 1.01" THEN ERROR 33
a$=DEC$(3,"###.##"): IF a$<>"  3.00" THEN ERROR 33
a$=DEC$(2.9949,"#.##"): IF a$<>"2.99" THEN ERROR 33
''a$=DEC$(8.575,"##.##"): IF a$<>" 8.58" THEN ERROR 33
a$=DEC$(8.595,"##.##"): IF a$<>" 8.60" THEN ERROR 33
''a$=DEC$(15.355,"#.##"): IF a$<>"15.36" THEN ERROR 33
'
PRINT "DEF FN (and FN), ";
DEF FNclk=10
DEF FNclk(a)=a*10
DEF FNclk(a,b)=a*10+b
DEF FNclk$(a$,b$)=a$+b$
''def fn clk=10
''def fn clk(a)=a*10
''def fn clk(a,b)=a*10+b
''def fn clk$(a$,b$)=a$+b$
''def fncls=1
''def fncls1(x+1)=1
''def fx=1
''def fx y=1
DEF FNf1(b)=b*b
a=FNf1(2.5):IF a<>6.25 THEN ERROR 33
''a=FN f1(2.5):IF a<>6.25 THEN ERROR 33
DEF FN f1$(b$)=b$+b$
a$=FNf1$("a"):IF a$<>"aa" THEN ERROR 33
''a$=FN f1$("a"):IF a$<>"aa" THEN ERROR 33
DEF FNf2=2.5*2.5
a=FNf2:IF a<>6.25 THEN ERROR 33
''a=FNf2(): 'this should not work
DEF FNf1(a,b,c)=a+b+c
a=FNf1(1,2,3):IF a<>6 THEN ERROR 33
DEF FNf1$(num)=MID$(STR$(num),2): DEF FNf2$(zl,cnt)=STRING$(cnt-LEN(FNf1$(zl)),"0")+FNf1$(zl)
a=67: a$=FNf2$(a, 4): IF a$<>"0067" THEN ERROR 33
'
''defint a
''defint a-t
''defint a-T
''defint a,b,c
''defint a,b-c,v,x-y
''defint a:b=a+c
''defint a:a=a+1
''defint a:a!=a!+a%:a$="7"
''defint a:ab=ab+de[7]
''1 defint z-a
''defreal a
''defreal a-t
''defreal a-T
''defreal a,b,c
''defreal a,b-c,v,x-y
''defreal a:b=a+c
''defreal a:a=a+1
''defreal a:a!=a!+a%:a$="7"
''defreal a:ab=ab+de[7]
''1 defreal z-a
''defstr a
''defstr a-t
''defstr a-T
''defstr a,b,c
''defstr a,b-c,v,x-y
''defstr a:b=a+c
''defstr a:a=a+1
''defstr a:a!=a!+a%:a$="7"
''defstr a:ab=ab+de[7]
''1 defstr z-a
''defstr f:f(x)="w"
''deg
''delete
''delete -
''delete ,
''delete -,
''delete 10
''delete 1-
''delete -1
''delete 1-2
''1 delete 2-1
''1 delete 1+2
''1 delete a
''a=derr
''di
'
PRINT "DIM, ";
DIM a(1)
''dim a!(1)
''dim a%(1)
ERASE a
DIM a$(1)
DIM b(2,13)
ERASE a$,b
i=1:DIM a(2,13+7),b$(3),c(2*i,7)
ERASE a,b$,c
''dim a[2,13)
''DIM a(4):FOR i=0 TO 4:a(i)=i:NEXT
''a=0:FOR i=0 TO 4:a=a+a(i):NEXT:IF a<>10 THEN ERROR 33
DIM a(4):FOR i=0 TO 4:a(i)=i:NEXT
b=0:FOR i=0 TO 4:b=b+a(i):NEXT:IF b<>10 THEN ERROR 33
ERASE a
'
''draw 10,20
''draw -10,-20,7
''draw 10,20,7,3
''draw 10,20,,3
''draw x,y,m,g1
''drawr 10,20
''drawr -10,-20,7
''drawr 10,20,7,3
''drawr 10,20,,3
''drawr x,y,m,g1
' edit, ei, else, end, ent, env, eof, erase, erl, err, error, every gosub, exp
''edit 20
''ei
''else
''else 10
''else a=7
' see below: end
''ent 1
''ent 1,2,a,4
''ent num,steps,dist,ti,steps2,dist2,ti2
''ent num,=period,ti,=period2,ti2
''env 1
''env 1,2,a,4
''env num,steps,dist,ti,steps2,dist2,ti2
''env num,=reg,period,=reg2,period2
''a=eof
'
PRINT "ERASE, ";
DIM a(1):ERASE a
DIM a$(1):ERASE a$
DIM a(1),a$(1):ERASE a,a$
''1 erase 5
'
''a=erl
''a=err
''error 7
''error 5+a
''10 every 50 gosub 10010
''10 every 25.2,1 gosub 10010
''10 every 10+a,b gosub 10010
'
PRINT "EXP, ";
a=EXP(0): IF a<>1 THEN ERROR 33
a=EXP(2.3): IF ROUND(a,5)<>9.97418 THEN ERROR 33
'
' fill, fix, fn, for, frame, fre
''fill 7
'
PRINT "FIX, ";
a=FIX(0): IF a<>0 THEN ERROR 33
a=FIX(2.77): IF a<>2 THEN ERROR 33
a=FIX(-2.3): IF a<>-2 THEN ERROR 33
a=FIX(123.466): IF a<>123 THEN ERROR 33
'
PRINT "FN, ";
DEF FNclk=1: c=FNclk
DEF FNclk(a)=a: c=FNclk(a)
DEF FNclk(a,b)=a+b: c=FNclk(a,b)
DEF FNclk$(a$,b$)=a$+b$: c$=FNclk$(a$,b$)
''c=fn clk
''c=fn clk(a)
''c=fn clk(a,b)
''c$=fn clk$(a$,b$)
'
PRINT "FOR, ";
FOR a=1 TO 10:NEXT
''for a%=1.5 to 9.5: next
''for a!=1.5 to 9.5: next
FOR a=1 TO 10 STEP 3:NEXT
b=1:FOR a=5+b TO -4 STEP -2.3:NEXT
b=1:c=5:d=2:FOR a=b TO c STEP d:NEXT
b=1:c=3:FOR a=b TO c:NEXT
FOR a=1 TO 1 STEP 0+1:NEXT
b=1:c=3:i=1:FOR a=b TO c STEP i:NEXT
FOR a=1 TO 2 STEP 0+1:NEXT
FOR a=-1 TO -2 STEP 0-1:NEXT
FOR a=&A000 TO &A00B STEP &X101:NEXT
FOR a=2 TO 1 STEP -&1:NEXT
FOR a=2 TO 1 STEP -&X1:NEXT
''1 for a$=1 to 2: next
FOR next1=1 TO 10 STEP 3:NEXT next1
''for a=b to c step s:a=0:next
'
PRINT "FRAME, ";
FRAME
'
''a=fre(0)
''a=fre("")
''a=fre(b-2)
''a=fre(a$)
' gosub, goto, graphics paper, graphics pen
'
PRINT "GOSUB, ";
GOSUB 10010
''1 gosub a
'
''10 goto 10010
''1 goto a
''graphics paper 5
''graphics paper 2.3*a
''graphics pen 5
''graphics pen 5,1
''graphics pen ,0
''graphics pen 2.3*a,1+b
' hex$, himem
'
PRINT "HEX$"
a$=HEX$(0): IF a$<>"0" THEN ERROR 33
a$=HEX$(16,4): IF a$<>"0010" THEN ERROR 33
a$=HEX$(255): IF a$<>"FF" THEN ERROR 33
a$=HEX$(255,10): IF a$<>"00000000FF" THEN ERROR 33
a$=HEX$(256): IF a$<>"100" THEN ERROR 33
a$=HEX$(32767,16): IF a$<>"0000000000007FFF" THEN ERROR 33
a$=HEX$(65535): IF a$<>"FFFF" THEN ERROR 33
a$=HEX$(a,b)
'
''a=himem
' if, ink, inkey, inkey$, inp, input, instr, int
'
PRINT "IF, ";
IF a=1 THEN a=2
IF a=1 THEN a=2 ELSE a=1
''if a=1 then
''if a=1 then else
''if a=1 then a=2 else
''if a=1 then else a=1
''if a=1 then if b=1 then else else a=1
IF a=1 THEN IF b=1 THEN a=2 ELSE a=3 ELSE b=2
''10 if a=1 then goto 10010
''10 if a=1 then 10010
''10 if a=1 goto 10010
''10 if a=1 then a=a+1:goto 10
IF a=1 THEN GOSUB 10010
''10 if a=1 then 10:a=never1
''10 if a=1 then 10 else 20 '20 rem
''10 if a=1 then 10 else goto 20 '20 rem
''10 if a=b+5*c then a=a+1: goto 10 else a=a-1:goto 20
a=0: b=0: c=0: IF a=b+5*c THEN a=a+1:GOSUB 10010 ELSE a=a-1:GOSUB 10020
IF a<>3 THEN GOSUB 10010
IF a$<>"3" THEN GOSUB 10010
'
''ink 2,19
''ink 2,19,22
''ink a*2,b-1,c
''a=inkey(0)
a$=INKEY$
''a=inp(&ff77)
''input a$
''input a$,b
''input ;a$,b
''input "para",a$,b
''input "para";a$,b
''input ;"para noCRLF";a$,b
''input#2,;"para noCRLF";a$,b
''input#stream,;"string";a$,b
'
PRINT "INSTR, ";
''a=INSTR("", ""): IF a<>0 THEN ERROR 33
a=INSTR("key","ey"): IF a<>2 THEN ERROR 33
a$="key": b$="y": a=INSTR(a$,b$): IF a<>3 THEN ERROR 33
''a=instr(start,a$,b$)
a=INSTR("Amstrad", "m"): IF a<>2 THEN ERROR 33
a=INSTR("Amstrad", "sr"): IF a<>0 THEN ERROR 33
a=INSTR(6,"amstrad", "a"): IF a<>6 THEN ERROR 33
''a=INSTR("", ""): IF a<>0 THEN ERROR 33
''a=INSTR(1, "", ""): IF a<>0 THEN ERROR 33
''a=INSTR(1, "ab", ""): IF a<>1 THEN ERROR 33
'
PRINT "INT, ";
a=INT(0): IF a<>0 THEN ERROR 33
a=INT(1): IF a<>1 THEN ERROR 33
a=INT(2.7): IF a<>2 THEN ERROR 33
a=INT(-2.3): IF a<>-3 THEN ERROR 33
b=1:a=INT(b+2.3): IF a<>3 THEN ERROR 33
'
' joy
''a=joy(0)
''a=joy(b+1)
' key, key def
''key 11,"border 13:paper 0"
''key a,b$
''key def 68,1
''key def 68,1,159
''key def 68,1,159,160
''key def 68,1,159,160,161
''key def num,fire,normal,shift,ctrl
' left$, len, let, line input, list, load, locate, log, log10, lower$
'
PRINT "LEFT$, ";
a$=LEFT$("abc",0):IF a$<>"" THEN ERROR 33
a$="abc":a$=LEFT$(a$,1):IF a$<>"a" THEN ERROR 33
a$="abc":a$=LEFT$(a$,2):IF a$<>"ab" THEN ERROR 33
a$="abc":a$=LEFT$(a$,4):IF a$<>"abc" THEN ERROR 33
'
PRINT "LEN, ";
a=LEN(""): IF a<>0 THEN ERROR 33
a=LEN("a"): IF a<>1 THEN ERROR 33
a$="abc":a=LEN(a$): IF a<>3 THEN ERROR 33
'
''let a=a+1
''line input a$
''line input ;a$
''line input "para",a$
''line input "para";a$
''line input ;"para noCRLF";a$
''line input#2,;"para noCRLF";a$
''line input#stream,;"string";a$
''list
''list -
''list ,
''list -,
''list 10
''list 1-
''list -1
''list 1-2
''list #3
''list ,#3
''list 10,#3
''list 1-,#3
''list -1,#3
''list 1-2,#3
''list a
''load "file"
''load "file.scr",&c000
''load f$,adr
''locate 10,20
''locate#2,10,20
''locate#stream,x,y
'
PRINT "LOG, ";
a=LOG(1): IF a<>0 THEN ERROR 33
a=LOG(10): IF ROUND(a,4)<>2.3026 THEN ERROR 33
a=LOG(1000)/LOG(10): IF INT(a+1E-9)<>3 THEN ERROR 33
'
PRINT "LOG10, ";
a=LOG10(1): IF a<>0 THEN ERROR 33
a=LOG10(10): IF a<>1 THEN ERROR 33
a=LOG10(1000):IF a<>3 THEN ERROR 33
'
PRINT "LOWER$, ";
a$=LOWER$(""): IF a$<>"" THEN ERROR 33
a$=LOWER$("A"): IF a$<>"a" THEN ERROR 33
a$=LOWER$("ABCDEFGHKKLMNOPQRSTUVWXYZ"): IF a$<>"abcdefghkklmnopqrstuvwxyz" THEN ERROR 33
b$="AbC":a$=LOWER$(b$): IF a$<>"abc" THEN ERROR 33
a$=LOWER$("String"): IF a$<>"string" THEN ERROR 33
'
' mask, max, memory, merge, mid$, min, mod, mode, move, mover
''mask &x10101011
''mask 2^(8-x),1
''mask a,b
''mask ,b
'
PRINT "MAX, ";
a=MAX(0): IF a<>0 THEN ERROR 33
a=MAX(0,4): IF a<>4 THEN ERROR 33
a=MAX(-3.2,3.1,2.3): IF a<>3.1 THEN ERROR 33
a=MAX(7): IF a<>7 THEN ERROR 33
a=MAX(1.5,2.1,2.0): IF a<>2.1 THEN ERROR 33
a=1:b=2:a=MAX(a,7,b): IF a<>7 THEN ERROR 33
''a$=max("abc")
''1 a$=max("abc","d")
''a$=MAX("abc"):IF a$<>"abc" THEN ERROR 33
'
''memory &3fff
''memory adr
''merge "file"
''merge f$
'
PRINT "MID$, ";
a$=MID$("abc",2): IF a$<>"bc" THEN ERROR 33
a$=MID$("abc",1): IF a$<>"abc" THEN ERROR 33
a$=MID$("abc",255): IF a$<>"" THEN ERROR 33
a$=MID$("abc",2,0): IF a$<>"" THEN ERROR 33
a$=MID$("abc",2,1): IF a$<>"b" THEN ERROR 33
a$=MID$("abc",2,3): IF a$<>"bc" THEN ERROR 33
a$=MID$("string",3): IF a$<>"ring" THEN ERROR 33
a$=MID$("string",3,2): IF a$<>"ri" THEN ERROR 33
b$="abcd":a=2:a$=MID$(b$,a): IF a$<>"bcd" THEN ERROR 33
b$="abcd":a=2:b=2:a$=MID$(b$,a,b): IF a$<>"bc" THEN ERROR 33
''PRINT"MID$ as assign"
a$="abc":MID$(a$,2,2)="XY": IF a$<>"aXY" THEN ERROR 33
a$="abc":MID$(a$,2)="XY": IF a$<>"aXY" THEN ERROR 33
a$="abc":MID$(a$,2,1)="X": IF a$<>"aXc" THEN ERROR 33
a$="abc":MID$(a$,2,2)="X": IF a$<>"aXc" THEN ERROR 33
a$="abc":MID$(a$,2,1)="XY": IF a$<>"aXc" THEN ERROR 33
a$="abc":MID$(a$,1)="XY": IF a$<>"XYc" THEN ERROR 33
''mid$(a$,2)=b$
''mid$(a$,2,2)=b$
''mid$(a$,b%,c!)="string"
a$="abcd":b$="xyz":MID$(a$,2)=b$:IF a$<>"axyz" OR b$<>"xyz" THEN ERROR 33
a$="abcd":b$="xyz":MID$(a$,2,2)=b$:IF a$<>"axyd" THEN ERROR 33
'
PRINT "MIN, ";
a=MIN(0): IF a<>0 THEN ERROR 33
a=MIN(7): IF a<>7 THEN ERROR 33
a=MIN(0,4): IF a<>0 THEN ERROR 33
a=MIN(1,5): IF a<>1 THEN ERROR 33
a=MIN(-3.2,3.1,2.3): IF a<>-3.2 THEN ERROR 33
a=MIN(1.5,2.1,2.0): IF a<>1.5 THEN ERROR 33
a=MIN(b,c,d)
a=2:b=1:a=MIN(a,7,b): IF a<>1 THEN ERROR 33
''a$=min("abc")
''1 a$=min("abc","d")
''a$=MIN("abc"): IF a$<>"abc" THEN ERROR 33
'
PRINT "MOD"
a=10 MOD 3: IF a<>1 THEN ERROR 33
a=5:b=3:a=a MOD -b:IF a<>2 THEN ERROR 33
'
''mode 0 'testet on top
''mode n+1
''move 10,20
''move -10,-20,7
''move 10,20,7,3
''move 10,20,,3
''move x,y,m,g1
''mover 10,20
''mover -10,-20,7
''mover 10,20,7,3
''mover 10,20,,3
''mover x,y,m,g1
' new, next, not
''new
'
PRINT "NEXT, ";
FOR a=1 TO 2:NEXT: IF a<>3 THEN ERROR 33
FOR a=1 TO 2:NEXT a: IF a<>3 THEN ERROR 33
FOR a=1 TO 2:FOR b=3 TO 4:NEXT b,a: IF a<>3 OR b<>5 THEN ERROR 33
'
PRINT "NOT, ";
a=NOT 2: IF a<>-3 THEN ERROR 33
b=-7:a=NOT -b: IF a<>-8 THEN ERROR 33
'
' on break ..., on error goto, on gosub, on goto, on sq gosub, openin, openout, or, origin, out
''on break cont
''10 on break gosub 10010
''on break stop
''10 on error goto 0
''10 on error goto 10
''1 on error goto 0:a=asc(0)
''1 on error goto 2:a=asc(0) '2 rem
''1 on error goto 0:?chr$("A")
''1 on error goto 2:?chr$("A") '2 rem
''1 on error goto 0:a$=DEC$(b$,"\\    \\")
''1 on error goto 2:a$=DEC$(b$,"\\    \\") '2 rem
''1 on error goto 0:mask ,
''1 on error goto 2:mask , '2 rem
'
PRINT "ON GOSUB, ";
ON 1 GOSUB 10010
i=1:ON i GOSUB 10010,10020
i=2:ON i+1 GOSUB 10020,10020,10010
i=0:ON i GOSUB 10020: 'no match
i=2:ON i GOSUB 10020: 'no match
'
''10 on 1 goto 10
''10 on i goto 10,20 '20 rem
''10 on i+1 goto 10,20,20 '20 rem
''10 on sq(1) gosub 10010
''10 on sq(channel) gosub 10010
''openin "file"
''openin f$
''openout "file"
''openout f$
'
PRINT "OR, ";
a=1 OR &1A0: IF a<>417 THEN ERROR 33
a=b OR c
'
''origin 10,20
''origin 10,20,5,200,50,15
''origin x,y,left,right,top,bottom
''out &bc12,&12
''out adr,by
' paper, peek, pen, pi, plot, plotr, poke, pos, print
''paper 2
''paper#stream,p
''a=peek(&c000)
''a=peek(adr+5)
''pen 2
''pen 2,1
''pen#3,2,1
''pen#stream,p,trans
'
PRINT "PI, ";
a=PI: IF ROUND(a,8)<>3.14159265 THEN ERROR 33
'
''plot 10,20
''plot -10,-20,7
''plot 10,20,7,3
''plot 10,20,,3
''plot x,y,m,g1
''plotr 10,20
''plotr -10,-20,7
''plotr 10,20,7,3
''plotr 10,20,,3
''plotr x,y,m,g1
''poke &c000,23
''poke adr,by
''a=pos(#0)
''a=pos(#stream)
'
PRINT "PRINT: ";
PRINT
''print ,
PRINT ;
''print #2
''print #2,
PRINT "string";
PRINT 999999999;
PRINT 1E9;
PRINT 2.5E10;
PRINT 1.234567846;
a$="test":PRINT a$;
a$="test":b=2:PRINT a$;b;
''print#2,a$,b
PRINT a=(29+1) MOD 10=0 AND 5=7; a$<>"a2" OR b$<>"2"
'
PRINT "PRINT USING: ";
''print using"####";ri;
PRINT USING "##.##";-1.2;
PRINT " / ";USING "###.###";-1.2;1.2
''print using"### ########";a,b
''print using "\\   \\";"n1";"n2";" xx3";
''print using "!";"a1";"a2";
''print using "&";"a1";"a2";
''print#9,tab(t);t$;i;"h1"
'
?;
?a$;b
''?#2,ti-t0!;spc(5);
'
' rad, randomize, read, release, rem, remain, renum, restore, resume, return, right$, rnd, round, run
''rad
''randomize
''randomize 123.456
'
PRINT "READ, ";
DATA "a1", 1, "a2"
DATA 2, "c1"
READ a$: IF a$<>"a1" THEN ERROR 33
READ b: IF b<>1 THEN ERROR 33
READ a$,b,b$: IF a$<>"a2" OR b<>2 OR b$<>"c1" THEN ERROR 33
'
''release 1
''release n+1
'
PRINT "REM, ";
REM
REM comment until EOL
REM '
'comment until EOL
a=1 'comment
'
''a=remain(0)
''a=remain(ti)
''renum
''renum 100
''renum 100,50
''renum 100,50,2
'
PRINT "RESTORE, ";
RESTORE
RESTORE 10
'
''resume
''10 resume 10
''resume next
''return
'
PRINT "RIGHT$, ";
a$=RIGHT$("abc",0): IF a$<>"" THEN ERROR 33
a$=RIGHT$("abc",1): IF a$<>"c" THEN ERROR 33
a$=RIGHT$("abc",2): IF a$<>"bc" THEN ERROR 33
a$=RIGHT$("abc",4): IF a$<>"abc" THEN ERROR 33
b$="abcd":a=2:a$=RIGHT$(b$,a): IF a$<>"cd" THEN ERROR 33
a$=" 204":a$=RIGHT$(a$,LEN(a$)-1): IF a$<>"204" THEN ERROR 33
'
PRINT "RND, ";
a=RND: IF a<=0 OR a>=1 THEN ERROR 33
a=RND(0): IF a<=0 OR a>=1 THEN ERROR 33
b=2:a=RND(-1*b): IF a<=0 OR a>=1 THEN ERROR 33
'
PRINT "ROUND, ";
a=ROUND(2.49): IF a<>2 THEN ERROR 33
a=ROUND(2.50): IF a<>3 THEN ERROR 33
a=ROUND(0): IF a<>0 THEN ERROR 33
a=ROUND(-2.49): IF a<>-2 THEN ERROR 33
'a=ROUND(-2.50): IF a<>-3 THEN ERROR 33
'a=ROUND(8.575,2): IF a<>8.58 THEN ERROR 33
'a=ROUND(-8.575,2): IF a<>-8.58 THEN ERROR 33
'a=ROUND(1.005,2): IF a<>1.01 THEN ERROR 33
'a=ROUND(-1.005,2): IF a<>-1.01 THEN ERROR 33
a=ROUND(2.49,-39): IF a<>0 THEN ERROR 33
a=ROUND(2.49,39): IF a<>2.49 THEN ERROR 33
a=ROUND(1234.5678,-2): IF a<>1200 THEN ERROR 33
a=ROUND(2.335): IF a<>2 THEN ERROR 33
a=ROUND(2.335,2): IF a<>2.34 THEN ERROR 33
a=ROUND(PI): IF a<>3 THEN ERROR 33
a=ROUND(PI,0): IF a<>3 THEN ERROR 33
''a=ROUND(PI,0.4): IF a<>3 THEN ERROR 33
a=ROUND(PI,2): IF a<>3.14 THEN ERROR 33
''a=ROUND(PI,2.4): IF a<>3.14 THEN ERROR 33
a=ROUND(1234.5678,-2): IF a<>1200 THEN ERROR 33
''a=ROUND(8.575,2): IF a<>8.58 THEN ERROR 33
''a=ROUND(-8.575,2): IF a<>-8.58 THEN ERROR 33
''a=ROUND(1.005,2): IF a<>1.01 THEN ERROR 33
''a=ROUND(-1.005,2): IF a<>-1.01 THEN ERROR 33
'
''run
''10 run 10
''run "file"
''run f$
' save
''save "file"
''save "file",p
''save "file",a
''save "file.scr",b,&c000,&4000
''save "file.bin",b,&8000,&100,&8010
''save f$,b,adr,lg,entry
'
PRINT "SGN, ";
a=SGN(5): IF a<>1 THEN ERROR 33
a=SGN(0): IF a<>0 THEN ERROR 33
a=SGN(-5): IF a<>-1 THEN ERROR 33
'
PRINT "SIN, ";
a=SIN(0): IF a<>0 THEN ERROR 33
a=SIN(PI/2): IF ROUND(a,8)<>1 THEN ERROR 33
a=SIN(2.3)
DEG
a=SIN(0): IF a<>0 THEN ERROR 33
a=SIN(90): IF ROUND(a,8)<>1 THEN ERROR 33
RAD
'
''sound 1,100
''sound 1,100,400
''sound 1,100,400,15
''sound 1,100,400,15,1
''sound 1,100,400,15,1,1
''sound 1,100,400,15,1,1,4
''sound ch,period,duration,,,,noise
''sound ch,period,duration,vol,env1,ent1,noise
'
PRINT "SPACE$, ";
a$=SPACE$(9): IF a$<>"         " THEN ERROR 33
b=-2:a$=SPACE$(9+b): IF a$<>"       " THEN ERROR 33
''speed ink 10,5
''speed ink a,b
''speed key 10,5
''speed key a,b
''speed write 1
''speed write a-1
''1 speed mode 2
''a=sq(1)
''a=sq(channel)
'
PRINT "SQR, ";
a=SQR(9): IF a<>3 THEN ERROR 33
'' below: stop
'
PRINT "STR$, ";
a$=STR$(123): IF a$<>" 123" THEN ERROR 33
a$=STR$(a+b)
a=1: a$="": WHILE a<=5: a$=a$+STR$(a)+":": a=a+1: b=0: WHILE b<3: b=b+1: a$=a$+STR$(b): WEND: a$=a$+" ": WEND: a$=a$+"#"
IF a$<>" 1: 1 2 3  2: 1 2 3  3: 1 2 3  4: 1 2 3  5: 1 2 3 #" THEN ERROR 33
'
PRINT "STRING$"
a$=STRING$(13,"*"): IF a$<>"*************" THEN ERROR 33
a=7:b$="x":a$=STRING$(a,b$): IF a$<>"xxxxxxx" THEN ERROR 33
''a$=STRING$(10,42): IF a$<>"**********" THEN ERROR 33
''symbol 255,1,2,3,4,5,6,7,&x10110011
''symbol 255,1
''symbol after 255
' tag, tagoff, tan, test, testr, time, troff, tron
''tag
''tag#2
''tag#stream
''tagoff
''tagoff#2
''tagoff#stream
'
PRINT "TAN, ";
a=TAN(0): IF a<>0 THEN ERROR 33
a=TAN(45 * PI/180): IF ROUND(a,8)<>1 THEN ERROR 33
a=INT(TAN(0.7853981635)*100000000)/100000000: IF a<>1 THEN ERROR 33
DEG
a=TAN(0): IF a<>0 THEN ERROR 33
a=TAN(45): IF ROUND(a,8)<>1 THEN ERROR 33
RAD
'
''a=test(10,20)
''a=test(x,y)
''a=testr(10,-20)
''a=testr(xm,ym)
'
PRINT "TIME, ";
a=TIME: IF a<=0 THEN ERROR 33
''troff
''tron
' unt, upper$
''a=unt(&ff66)
'
PRINT "UPPER$, ";
a$=UPPER$("String"): IF a$<>"STRING" THEN ERROR 33
b$="a text":a$=UPPER$(b$): IF a$<>"A TEXT" THEN ERROR 33
' val, vpos
'
PRINT "VAL, ";
a=VAL("-2.3"): IF a<>-2.3 THEN ERROR 33
b$="2.3": a=VAL(b$): IF a<>2.3 THEN ERROR 33
a=VAL(""): IF a<>0 THEN ERROR 33
''a=VAL("4r"): IF a<>4 THEN ERROR 33
a=VAL("&ff"): IF a<>&FF THEN ERROR 33
a=VAL("&7A00"): IF a<>31232 OR a<>&7A00 THEN ERROR 33
'
''a=vpos(#0)
''a=vpos(#stream)
' wait, wend, while, width, window, window swap, write
''wait &ff34,20
''wait &ff34,20,25
'
PRINT "WEND (and WHILE), ";
a=9:WHILE a=10:WEND: IF a<>9 THEN ERROR 33
a=3:WHILE a>0:a=a-1:WEND: IF a<>0 THEN ERROR 33
''width 40
''window 10,30,5,20
''window#1,10,30,5,20
''window#stream,left,right,top,bottom
''window swap 1
''window swap 1,0
''1 window swap #1
''write
''write #2
''write #2,
''write "string"
''write 999999999
''write 1e9
''write 2.5e10
''write 1.234567846
''write a$
''write a$,b
''write#2,a$,b
''write#2,a$;b
''write ,
''write ;
' xor, xpos
'
PRINT "XOR"
a=&X1001 XOR &X0110: IF a<>15 THEN ERROR 33
b=5:c=7:a=b XOR c: IF a<>2 THEN ERROR 33
''a=xpos
' ypos
''a=ypos
' zone
''zone 13+n
' rsx
''|a
''|b
''|basic
''|cpm
''a$="*.drw":|dir,@a$
''|disc
''|disc.in
''|disc.out
''|drive,0
''1 |drive,
''1 |drive,#1
''|era,"file.bas"
''|ren,"file1.bas","file2.bas"
''|tape
''|tape.in
''|tape.out
''|user,1
''|mode,3
''|renum,1,2,3,4
''|
' keepSpaces
' PRG
'
PRINT "Completed."
STOP
END
'
10010 RETURN
10020 ERROR 33
RETURN
65535 c=1
'
`);
