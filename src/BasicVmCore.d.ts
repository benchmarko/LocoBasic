import type { IVmRsxApi, SnippetDataType } from "./Interfaces";
export declare class BasicVmCore implements IVmRsxApi {
    private readonly penColors;
    private readonly paperColors;
    private currMode;
    private readonly graphicsBuffer;
    private readonly graphicsPathBuffer;
    private currGraphicsPen;
    private originX;
    private originY;
    private graphicsX;
    private graphicsY;
    private readonly colorsForPens;
    private backgroundColor;
    private snippetData;
    private rsxHandler;
    private outputGraphicsIndex;
    private static readonly cpcColors;
    private readonly defaultColorsForPens;
    constructor(penColors: string[], paperColors: string[]);
    static getCpcColors(): string[];
    private static deleteAllItems;
    reset(): void;
    cls(): void;
    mode(num: number): void;
    private setOutputGraphicsIndex;
    getOutputGraphicsIndex(): number;
    drawMovePlot(type: string, x: number, y: number, pen?: number): void;
    getGraphicsPen(): number;
    getRgbColorStringForPen(pen: number): string;
    private flushGraphicsPath;
    addGraphicsElement(element: string): void;
    static getTagInSvg(content: string, strokeWidth: string, backgroundColor: string): string;
    flushGraphics(): string;
    flushText(): string;
    graphicsPen(num: number): void;
    ink(num: number, col: number): void;
    origin(x: number, y: number): void;
    getColorForPen(n: number, isPaper?: boolean): string;
    printGraphicsText(text: string): void;
    setOnSpeak(fnOnSpeak: (text: string, pitch: number) => Promise<void>): void;
    rsx(cmd: string, args: (number | string)[]): Promise<(number | string)[]>;
    xpos(): number;
    ypos(): number;
    getSnippetData(): SnippetDataType;
}
//# sourceMappingURL=BasicVmCore.d.ts.map