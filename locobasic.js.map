{"version":3,"file":"locobasic.js","sources":["../src/Parser.ts","../src/arithmetic.ts","../src/SemanticsHelper.ts","../src/Semantics.ts","../src/Core.ts","../src/BasicVmRsxHandler.ts","../src/BasicVmCore.ts","../src/BasicVmNode.ts","../src/NodeParts.ts","../src/BasicVmBrowser.ts","../src/main.ts"],"sourcesContent":["import { type ActionDict, type Grammar, Matcher, type Namespace, type Semantics, grammar } from \"ohm-js\";\n\nexport class Parser {\n    private readonly ohmGrammar: Grammar;\n    private readonly ohmSemantics: Semantics;\n    private readonly matcher: Matcher;\n\n    constructor(grammarString: string, semanticsMap: ActionDict<string | string[]>, superParser?: Parser) {\n        if (superParser) {\n            const superGrammar = superParser.getOhmGrammar();\n            \n            const namespace: Namespace = {\n                basicGrammar: superGrammar\n            };\n            this.ohmGrammar = grammar(grammarString, namespace);\n        } else {\n            this.ohmGrammar = grammar(grammarString);\n        }\n\n        this.matcher = this.ohmGrammar.matcher();\n\n        this.ohmSemantics = this.ohmGrammar\n            .createSemantics()\n\t\t\t.addOperation<string | string[]>(\"eval\", semanticsMap);\n    }\n\n    public getOhmGrammar(): Grammar {\n        return this.ohmGrammar;\n    }\n\n    private diffPartsStart(oldInput: string, newInput: string) {\n        let common = 0;\n        while (common < oldInput.length && common < newInput.length && oldInput[common] === newInput[common]) {\n            common += 1;\n        }\n        return common;\n    }\n\n    private diffPartsEnd(oldInput: string, newInput: string, start: number) {\n        let common = newInput.length;\n        const oldIndexDiff = oldInput.length - newInput.length;\n        const minCommon = oldIndexDiff < 0 ? start - oldIndexDiff : start;\n        while (common > minCommon && oldInput[common - 1 + oldIndexDiff] === newInput[common - 1]) {\n            common -= 1;\n        }\n        return common;\n    }\n\n    // Function to parse and evaluate an expression\n    public parseAndEval(input: string): string {\n        const matcher = this.matcher;\n        const oldInput = matcher.getInput();\n        const start = this.diffPartsStart(oldInput, input);\n        const end = this.diffPartsEnd(oldInput, input, start);\n        const oldEnd = oldInput.length - (input.length - end);\n\n        try {\n            if (start > 0) {\n                matcher.replaceInputRange(start, oldEnd, input.substring(start, end));\n            } else {\n                matcher.setInput(input);\n            }\n\n            const matchResult = matcher.match();\n            if (matchResult.succeeded()) {\n                return this.ohmSemantics(matchResult).eval() as string;\n            } else {\n                return `ERROR: Parsing failed: ${matchResult.message}`;\n            }\n        } catch (error) {\n            return `ERROR: Parsing evaluator failed: ${error instanceof Error ? error.message : \"unknown\"}`;\n        }\n    }\n}\n","// arithmetics.ts\n//\nexport const arithmetic = {\n  basicGrammar:\n    `\n    Arithmetic {\n    Program\n      = Line*\n\n    Line\n      = Label? Statements Comment? (eol | end)\n\n    Label\n      = label\n\n    Statements\n      = Statement (\":\" Statement)*\n\n    Statement\n      = Comment\n      | After\n      | Auto\n      | Border\n      | Call\n      | Cat\n      | Chain\n      | Clear\n      | Clg\n      | Closein\n      | Closeout\n      | Cls\n      | Cont\n      | Cursor\n      | Data\n      | Def\n      | Defint\n      | Defreal\n      | Defstr\n      | Deg\n      | Delete\n      | Di\n      | Dim\n      | Draw\n      | Drawr\n      | Edit\n      | Ei\n      | End\n      | Ent\n      | Env\n      | Erase\n      | Error\n      | Every\n      | Fill\n      | ForNextBlock\n      | Frame\n      | Gosub\n      | Goto\n      | GraphicsPaper\n      | GraphicsPen\n      | If\n      | Ink\n      | Input\n      | Key\n      | Let\n      | LineInput\n      | List\n      | Load\n      | Locate\n      | Mask\n      | Memory\n      | Merge\n      | MidSAssign\n      | Mode\n      | Move\n      | Mover\n      | New\n      | On\n      | Openin\n      | Openout\n      | Origin\n      | Out\n      | Paper\n      | Pen\n      | Plot\n      | Plotr\n      | Poke\n      | Print\n      | Rad\n      | Randomize\n      | Read\n      | Release\n      | Rem\n      | Renum\n      | Restore\n      | Resume\n      | Return\n      | Rsx\n      | Run\n      | Save\n      | Sound\n      | Speed\n      | Stop\n      | Symbol\n      | Tag\n      | Tagoff\n      | Troff\n      | Tron\n      | Wait\n      | WhileWendBlock\n      | Width\n      | Window\n      | Write\n      | Zone\n      | ArrayAssign\n      | Assign\n\n    ArrayAssign\n      = ArrayIdent \"=\" NumExp\n      | StrArrayIdent \"=\" StrExp\n\n    LoopBlockContent\n      = LoopBlockSeparator Statements\n\n    LoopBlockSeparator\n      = \":\" -- colon\n      | Comment? eol Label? -- newline\n\n    Abs\n      = abs \"(\" NumExp \")\"\n\n    AddressOf\n      = \"@\" AnyIdent\n\n    After\n      = after NumExp (\",\" NumExp)? gosub label\n\n    Asc\n      = asc \"(\" StrExp \")\"\n\n    Atn\n      = atn \"(\" NumExp \")\"\n\n    Assign\n      = ident \"=\" NumExp\n      | strIdent \"=\" StrExp\n\n    Auto\n      = auto label? (\",\" digit+)?\n\n    BinS\n      = binS \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Border\n      = border NumExp (\",\" NumExp)?\n\n    Call\n      = call NonemptyListOf<NumExp, \",\">\n\n    Cat\n      = cat\n\n    Chain\n      = chain merge? StrExp (\",\" NumExp)? (\",\" Delete)?\n\n    ChrS\n      = chrS \"(\" NumExp \")\"\n\n    Cint\n      = cint \"(\" NumExp \")\"\n\n    Clear\n      = clear input -- input\n      | clear\n\n    Clg\n      = clg NumExp?\n\n    Closein\n      = closein\n\n    Closeout\n      = closeout\n\n    Cls\n      = cls StreamArg?\n\n    Comment\n      = \"\\\\'\" partToEol\n\n    Cont\n      = cont\n\n\t\tCopychrS\n      = copychrS \"(\" StreamArg \")\"\n\n    Cos\n      = cos \"(\" NumExp \")\"\n\n    Creal\n      = creal \"(\" NumExp \")\"\n\n    Cursor\n      = cursor NumExp (\",\" NumExp)?\n\n    DataUnquoted\n      = binaryValue\n      | hexValue\n      | dataUnquoted\n\n    DataItem\n      = string\n      | DataUnquoted\n\n    Data\n      = data NonemptyListOf<DataItem, \",\">\n\n    DecS\n      = decS \"(\" NumExp \",\" StrExp \")\"\n\n    Def\n      = def fn DefAssign\n\n    DefArgs\n      = \"(\" ListOf<SimpleIdent, \",\"> \")\"\n\n    DefAssign\n      = ident DefArgs? \"=\" NumExp\n      | strIdent DefArgs? \"=\" StrExp\n\n    LabelRange\n      = label (\"-\" label)?\n\n    LetterRange\n      = letter (\"-\" letter)?\n\n    Defint\n      = defint NonemptyListOf<LetterRange, \",\">\n\n    Defreal\n      = defreal NonemptyListOf<LetterRange, \",\">\n\n    Defstr\n      = defstr NonemptyListOf<LetterRange, \",\">\n\n    Deg\n      = deg\n\n    Delete\n      = delete LabelRange?\n\n    Derr\n      = derr\n\n    Di\n      = di\n\n    Dim\n      = dim NonemptyListOf<DimArrayIdent, \",\">\n\n    Draw\n      = draw NumExp \",\" NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    Drawr\n      = drawr NumExp \",\" NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    Edit\n      = edit label\n\n    Ei\n      = ei\n\n    Else\n      = else\n\n    End\n      = endLit\n\n    Ent\n      = ent ListOf<NumExp, \",\">\n\n    Env\n      = env ListOf<NumExp, \",\">\n\n    Eof\n      = eof\n\n    Erase\n      = erase NonemptyListOf<SimpleIdent, \",\">\n\n    Erl\n      = erl\n\n    Err\n      = err\n\n    Error\n      = error NumExp\n\n    Every\n      = every NumExp (\",\" NumExp)? gosub label\n\n    Exp\n      = exp \"(\" NumExp \")\"\n\n    Fill\n      = fill NumExp\n\n    Fix\n      = fix \"(\" NumExp \")\"\n\n    For\n      = for variable \"=\" NumExp to NumExp (step NumExp)?\n\n    ForNextBlock\n      = For LoopBlockContent* LoopBlockSeparator Next\n\n    Frame\n      = frame\n\n    Fre\n      = fre \"(\" (StrExp | NumExp) \")\"\n\n    Gosub\n      = gosub label\n\n    Goto\n      = goto label\n\n    GraphicsPaper\n      = graphics paper NumExp\n\n    GraphicsPen\n      = graphics pen NumExp (\",\" NumExp)?\n\n    HexS\n      = hexS \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Himem\n      = himem\n\n    Ink\n      = ink NumExp \",\" NumExp (\",\" NumExp)?\n\n    Inkey\n      = inkey \"(\" NumExp \")\"\n\n    InkeyS\n      = inkeyS\n\n    Inp\n      = inp \"(\" NumExp \")\"\n\n    Input\n      = input (StreamArg \",\")? \";\"? (string (\";\" | \",\"))? NonemptyListOf<AnyIdent, \",\">\n\n    Instr\n      = instr \"(\" StrExp \",\" StrExp \")\" -- noLen\n      | instr \"(\" NumExp \",\" StrExp \",\" StrExp \")\" -- len\n\n    Int\n      = int \"(\" NumExp \")\"\n\n    Joy\n      = joy \"(\" NumExp \")\"\n\n    Key \n      = key NumExp \",\" StrExp -- key\n      | key def NonemptyListOf<NumExp, \",\"> -- def\n\n    LeftS\n      = leftS \"(\" StrExp \",\" NumExp \")\"\n\n    Len\n      = len \"(\" StrExp \")\"\n\n    Let\n      = let (ArrayAssign | Assign)\n\n    LineInput\n      = line input (StreamArg \",\")? (string (\";\" | \",\"))? (StrArrayIdent | strIdent)\n\n    List\n      = list LabelRange? (\",\" StreamArg)?\n\n    Load\n      = load StrExp (\",\" NumExp)?\n\n    Locate\n      = locate (StreamArg \",\")? NumExp (\",\" NumExp)?\n\n    Log\n      = log \"(\" NumExp \")\"\n\n    Log10\n      = log10 \"(\" NumExp \")\"\n\n    LowerS\n      = lowerS \"(\" StrExp \")\"\n\n    Mask\n      = mask NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    Max\n      = max \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    Memory\n      = memory NumExp\n\n    Merge\n      = merge StrExp\n\n    MidS\n      = midS \"(\" StrExp \",\" NumExp (\",\" NumExp)? \")\"\n\n    MidSAssign\n      = midS \"(\" (StrArrayIdent | strIdent) \",\" NumExp (\",\" NumExp)? \")\" \"=\" StrExp\n\n    Min\n      = min \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    Mode\n      = mode NumExp\n\n    Move\n      = move NumExp \",\" NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    Mover\n      = mover NumExp \",\" NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    New\n      = new\n\n    Next \n      = next variable?\n\n    On\n      = on NumExp gosub NonemptyListOf<label, \",\"> -- numGosub\n      | on NumExp goto NonemptyListOf<label, \",\"> -- numGoto\n      | on break cont -- breakCont\n      | on break gosub label -- breakGosub\n      | on break stop -- breakStop\n      | on error goto label -- errorGoto\n\n    Openin\n      = openin StrExp\n\n    Openout\n      = openout StrExp\n\n    Origin\n      = origin NumExp \",\" NumExp (\",\" NumExp)*\n\n    Out\n      = out NumExp \",\" NumExp\n\n    Paper\n      = paper (StreamArg \",\")? NumExp\n\n    Peek\n      = peek \"(\" NumExp \")\"\n\n    Pen\n      = pen (StreamArg \",\")? NumExp (\",\" NumExp)?\n\n    Pi\n      = pi\n\n    Plot\n      = plot NumExp \",\" NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    Plotr\n      = plotr NumExp \",\" NumExp (\",\" NumExp)? (\",\" NumExp)?\n\n    Poke\n      = poke NumExp \",\" NumExp\n\n    Pos\n      = pos \"(\" \"#\" NumExp \")\"\n\n    PrintCommaOp\n      = \",\"\n\n    PrintArg\n      = &StrCmpExp NumExp -- strCmp\n      | StrExp\n      | NumExp\n      | using StrExp \";\" NonemptyListOf<NumExp, \";\"> -- usingNum\n      | Spc\n      | Tab\n      | PrintCommaOp -- commaOp\n\n    StreamArg\n      = \"#\" NumExp\n\n    PrintSep\n      = \";\" | \"\"\n\n    Print\n      = (print | \"?\") (StreamArg (\",\" | &\":\" | &Comment | &eol))? ListOf<PrintArg, PrintSep> (\";\")?\n\n    Rad\n      = rad\n\n    Randomize\n      = randomize NumExp?\n\n    Read\n      = read NonemptyListOf<AnyIdent, \",\">\n\n    Release\n      = release NumExp\n\n    Rem\n      = rem partToEol\n\n    Renum\n      = renum label? (\",\" label)? (\",\" number)?\n\n    Remain\n      = remain \"(\" NumExp \")\"\n\n    Restore\n      = restore label?\n\n    Resume\n      = resume (label | next)\n\n    Return\n      = return\n\n    RightS\n      = rightS \"(\" StrExp \",\" NumExp \")\"\n\n    Rnd\n      = rnd (\"(\" NumExp \")\")?\n\n    Round\n      = round \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Rsx\n      = \"|\" #rsxIdentName RsxArgs?\n\n    RsxAddressOf\n      = \"@\" AnyIdent\n\n    RsxArg = RsxAddressOf | AnyFnArg\n\n    RsxArgs\n      = \",\" NonemptyListOf<RsxArg, \",\">\n\n    Run\n      = run (StrExp | label)?\n\n    Save\n      = save StrExp (\",\" letter)? (\",\" NumExp)? (\",\" NumExp)? (\",\" NumExp)?\n\n    Sgn\n      = sgn \"(\" NumExp \")\"\n\n    Sin\n      = sin \"(\" NumExp \")\"\n\n    Sound\n      = sound NonemptyListOf<NumExp, \",\"> // simplified\n\n    SpaceS\n      = spaceS \"(\" NumExp \")\"\n\n    Spc\n      = spc \"(\" NumExp \")\"\n\n    Speed\n      = speed ink NumExp \",\" NumExp -- ink\n      | speed key NumExp \",\" NumExp -- key\n      | speed write NumExp -- write\n\n    Sq\n      = sq \"(\" NumExp \")\"\n\n    Sqr\n      = sqr \"(\" NumExp \")\"\n\n    Stop\n      = stop\n\n    StrS\n      = strS \"(\" NumExp \")\"\n\n    StringS\n      = stringS \"(\" NumExp \",\" StrExp \")\" -- str\n      | stringS \"(\" NumExp \",\" NumExp \")\" -- num\n\n    Symbol\n      = symbol NonemptyListOf<NumExp, \",\"> -- def // simplified\n      | symbol after NumExp -- after\n\n    Tab\n       = tab \"(\" NumExp \")\"\n\n    Tag\n      = tag StreamArg?\n\n    Tagoff\n      = tagoff StreamArg?\n\n    Tan\n      = tan \"(\" NumExp \")\"\n\n    Test\n      = test \"(\" NumExp \",\" NumExp \")\"\n\n    Testr\n      = testr \"(\" NumExp \",\" NumExp \")\"\n\n    Time\n      = time\n\n    Troff\n      = troff\n\n    Tron\n      = tron\n\n    Unt\n      = unt \"(\" NumExp \")\"\n\n    UpperS\n      = upperS \"(\" StrExp \")\"\n\n    Val\n      = val \"(\" StrExp \")\"\n\n    Vpos\n      = vpos \"(\" \"#\" NumExp \")\"\n\n    Wait\n      = wait NumExp \",\" NumExp (\",\" NumExp)?\n\n    Wend\n      = wend\n\n    While\n      = while NumExp\n\n    WhileWendBlock\n      = While LoopBlockContent* LoopBlockSeparator Wend\n\n    Width\n      = width NumExp\n\n    Window\n      = window (StreamArg \",\")? NumExp \",\" NumExp \",\" NumExp \",\" NumExp -- def\n      | window swap NumExp (\",\" NumExp)? -- swap\n\n    WriteArg\n      = StrExp\n      | NumExp\n\n    Write\n      = write (StreamArg \",\")? ListOf<WriteArg, (\";\" | \",\")>\n\n    Xpos\n      = xpos\n\n    Ypos\n      = ypos\n\n    Zone\n      = zone NumExp\n\n    IfExp\n      = Statements\n      | label -- label\n\n    IfThen\n      = then IfExp -- then\n      | Goto\n\n    If\n      = if NumExp IfThen (else IfExp)?\n\n    StrExp\n      = StrAddExp\n\n    StrAddExp\n      = StrAddExp \"+\" StrPriExp  -- plus\n      | StrPriExp\n\n    StrPriExp\n      = \"(\" StrExp \")\"  -- paren\n      | BinS\n      | ChrS\n      | CopychrS\n      | DecS\n      | HexS\n      | InkeyS\n      | LeftS\n      | LowerS\n      | MidS\n      | RightS\n      | SpaceS\n      | StrS\n      | StringS\n      | UpperS\n      | StrFnIdent\n      | StrArrayIdent\n      | strIdent\n      | string\n\n    NumExp\n      = XorExp\n\n    XorExp\n      = OrExp xor XorExp  -- xor\n      | OrExp\n\n    OrExp\n      = AndExp or OrExp  -- or\n      | AndExp\n\n    AndExp\n      = NotExp and AndExp  -- and\n      | NotExp\n\n    NotExp\n      = not NotExp  -- not\n      | StrCmpExp\n      | CmpExp\n\n    StrCmpExp\n      = StrAddExp \"=\" StrAddExp  -- eq\n      | StrAddExp \"<>\" StrAddExp  -- ne\n      | StrAddExp \"<\" StrAddExp  -- lt\n      | StrAddExp \"<=\" StrAddExp  -- le\n      | StrAddExp \">\" StrAddExp  -- gt\n      | StrAddExp \">=\" StrAddExp  -- ge\n\n    CmpExp\n      = CmpExp \"=\" AddExp  -- eq\n      | CmpExp \"<>\" AddExp  -- ne\n      | CmpExp \"<\" AddExp  -- lt\n      | CmpExp \"<=\" AddExp  -- le\n      | CmpExp \">\" AddExp  -- gt\n      | CmpExp \">=\" AddExp  -- ge\n      | AddExp\n\n    AddExp\n      = AddExp \"+\" ModExp  -- plus\n      | AddExp \"-\" ModExp  -- minus\n      | ModExp\n\n    ModExp\n      = ModExp mod DivExp -- mod\n      | DivExp\n\n    DivExp\n      = DivExp \"\\\\\\\\\" MulExp -- div\n      | MulExp\n\n    MulExp\n      = MulExp \"*\" ExpExp  -- times\n      | MulExp \"/\" ExpExp  -- divide\n      | ExpExp\n\n    ExpExp\n      = PriExp \"^\" ExpExp  -- power\n      | PriExp\n\n    PriExp\n      = \"(\" NumExp \")\"  -- paren\n      | \"+\" PriExp   -- pos\n      | \"-\" PriExp   -- neg\n      | FnIdent\n      | ArrayIdent\n      | ident\n      | number\n      | Abs\n      | AddressOf\n      | Asc\n      | Atn\n      | Cint\n      | Cos\n      | Creal\n      | Derr\n      | Eof\n      | Erl\n      | Err\n      | Exp\n      | Fix\n      | Fre\n      | Himem\n      | Inkey\n      | Inp\n      | Instr\n      | Int\n      | Joy\n      | Len\n      | Log\n      | Log10\n      | Max\n      | Min\n      | Peek\n      | Pi\n      | Pos\n      | Remain\n      | Rnd\n      | Round\n      | Sgn\n      | Sin\n      | Sq\n      | Sqr\n      | Tan\n      | Test\n      | Testr\n      | Time\n      | Unt\n      | Val\n      | Vpos\n      | Xpos\n      | Ypos\n\n    ArrayArgs\n      = NonemptyListOf<NumExp, \",\">\n\n    ArrayIdent\n      = ident \"(\" ArrayArgs \")\"\n\n    StrArrayIdent\n      = strIdent \"(\" ArrayArgs \")\"\n\n    DimArrayArgs\n      = NonemptyListOf<NumExp, \",\">\n\n    DimArrayIdent\n      = ident \"(\" DimArrayArgs \")\"\n      | strIdent \"(\" DimArrayArgs \")\"\n\n    SimpleIdent\n      = strIdent\n      | ident\n\n    AnyIdent\n      = StrArrayIdent\n      | ArrayIdent\n      | strIdent\n      | ident\n\n    FnIdent\n      = fnIdent AnyFnArgs?\n\n    StrFnIdent\n      = strFnIdent AnyFnArgs?\n\n    AnyFnArg\n      = StrExp\n      | NumExp\n\n    AnyFnArgs\n      = \"(\" ListOf<AnyFnArg, \",\"> \")\"\n\n\n    keyword\n      = abs | after | and | asc | atn | auto | binS | border | break\n      | call | cat | chain | chrS | cint | clear | clg | closein | closeout | cls | cont | copychrS | cos | creal | cursor\n      | data | decS | def | defint | defreal | defstr | deg | delete | derr | di | dim | draw | drawr\n      | edit | ei | else | endLit | ent | env | eof | erase | erl | err | error | every | exp | fill | fix | fn | for | frame | fre | gosub | goto | graphics\n      | hexS | himem | if | ink | inkey | inkeyS|  inp | input | instr | int | joy | key | leftS | len | let | line | list | load | locate | log | log10 | lowerS\n      | mask | max | memory | merge | midS | min | mod | mode | move | mover | new | next | not | on | openin | openout | or | origin | out\n      | paper | peek | pen | pi | plot | plotr | poke | pos | print\n      | rad | randomize | read | release | rem | remain | renum | restore | resume | return | rightS | rnd | round | run\n      | save | sgn | sin | sound | spaceS | spc | speed | sq | sqr | step | stop | strS | stringS | swap | symbol\n      | tab | tag | tagoff | tan | test | testr | then | time | to | troff | tron | unt | upperS | using\n      | val | vpos | wait | wend | while | width | window | write | xor | xpos | ypos | zone\n\n    abs\n      = (\"abs\" | \"ABS\") ~identPart\n    after\n      = (\"after\" | \"AFTER\") ~identPart\n    and\n      = (\"and\" | \"AND\") ~identPart\n    asc\n      = (\"asc\" | \"ASC\") ~identPart\n    atn\n      = (\"atn\" | \"ATN\") ~identPart\n    auto\n      = (\"auto\" | \"AUTO\") ~identPart\n    binS\n      = (\"bin$\" | \"BIN$\") ~identPart\n    border\n      = (\"border\" | \"BORDER\") ~identPart\n    break\n      = (\"break\" | \"BREAK\") ~identPart\n    call\n      = (\"call\" | \"CALL\") ~identPart\n    cat\n      = (\"cat\" | \"CAT\") ~identPart\n    chain\n      = (\"chain\" | \"CHAIN\") ~identPart\n    chrS\n      = (\"chr$\" | \"CHR$\") ~identPart\n    cint\n      = (\"cint\" | \"CINT\") ~identPart\n    clear\n      = (\"clear\" | \"CLEAR\") ~identPart\n    clg\n      = (\"clg\" | \"CLG\") ~identPart\n    closein\n      = (\"closein\" | \"CLOSEIN\") ~identPart\n    closeout\n      = (\"closeout\" | \"CLOSEOUT\") ~identPart\n    cls\n      = (\"cls\" | \"CLS\") ~identPart\n    cont\n      = (\"cont\" | \"CONT\") ~identPart\n    copychrS\n      = (\"copychr$\" | \"COPYCHR$\") ~identPart\n    cos\n      = (\"cos\" | \"COS\") ~identPart\n    creal\n      = (\"creal\" | \"CREAL\") ~identPart\n    cursor\n      = (\"cursor\" | \"CURSOR\") ~identPart\n    data\n      = (\"data\" | \"DATA\") ~identPart\n    decS\n      = (\"dec$\" | \"DEC$\") ~identPart\n    def\n      = (\"def\" | \"DEF\") ~identPart\n    defint\n      = (\"defint\" | \"DEFINT\") ~identPart\n    defreal\n      = (\"defreal\" | \"DEFREAL\") ~identPart\n    defstr\n      = (\"defstr\" | \"DEFSTR\") ~identPart\n    deg\n      = (\"deg\" | \"DEG\") ~identPart\n    delete\n      = (\"delete\" | \"DELETE\") ~identPart\n    derr\n      = (\"derr\" | \"DERR\") ~identPart\n    di\n      = (\"di\" | \"DI\") ~identPart\n    dim\n      = (\"dim\" | \"DIM\") ~identPart\n    draw\n      = (\"draw\" | \"DRAW\") ~identPart\n    drawr\n      = (\"drawr\" | \"DRAWR\") ~identPart\n    edit\n      = (\"edit\" | \"EDIT\") ~identPart\n    ei\n      = (\"ei\" | \"EI\") ~identPart\n    else\n      = (\"else\" | \"ELSE\") ~identPart\n    endLit\n      = (\"end\" | \"END\") ~identPart\n    ent\n      = (\"ent\" | \"ENT\") ~identPart\n    env\n      = (\"env\" | \"ENV\") ~identPart\n    eof\n      = (\"eof\" | \"EOF\") ~identPart\n    erase\n      = (\"erase\" | \"ERASE\") ~identPart\n    erl\n      = (\"erl\" | \"ERL\") ~identPart\n    err\n      = (\"err\" | \"ERR\") ~identPart\n    error\n      = (\"error\" | \"ERROR\") ~identPart\n    every\n      = (\"every\" | \"EVERY\") ~identPart\n    exp\n      = (\"exp\" | \"EXP\") ~identPart\n    fill\n      = (\"fill\" | \"FILL\") ~identPart\n    fix\n      = (\"fix\" | \"FIX\") ~identPart\n    fn\n      = (\"fn\" | \"FN\")\n    for\n      = (\"for\" | \"FOR\") ~identPart\n    frame\n      = (\"frame\" | \"FRAME\") ~identPart\n    fre\n      = (\"fre\" | \"FRE\") ~identPart\n    gosub\n      = (\"gosub\" | \"GOSUB\") ~identPart\n    goto\n      = (\"goto\" | \"GOTO\") ~identPart\n    graphics\n      = (\"graphics\" | \"GRAPHICS\") ~identPart\n    hexS\n      = (\"hex$\" | \"HEX$\") ~identPart\n    himem\n      = (\"himem\" | \"HIMEM\") ~identPart\n    if\n      = (\"if\" | \"IF\") ~identPart\n    ink\n      = (\"ink\" | \"INK\") ~identPart\n    inkey\n      = (\"inkey\" | \"INKEY\") ~identPart\n    inkeyS\n      = (\"inkey$\" | \"INKEY$\") ~identPart\n    inp\n      = (\"inp\" | \"INP\") ~identPart\n    input\n      = (\"input\" | \"INPUT\") ~identPart\n    instr\n      = (\"instr\" | \"INSTR\") ~identPart\n    int\n      = (\"int\" | \"INT\") ~identPart\n    joy\n      = (\"joy\" | \"JOY\") ~identPart\n    key\n      = (\"key\" | \"KEY\") ~identPart\n    leftS\n      = (\"left$\" | \"LEFT$\") ~identPart\n    len\n      = (\"len\" | \"LEN\") ~identPart\n    let\n      = (\"let\" | \"LET\") ~identPart\n    line\n      = (\"line\" | \"LINE\") ~identPart\n    list\n      = (\"list\" | \"LIST\") ~identPart\n    load\n      = (\"load\" | \"LOAD\") ~identPart\n    locate\n      = (\"locate\" | \"LOCATE\") ~identPart\n    log\n      = (\"log\" | \"LOG\") ~identPart\n    log10\n      = (\"log10\" | \"LOG10\") ~identPart\n    lowerS\n      = (\"lower$\" | \"LOWER$\") ~identPart\n    mask\n      = (\"mask\" | \"MASK\") ~identPart\n    max\n      = (\"max\" | \"MAX\") ~identPart\n    memory\n      = (\"memory\" | \"MEMORY\") ~identPart\n    merge\n      = (\"merge\" | \"MERGE\") ~identPart\n    midS\n      = (\"mid$\" | \"MID$\") ~identPart\n    min\n      = (\"min\" | \"MIN\") ~identPart\n    mod\n      = (\"mod\" | \"MOD\") ~identPart\n    mode\n      = (\"mode\" | \"MODE\") ~identPart\n    move\n      = (\"move\" | \"MOVE\") ~identPart\n    mover\n      = (\"mover\" | \"MOVER\") ~identPart\n    new\n      = (\"new\" | \"NEW\") ~identPart\n    next\n      = (\"next\" | \"NEXT\") ~identPart\n    not\n      = (\"not\" | \"NOT\") ~identPart\n    on\n      = (\"on\" | \"ON\") ~identPart\n    openin\n      = (\"openin\" | \"OPENIN\") ~identPart\n    openout\n      = (\"openout\" | \"OPENOUT\") ~identPart\n    or\n      = (\"or\" | \"OR\") ~identPart\n    origin\n      = (\"origin\" | \"ORIGIN\") ~identPart\n    out\n      = (\"out\" | \"OUT\") ~identPart\n    paper\n      = (\"paper\" | \"PAPER\") ~identPart\n    peek\n      = (\"peek\" | \"PEEK\") ~identPart\n    pen\n      = (\"pen\" | \"PEN\") ~identPart\n    pi\n      = (\"pi\" | \"PI\") ~identPart\n    plot\n      = (\"plot\" | \"PLOT\") ~identPart\n    plotr\n      = (\"plotr\" | \"PLOTR\") ~identPart\n    poke\n      = (\"poke\" | \"POKE\") ~identPart\n    pos\n      = (\"pos\" | \"POS\") ~identPart\n    print\n      = (\"print\" | \"PRINT\") ~identPart\n    rad\n      = (\"rad\" | \"RAD\") ~identPart\n    randomize\n      = (\"randomize\" | \"RANDOMIZE\") ~identPart\n    read\n      = (\"read\" | \"READ\") ~identPart\n    release\n      = (\"release\" | \"RELEASE\") ~identPart\n    rem\n      = (\"rem\" | \"REM\") ~identPart\n    remain\n      = (\"remain\" | \"REMAIN\") ~identPart\n    renum\n      = (\"renum\" | \"RENUM\") ~identPart\n    restore\n      = (\"restore\" | \"RESTORE\") ~identPart\n    resume\n      = (\"resume\" | \"RESUME\") ~identPart\n    return\n      = (\"return\" | \"RETURN\") ~identPart\n    rightS\n      = (\"right$\" | \"RIGHT$\") ~identPart\n    rnd\n      = (\"rnd\" | \"RND\") ~identPart\n    round\n      = (\"round\" | \"ROUND\") ~identPart\n    run\n      = (\"run\" | \"RUN\") ~identPart\n    save\n      = (\"save\" | \"SAVE\") ~identPart\n    sgn\n      = (\"sgn\" | \"SGN\") ~identPart\n    sin\n      = (\"sin\" | \"SIN\") ~identPart\n    sound\n      = (\"sound\" | \"SOUND\") ~identPart\n    spaceS\n      = (\"space$\" | \"SPACE$\") ~identPart\n    spc\n      = (\"spc\" | \"SPC\") ~identPart\n    speed\n      = (\"speed\" | \"SPEED\") ~identPart\n    sq\n      = (\"sq\" | \"SQ\") ~identPart\n    sqr\n      = (\"sqr\" | \"SQR\") ~identPart\n    step\n      = (\"step\" | \"STEP\") ~identPart\n    stop\n      = (\"stop\" | \"STOP\") ~identPart\n    strS\n      = (\"str$\" | \"STR$\") ~identPart\n    stringS\n      = (\"string$\" | \"STRING$\") ~identPart\n    swap\n      = (\"swap\" | \"SWAP\") ~identPart\n    symbol\n      = (\"symbol\" | \"SYMBOL\") ~identPart\n    tab\n      = (\"tab\" | \"TAB\") ~identPart\n    tag\n      = (\"tag\" | \"TAG\") ~identPart\n    tagoff\n      = (\"tagoff\" | \"TAGOFF\") ~identPart\n    tan\n      = (\"tan\" | \"TAN\") ~identPart\n    test\n      = (\"test\" | \"TEST\") ~identPart\n    testr\n      = (\"testr\" | \"TESTR\") ~identPart\n    then\n      = (\"then\" | \"THEN\") ~identPart\n    time\n      = (\"time\" | \"TIME\") ~identPart\n    to\n      = (\"to\" | \"TO\") ~identPart\n    troff\n      = (\"troff\" | \"TROFF\") ~identPart\n    tron\n      = (\"tron\" | \"TRON\") ~identPart\n    unt\n      = (\"unt\" | \"UNT\") ~identPart\n    upperS\n      = (\"upper$\" | \"UPPER$\") ~identPart\n    using\n      = (\"using\" | \"USING\") ~identPart\n    val\n      = (\"val\" | \"VAL\") ~identPart\n    vpos\n      = (\"vpos\" | \"VPOS\") ~identPart\n    wait\n      = (\"wait\" | \"WAIT\") ~identPart\n    wend\n      = (\"wend\" | \"WEND\") ~identPart\n    while\n      = (\"while\" | \"WHILE\") ~identPart\n    width\n      = (\"width\" | \"WIDTH\") ~identPart\n    window\n      = (\"window\" | \"WINDOW\") ~identPart\n    write\n      = (\"write\" | \"WRITE\") ~identPart\n    xor\n      = (\"xor\" | \"XOR\") ~identPart\n    xpos\n      = (\"xpos\" | \"XPOS\") ~identPart\n    ypos\n      = (\"ypos\" | \"YPOS\") ~identPart\n    zone\n      = (\"zone\" | \"ZONE\") ~identPart\n\n    ident (an identifier)\n      = ~keyword identName (\"%\" | \"!\")?\n\n    fnIdent\n      = fn space* ~keyword identName (\"%\" | \"!\")?\n\n    rsxIdentName = letter identPart*\n\n    identName = identStart identPart*\n\n    identStart = letter\n\n    identPart = alnum | \".\"\n\n    variable = ident\n\n    strIdent\n      = ~keyword identName \"$\"\n\n    strFnIdent\n      = fn space* ~keyword identName \"$\"\n\n    binaryDigit = \"0\"..\"1\"\n\n    dataUnquoted = (~(eol | \",\" | \":\" | \"'\") any)*\n\n    exponentPart = (\"e\" | \"E\") signedDecimal\n\n    decimalValue  (decimal number)\n      = digit* \".\" digit+ exponentPart* -- fract\n      | digit+            exponentPart* -- whole\n\n    hexValue\n      = \"&\" hexDigit+\n\n    binaryValue\n      = caseInsensitive<\"&x\"> binaryDigit+\n\n    number  (a number)\n      = decimalValue\n      | hexValue\n      | binaryValue\n\n    signedDecimal\n      = (\"+\" | \"-\")? decimalValue\n\n    partToEol\n      = (~eol any)*\n\n    stringDelimiter = \"\\\\\"\"\n\n    string\n      = stringDelimiter (~(stringDelimiter | eol) any)* (stringDelimiter | &eol)\n\n    label = digit+\n\n    space := \" \" | \"\\t\"\n\n    eol (end of line)\n      = \"\\\\n\"\n    }\n  `,\n\n  strictGrammar:\n    `strictGrammar <: basicGrammar {\n    abs\n      := \"ABS\" ~identPart\n    after\n      := \"AFTER\" ~identPart\n    and\n      := \"AND\" ~identPart\n    asc\n      := \"ASC\" ~identPart\n    atn\n      := \"ATN\" ~identPart\n    auto\n      := \"AUTO\" ~identPart\n    binS\n      := \"BIN$\" ~identPart\n    border\n      := \"BORDER\" ~identPart\n    break\n      := \"BREAK\" ~identPart\n    call\n      := \"CALL\" ~identPart\n    cat\n      := \"CAT\" ~identPart\n    chain\n      := \"CHAIN\" ~identPart\n    chrS\n      := \"CHR$\" ~identPart\n    cint\n      := \"CINT\" ~identPart\n    clear\n      := \"CLEAR\" ~identPart\n    clg\n      := \"CLG\" ~identPart\n    closein\n      := \"CLOSEIN\" ~identPart\n    closeout\n      := \"CLOSEOUT\" ~identPart\n    cls\n      := \"CLS\" ~identPart\n    cont\n      := \"CONT\" ~identPart\n    copychrS\n      := \"COPYCHR$\" ~identPart\n    cos\n      := \"COS\" ~identPart\n    creal\n      := \"CREAL\" ~identPart\n    cursor\n      := \"CURSOR\" ~identPart\n    data\n      := \"DATA\" ~identPart\n    decS\n      := \"DEC$\" ~identPart\n    def\n      := \"DEF\" ~identPart\n    defint\n      := \"DEFINT\" ~identPart\n    defreal\n      := \"DEFREAL\" ~identPart\n    defstr\n      := \"DEFSTR\" ~identPart\n    deg\n      := \"DEG\" ~identPart\n    delete\n      := \"DELETE\" ~identPart\n    derr\n      := \"DERR\" ~identPart\n    di\n      := \"DI\" ~identPart\n    dim\n      := \"DIM\" ~identPart\n    draw\n      := \"DRAW\" ~identPart\n    drawr\n      := \"DRAWR\" ~identPart\n    edit\n      := \"EDIT\" ~identPart\n    ei\n      := \"EI\" ~identPart\n    else\n      := \"ELSE\" ~identPart\n    endLit\n      := \"END\" ~identPart\n    ent\n      := \"ENT\" ~identPart\n    env\n      := \"ENV\" ~identPart\n    eof\n      := \"EOF\" ~identPart\n    erase\n      := \"ERASE\" ~identPart\n    erl\n      := \"ERL\" ~identPart\n    err\n      := \"ERR\" ~identPart\n    error\n      := \"ERROR\" ~identPart\n    every\n      := \"EVERY\" ~identPart\n    exp\n      := \"EXP\" ~identPart\n    fill\n      := \"FILL\" ~identPart\n    fix\n      := \"FIX\" ~identPart\n    fn\n      := \"FN\"\n    for\n      := \"FOR\" ~identPart\n    frame\n      := \"FRAME\" ~identPart\n    fre\n      := \"FRE\" ~identPart\n    gosub\n      := \"GOSUB\" ~identPart\n    goto\n      := \"GOTO\" ~identPart\n    graphics\n      := \"GRAPHICS\" ~identPart\n    hexS\n      := \"HEX$\" ~identPart\n    himem\n      := \"HIMEM\" ~identPart\n    if\n      := \"IF\" ~identPart\n    ink\n      := \"INK\" ~identPart\n    inkey\n      := \"INKEY\" ~identPart\n    inkeyS\n      := \"INKEY$\" ~identPart\n    inp\n      := \"INP\" ~identPart\n    input\n      := \"INPUT\" ~identPart\n    instr\n      := \"INSTR\" ~identPart\n    int\n      := \"INT\" ~identPart\n    joy\n      := \"JOY\" ~identPart\n    key\n      := \"KEY\" ~identPart\n    leftS\n      := \"LEFT$\" ~identPart\n    len\n      := \"LEN\" ~identPart\n    let\n      := \"LET\" ~identPart\n    line\n      := \"LINE\" ~identPart\n    list\n      := \"LIST\" ~identPart\n    load\n      := \"LOAD\" ~identPart\n    locate\n      := \"LOCATE\" ~identPart\n    log\n      := \"LOG\" ~identPart\n    log10\n      := \"LOG10\" ~identPart\n    lowerS\n      := \"LOWER$\" ~identPart\n    mask\n      := \"MASK\" ~identPart\n    max\n      := \"MAX\" ~identPart\n    memory\n      := \"MEMORY\" ~identPart\n    merge\n      := \"MERGE\" ~identPart\n    midS\n      := \"MID$\" ~identPart\n    min\n      := \"MIN\" ~identPart\n    mod\n      := \"MOD\" ~identPart\n    mode\n      := \"MODE\" ~identPart\n    move\n      := \"MOVE\" ~identPart\n    mover\n      := \"MOVER\" ~identPart\n    new\n      := \"NEW\" ~identPart\n    next\n      := \"NEXT\" ~identPart\n    not\n      := \"NOT\" ~identPart\n    on\n      := \"ON\" ~identPart\n    openin\n      := \"OPENIN\" ~identPart\n    openout\n      := \"OPENOUT\" ~identPart\n    or\n      := \"OR\" ~identPart\n    origin\n      := \"ORIGIN\" ~identPart\n    out\n      := \"OUT\" ~identPart\n    paper\n      := \"PAPER\" ~identPart\n    peek\n      := \"PEEK\" ~identPart\n    pen\n      := \"PEN\" ~identPart\n    pi\n      := \"PI\" ~identPart\n    plot\n      := \"PLOT\" ~identPart\n    plotr\n      := \"PLOTR\" ~identPart\n    poke\n      := \"POKE\" ~identPart\n    pos\n      := \"POS\" ~identPart\n    print\n      := \"PRINT\" ~identPart\n    rad\n      := \"RAD\" ~identPart\n    randomize\n      := \"RANDOMIZE\" ~identPart\n    read\n      := \"READ\" ~identPart\n    release\n      := \"RELEASE\" ~identPart\n    rem\n      := \"REM\" ~identPart\n    remain\n      := \"REMAIN\" ~identPart\n    renum\n      := \"RENUM\" ~identPart\n    restore\n      := \"RESTORE\" ~identPart\n    resume\n      := \"RESUME\" ~identPart\n    return\n      := \"RETURN\" ~identPart\n    rightS\n      := \"RIGHT$\" ~identPart\n    rnd\n      := \"RND\" ~identPart\n    round\n      := \"ROUND\" ~identPart\n    run\n      := \"RUN\" ~identPart\n    save\n      := \"SAVE\" ~identPart\n    sgn\n      := \"SGN\" ~identPart\n    sin\n      := \"SIN\" ~identPart\n    sound\n      := \"SOUND\" ~identPart\n    spaceS\n      := \"SPACE$\" ~identPart\n    spc\n      := \"SPC\" ~identPart\n    speed\n      := \"SPEED\" ~identPart\n    sq\n      := \"SQ\" ~identPart\n    sqr\n      := \"SQR\" ~identPart\n    step\n      := \"STEP\" ~identPart\n    stop\n      := \"STOP\" ~identPart\n    strS\n      := \"STR$\" ~identPart\n    stringS\n      := \"STRING$\" ~identPart\n    swap\n      := \"SWAP\" ~identPart\n    symbol\n      := \"SYMBOL\" ~identPart\n    tab\n      := \"TAB\" ~identPart\n    tag\n      := \"TAG\" ~identPart\n    tagoff\n      := \"TAGOFF\" ~identPart\n    tan\n      := \"TAN\" ~identPart\n    test\n      := \"TEST\" ~identPart\n    testr\n      := \"TESTR\" ~identPart\n    then\n      := \"THEN\" ~identPart\n    time\n      := \"TIME\" ~identPart\n    to\n      := \"TO\" ~identPart\n    troff\n      := \"TROFF\" ~identPart\n    tron\n      := \"TRON\" ~identPart\n    unt\n      := \"UNT\" ~identPart\n    upperS\n      := \"UPPER$\" ~identPart\n    using\n      := \"USING\" ~identPart\n    val\n      := \"VAL\" ~identPart\n    vpos\n      := \"VPOS\" ~identPart\n    wait\n      := \"WAIT\" ~identPart\n    wend\n      := \"WEND\" ~identPart\n    while\n      := \"WHILE\" ~identPart\n    width\n      := \"WIDTH\" ~identPart\n    window\n      := \"WINDOW\" ~identPart\n    write\n      := \"WRITE\" ~identPart\n    xor\n      := \"XOR\" ~identPart\n    xpos\n      := \"XPOS\" ~identPart\n    ypos\n      := \"YPOS\" ~identPart\n    zone\n      := \"ZONE\" ~identPart\n\n    identStart := lower\n\n    rsxIdentName := upper (upper | digit | \".\")*\n}\n  `\n};\n","import type { DefinedLabelEntryType, UsedLabelEntryType } from \"./Interfaces\";\n\nexport class SemanticsHelper {\n    private lineIndex = 0;\n    private indent = 0;\n    private readonly compileMessages: string[] = [];\n    private readonly variables: Record<string, number> = {};\n    private readonly definedLabels: DefinedLabelEntryType[] = [];\n    private readonly usedLabels: Record<string, Record<string, UsedLabelEntryType>> = {};\n    private readonly dataList: (string | number)[] = [];\n    private dataIndex = 0;\n    private readonly restoreMap: Record<string, number> = {};\n    private static readonly reJsKeyword = /^(arguments|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/;\n    private readonly instrMap: Record<string, number> = {};\n    private isDeg = false;\n    private isDefContext = false;\n\n    public addCompileMessage(message: string): void {\n        this.compileMessages.push(message);\n    }\n\n    public getCompileMessages(): string[] {\n        return this.compileMessages;\n    }\n\n    public getDeg(): boolean {\n        return this.isDeg;\n    }\n\n    public setDeg(isDeg: boolean): void {\n        this.isDeg = isDeg;\n    }\n\n    public addIndent(num: number): number {\n        this.indent += num;\n        return this.indent;\n    }\n\n    public setIndent(indent: number): void {\n        this.indent = indent;\n    }\n\n    public getIndent(): number {\n        return this.indent;\n    }\n\n    public getIndentStr(): string {\n        if (this.indent < 0) {\n            console.error(\"getIndentStr: lineIndex=\", this.lineIndex, \", indent=\", this.indent);\n            return \"\";\n        }\n        return \" \".repeat(this.indent);\n    }\n\n    public addDataIndex(count: number): number {\n        return this.dataIndex += count;\n    }\n\n    public getDataIndex(): number {\n        return this.dataIndex;\n    }\n\n    public addDefinedLabel(label: string, line: number): void {\n        this.definedLabels.push({\n            label,\n            first: line,\n            last: -1,\n            dataIndex: -1\n        });\n    }\n\n    public getDefinedLabels(): DefinedLabelEntryType[] {\n        return this.definedLabels;\n    }\n\n    public addUsedLabel(label: string, type: string): void {\n        if (!this.usedLabels[type]) {\n            this.usedLabels[type] = {};\n        }\n        const usedLabelsForType = this.usedLabels[type];\n        usedLabelsForType[label] = usedLabelsForType[label] || {\n            count: 0\n        };\n        usedLabelsForType[label].count = (usedLabelsForType[label].count || 0) + 1;\n    }\n\n    public getUsedLabels(): Record<string, Record<string, UsedLabelEntryType>> {\n        return this.usedLabels;\n    }\n\n    public getInstrMap(): Record<string, number> {\n        return this.instrMap;\n    }\n\n    public addInstr(name: string): number {\n        this.instrMap[name] = (this.instrMap[name] || 0) + 1;\n        return this.instrMap[name];\n    }\n\n    public getVariables(): string[] {\n        return Object.keys(this.variables);\n    }\n\n    public getVariable(name: string): string {\n        name = name.toLowerCase();\n        const matches = name.match(/\\/\\* not supported: [%|!] \\*\\//);\n        if (matches) {\n            name = name.substring(0,matches.index);\n        }\n\n        if (SemanticsHelper.reJsKeyword.test(name)) {\n            name = `_${name}`;\n        }\n\n        if (!this.isDefContext) {\n            this.variables[name] = (this.variables[name] || 0) + 1;\n        }\n        return name + (matches ? matches[0] : \"\");\n    }\n\n    public setDefContext(isDef: boolean): void {\n        this.isDefContext = isDef;\n    }\n\n    private static deleteAllItems(items: Record<string, unknown>): void {\n        for (const name in items) {\n            delete items[name];\n        }\n    }\n\n    public incrementLineIndex(): number {\n        this.lineIndex += 1;\n        return this.lineIndex;\n    }\n\n    public getRestoreMap(): Record<string, number> {\n        return this.restoreMap;\n    }\n\n    public addRestoreLabel(label: string): void {\n        this.restoreMap[label] = -1;\n    }\n\n    public getDataList(): (string | number)[] {\n        return this.dataList;\n    }\n\n    public resetParser(): void {\n        this.lineIndex = 0;\n        this.indent = 0;\n        this.compileMessages.length = 0;\n        SemanticsHelper.deleteAllItems(this.variables);\n        this.definedLabels.length = 0;\n        SemanticsHelper.deleteAllItems(this.usedLabels);\n        this.dataList.length = 0;\n        this.dataIndex = 0;\n        SemanticsHelper.deleteAllItems(this.restoreMap);\n        SemanticsHelper.deleteAllItems(this.instrMap);\n        this.isDeg = false;\n        this.isDefContext = false;\n    }\n}\n","import type { ActionDict, Node } from \"ohm-js\";\nimport type { IVm, DefinedLabelEntryType, ISemantics, SnippetDataType, UsedLabelEntryType } from \"./Interfaces\";\nimport { SemanticsHelper } from \"./SemanticsHelper\";\n\ntype RecursiveArray<T> = T | RecursiveArray<T>[];\n\nexport const CommaOpChar = \"\\u2192\"; // Unicode arrow right\nexport const TabOpChar = \"\\u21d2\"; // Unicode double arrow right\n\nconst codeSnippetsData = {\n\t_o: {} as IVm,\n\t_d: {} as SnippetDataType,\n\tcls() { }, // dummy\n\tasync frame() { }, // dummy\n\tprintText(_text: string) { }, // eslint-disable-line @typescript-eslint/no-unused-vars\n\tremain(timer: number) { return timer; }, // dummy\n\tresetText() { }, // dummy\n};\n\nfunction getCodeSnippets(snippetsData: typeof codeSnippetsData) {\n\tconst { _o, _d, cls, frame, printText, remain, resetText } = snippetsData;\n\n\t// We grab functions as Strings from the codeSnippets object so we need function names.\n\tconst codeSnippets = {\n\t\tresetText: function resetText() {\n\t\t\tObject.assign(_d, {\n\t\t\t\toutput: \"\",\n\t\t\t\tpos: 0,\n\t\t\t\ttag: false,\n\t\t\t\tvpos: 0,\n\t\t\t\tzone: 13\n\t\t\t});\n\t\t},\n\t\tafter: function after(timeout: number, timer: number, fn: () => void) {\n\t\t\tremain(timer);\n\t\t\t_d.timerMap[timer] = setTimeout(() => fn(), timeout * 20);\n\t\t},\n\t\tbin$: function bin$(num: number, pad: number = 0): string {\n\t\t\treturn num.toString(2).toUpperCase().padStart(pad, \"0\");\n\t\t},\n\t\tcls: function cls() {\n\t\t\tresetText();\n\t\t\t_o.cls();\n\t\t},\n\t\tdec$: function dec$(num: number, format: string) {\n\t\t\tconst decimals = (format.split(\".\")[1] || \"\").length;\n\t\t\tconst str = num.toFixed(decimals);\n\t\t\tconst pad = \" \".repeat(Math.max(0, format.length - str.length));\n\t\t\treturn pad + str;\n\t\t},\n\t\tdim: function dim(dims: number[], value: string | number = 0) {\n\t\t\tconst createRecursiveArray = (depth: number): RecursiveArray<string | number> => {\n\t\t\t\tconst length = dims[depth] + 1;\n\t\t\t\tconst array: RecursiveArray<string | number> = new Array(length);\n\t\t\t\tdepth += 1;\n\t\t\t\tif (depth < dims.length) {\n\t\t\t\t\tfor (let i = 0; i < length; i += 1) {\n\t\t\t\t\t\tarray[i] = createRecursiveArray(depth);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tarray.fill(value);\n\t\t\t\t}\n\t\t\t\treturn array;\n\t\t\t};\n\t\t\treturn createRecursiveArray(0);\n\t\t},\n\t\tdim1: function dim1(dim: number, value: string | number = 0) {\n\t\t\treturn new Array(dim + 1).fill(value);\n\t\t},\n\t\tdraw: function draw(x: number, y: number, pen?: number) {\n\t\t\t_o.drawMovePlot(\"L\", x, y, pen);\n\t\t},\n\t\tdrawr: function drawr(x: number, y: number, pen?: number) {\n\t\t\t_o.drawMovePlot(\"l\", x, y, pen);\n\t\t},\n\t\tend: function end() {\n\t\t\t_o.flush();\n\t\t\treturn \"end\";\n\t\t},\n\t\tevery: function every(timeout: number, timer: number, fn: () => void) {\n\t\t\tremain(timer);\n\t\t\t_d.timerMap[timer] = setInterval(() => fn(), timeout * 20);\n\t\t},\n\t\tframe: async function frame() {\n\t\t\t_o.flush();\n\t\t\tif (_o.getEscape()) {\n\t\t\t\tthrow new Error(\"INFO: Program stopped\");\n\t\t\t}\n\t\t\treturn new Promise<void>(resolve => setTimeout(() => resolve(), Date.now() % 50));\n\t\t},\n\t\tgraphicsPen: function graphicsPen(num: number) {\n\t\t\t_o.graphicsPen(num);\n\t\t},\n\t\thex$: function hex$(num: number, pad?: number) {\n\t\t\treturn num.toString(16).toUpperCase().padStart(pad || 0, \"0\");\n\t\t},\n\t\tink: function ink(num: number, col: number) {\n\t\t\t_o.ink(num, col);\n\t\t},\n\t\tinkey$: async function inkey$() {\n\t\t\tawait frame();\n\t\t\treturn await _o.inkey$();\n\t\t},\n\t\tinput: async function input(msg: string, isNum: boolean) {\n\t\t\tconst input = await _o.input(msg);\n\t\t\tif (input === null) {\n\t\t\t\tthrow new Error(\"INFO: Input canceled\");\n\t\t\t} else if (isNum && isNaN(Number(input))) {\n\t\t\t\tthrow new Error(\"Invalid number input\");\n\t\t\t} else {\n\t\t\t\treturn isNum ? Number(input) : input;\n\t\t\t}\n\t\t},\n\t\tinstr: function instr(str: string, find: string, len: number) {\n\t\t\treturn str.indexOf(find, len !== undefined ? len - 1 : len) + 1;\n\t\t},\n\t\tleft$: function left$(str: string, num: number) {\n\t\t\treturn str.slice(0, num);\n\t\t},\n\t\tmid$: function mid$(str: string, pos: number, len?: number) {\n\t\t\treturn str.substr(pos - 1, len);\n\t\t},\n\t\tmid$Assign: function mid$Assign(s: string, start: number, newString: string, len?: number) {\n\t\t\tstart -= 1;\n\t\t\tlen = Math.min(len ?? newString.length, newString.length, s.length - start);\n\t\t\treturn s.substring(0, start) + newString.substring(0, len) + s.substring(start + len);\n\t\t},\n\t\tmode: function mode(num: number) {\n\t\t\t_o.mode(num);\n\t\t\tcls();\n\t\t},\n\t\tmove: function move(x: number, y: number, pen?: number) {\n\t\t\t_o.drawMovePlot(\"M\", x, y, pen);\n\t\t},\n\t\tmover: function mover(x: number, y: number, pen?: number) {\n\t\t\t_o.drawMovePlot(\"m\", x, y, pen);\n\t\t},\n\t\torigin: function origin(x: number, y: number) {\n\t\t\t_o.origin(x, y);\n\t\t},\n\t\tpaper: function paper(n: number) {\n\t\t\t_d.output += _o.getColorForPen(n, true);\n\t\t},\n\t\tpen: function pen(n: number) {\n\t\t\t_d.output += _o.getColorForPen(n);\n\t\t},\n\t\tplot: function plot(x: number, y: number, pen?: number) {\n\t\t\t_o.drawMovePlot(\"P\", x, y, pen);\n\t\t},\n\t\tplotr: function plotr(x: number, y: number, pen?: number) {\n\t\t\t_o.drawMovePlot(\"p\", x, y, pen);\n\t\t},\n\t\tpos: function pos() {\n\t\t\treturn _d.pos + 1;\n\t\t},\n\t\tprintText: function printText(text: string) {\n\t\t\t_d.output += _o.escapeText(text);\n\t\t\tconst lines = text.split(\"\\n\");\n\t\t\tif (lines.length > 1) {\n\t\t\t\t_d.vpos += lines.length - 1;\n\t\t\t\t_d.pos = lines[lines.length - 1].length;\n\t\t\t} else {\n\t\t\t\t_d.pos += text.length;\n\t\t\t}\n\t\t},\n\t\tprint: function print(...args: (string | number)[]) {\n\t\t\tconst formatNumber = (arg: number) => (arg >= 0 ? ` ${arg} ` : `${arg} `);\n\t\t\tconst text = args.map((arg) => (typeof arg === \"number\") ? formatNumber(arg) : arg).join(\"\");\n\t\t\tif (_d.tag) {\n\t\t\t\treturn _o.printGraphicsText(_o.escapeText(text, true));\n\t\t\t}\n\t\t\tprintText(text);\n\t\t},\n\t\t// printTab: print with commaOp or tabOp\n\t\t// For graphics output the text position does not change, so we can output all at once.\n\t\tprintTab: function printTab(...args: (string | number)[]) {\n\t\t\tconst formatNumber = (arg: number) => (arg >= 0 ? ` ${arg} ` : `${arg} `);\n\t\t\tconst strArgs = args.map((arg) => (typeof arg === \"number\") ? formatNumber(arg) : arg);\n\t\t\tconst formatCommaOrTab = (str: string) => {\n\t\t\t\tif (str === CommaOpChar) {\n\t\t\t\t\treturn \" \".repeat(_d.zone - (_d.pos % _d.zone));\n\t\t\t\t} else if (str.charAt(0) === TabOpChar) {\n\t\t\t\t\tconst tabSize = Number(str.substring(1));\n\t\t\t\t\treturn \" \".repeat(tabSize - 1 - _d.pos);\n\t\t\t\t}\n\t\t\t\treturn str;\n\t\t\t};\n\t\t\tif (_d.tag) {\n\t\t\t\treturn _o.printGraphicsText(_o.escapeText(strArgs.map(arg => formatCommaOrTab(arg)).join(\"\"), true));\n\t\t\t}\n\t\t\tfor (const str of strArgs) {\n\t\t\t\tprintText(formatCommaOrTab(str));\n\t\t\t}\n\t\t},\n\t\tread: function read() {\n\t\t\treturn _d.data[_d.dataPtr++];\n\t\t},\n\t\t// remain: the return value is not really the remaining time\n\t\tremain: function remain(timer: number) {\n\t\t\tconst value = _d.timerMap[timer];\n\t\t\tif (value !== undefined) {\n\t\t\t\tclearTimeout(value);\n\t\t\t\tclearInterval(value);\n\t\t\t\tdelete _d.timerMap[timer];\n\t\t\t}\n\t\t\treturn value;\n\t\t},\n\t\trestore: function restore(label: string) {\n\t\t\t_d.dataPtr = _d.restoreMap[label];\n\t\t},\n\t\tright$: function right$(str: string, num: number) {\n\t\t\treturn str.substring(str.length - num);\n\t\t},\n\t\tround: function round(num: number, dec: number) {\n\t\t\treturn Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n\t\t},\n\t\trsxCall: async function rsxCall(cmd: string, ...args: (string | number)[]) {\n\t\t\treturn _o.rsx(cmd, args);\n\t\t},\n\t\tstop: function stop() {\n\t\t\t_o.flush();\n\t\t\treturn \"stop\";\n\t\t},\n\t\tstr$: function str$(num: number) {\n\t\t\treturn num >= 0 ? ` ${num}` : String(num);\n\t\t},\n\t\ttag: function tag(active: boolean) {\n\t\t\t_d.tag = active;\n\t\t},\n\t\ttime: function time() {\n\t\t\treturn ((Date.now() - _d.startTime) * 3 / 10) | 0;\n\t\t},\n\t\tval: function val(str: string) {\n\t\t\treturn Number(str.replace(\"&x\", \"0b\").replace(\"&\", \"0x\"));\n\t\t},\n\t\tvpos: function vpos() {\n\t\t\treturn _d.vpos + 1;\n\t\t},\n\t\twrite: function write(...args: (string | number)[]) {\n\t\t\tconst text = args.map((arg) => (typeof arg === \"string\") ? `\"${arg}\"` : `${arg}`).join(\",\") + \"\\n\";\n\t\t\tif (_d.tag) {\n\t\t\t\treturn _o.printGraphicsText(_o.escapeText(text, true));\n\t\t\t}\n\t\t\tprintText(text);\n\t\t},\n\t\txpos: function xpos() {\n\t\t\treturn _o.xpos();\n\t\t},\n\t\typos: function ypos() {\n\t\t\treturn _o.ypos();\n\t\t},\n\t\tzone: function zone(num: number) {\n\t\t\t_d.zone = num;\n\t\t},\n\t};\n\treturn codeSnippets;\n}\n\nfunction trimIndent(code: string): string {\n\tconst lines = code.split(\"\\n\");\n\tconst lastLine = lines[lines.length - 1];\n\n\tconst match = lastLine.match(/^(\\s+)}$/);\n\tif (match) {\n\t\tconst indent = match[1];\n\t\tconst trimmedLines = lines.map((line) => line.startsWith(indent) ? line.slice(indent.length) : line);\n\t\treturn trimmedLines.join(\"\\n\");\n\t}\n\treturn code;\n}\n\nfunction evalChildren(children: Node[]): string[] {\n\treturn children.map(child => child.eval());\n}\n\nfunction evalOptionalArg(arg: Node): string {\n\tconst argEval = arg.child(0)?.eval();\n\treturn argEval !== undefined ? `, ${argEval}` : \"\";\n}\n\nfunction createComparisonExpression(a: Node, op: string, b: Node): string {\n\treturn `-(${a.eval()} ${op} ${b.eval()})`;\n}\n\nfunction getSemanticsActions(semanticsHelper: SemanticsHelper) {\n\tconst adaptIdentName = (str: string) => str.replace(/\\./g, \"_\");\n\n\tconst drawMovePlot = (lit: Node, x: Node, _comma1: Node, y: Node, _comma2: Node, pen: Node, _comma3: Node, mode: Node) => {\n\t\tconst command = lit.sourceString.toLowerCase();\n\t\tsemanticsHelper.addInstr(command);\n\t\tconst modeStr = mode.child(0) ? notSupported(mode.child(0)) : \"\";\n\t\treturn `${command}(${x.eval()}, ${y.eval()}${evalOptionalArg(pen)}${modeStr})`;\n\t};\n\n\tconst cosSinTan = (lit: Node, _open: Node, num: Node, _close: Node) => { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst func = lit.sourceString.toLowerCase();\n\t\treturn semanticsHelper.getDeg() ? `Math.${func}((${num.eval()}) * Math.PI / 180)` : `Math.${func}(${num.eval()})`;\n\t};\n\n\tconst loopBlock = (startNode: Node, content: Node, separator: Node, endNode: Node) => {\n\t\tconst startStr = startNode.eval();\n\t\tconst contentStr = evalChildren(content.children).join(';');\n\t\tconst endStr = endNode.eval();\n\n\t\tlet separatorStr = separator.eval();\n\t\tif (contentStr && !contentStr.endsWith(\"}\")) {\n\t\t\tseparatorStr = \";\" + separatorStr;\n\t\t}\n\t\treturn `${startStr}${contentStr}${separatorStr}${endStr}`;\n\t};\n\n\tconst uncommentNotSupported = (str: string) => {\n\t\tconst regExpNotSupp = new RegExp(\"/\\\\* not supported: (.*) \\\\*/\");\n\t\tif (regExpNotSupp.test(str)) {\n\t\t\treturn str.replace(regExpNotSupp, \"$1\");\n\t\t}\n\t\treturn str;\n\t};\n\n\tconst evalAnyFn = (arg: Node): string => {\n\t\tif (arg.isIteration()) {\n\t\t\treturn arg.children.map(evalAnyFn).join(\",\");\n\t\t} else if (arg.isLexical() || arg.isTerminal()) {\n\t\t\treturn arg.sourceString;\n\t\t}\n\t\tconst argStr = arg.eval() as string;\n\t\treturn uncommentNotSupported(argStr);\n\t};\n\n\tconst notSupported = (str: Node, ...args: Node[]) => {\n\t\tconst name = evalAnyFn(str);\n\n\t\tconst argList = args.map(evalAnyFn);\n\t\tconst argStr = argList.length ? ` ${argList.join(\" \")}` : \"\";\n\n\t\tconst message = str.source.getLineAndColumnMessage();\n\t\tsemanticsHelper.addCompileMessage(`WARNING: Not supported: ${message}`);\n\n\t\treturn `/* not supported: ${name}${uncommentNotSupported(argStr)} */`;\n\t};\n\n\tfunction processSubroutines(lineList: string[], definedLabels: DefinedLabelEntryType[]): string[] {\n\t\tconst usedLabels = semanticsHelper.getUsedLabels();\n\t\tconst gosubLabels = usedLabels[\"gosub\"] || {};\n\n\t\tconst awaitLabels: string[] = [];\n\t\tlet subroutineStart: DefinedLabelEntryType | undefined;\n\t\tfor (const label of definedLabels) {\n\t\t\tif (gosubLabels[label.label]) {\n\t\t\t\tsubroutineStart = label;\n\t\t\t}\n\n\t\t\tif (subroutineStart && label.last >= 0) {\n\t\t\t\tconst first = subroutineStart.first;\n\t\t\t\tconst indent = lineList[first].search(/\\S|$/);\n\t\t\t\tconst indentStr = \" \".repeat(indent);\n\n\t\t\t\tlet hasAwait = false;\n\t\t\t\tfor (let i = first; i <= label.last; i += 1) {\n\t\t\t\t\tif (lineList[i].includes(\"await \")) {\n\t\t\t\t\t\thasAwait = true; // quick check\n\t\t\t\t\t}\n\t\t\t\t\tlineList[i] = \"  \" + lineList[i]; // indent\n\t\t\t\t\tlineList[i] = lineList[i].replace(/\\n/g, \"\\n  \");\n\t\t\t\t}\n\n\t\t\t\tconst asyncStr = hasAwait ? \"async \" : \"\";\n\t\t\t\tlineList[first] = `${indentStr}${asyncStr}function _${subroutineStart.label}() {${indentStr}\\n` + lineList[first];\n\t\t\t\tlineList[label.last] = lineList[label.last].replace(`${indentStr}  return;`, `${indentStr}}`); // end of subroutine: replace \"return\" by \"}\" (can also be on same line)\n\n\t\t\t\tif (hasAwait) {\n\t\t\t\t\tawaitLabels.push(subroutineStart.label);\n\t\t\t\t}\n\t\t\t\tsubroutineStart = undefined;\n\t\t\t}\n\t\t}\n\t\treturn awaitLabels;\n\t}\n\n\tconst semantics = {\n\t\tProgram(lines: Node) {\n\t\t\tconst lineList = evalChildren(lines.children);\n\t\t\tconst variableList = semanticsHelper.getVariables();\n\t\t\tconst variableDeclarations = variableList.length ? \"let \" + variableList.map((v) => v.endsWith(\"$\") ? `${v} = \"\"` : `${v} = 0`).join(\", \") + \";\" : \"\";\n\n\t\t\tconst definedLabels = semanticsHelper.getDefinedLabels();\n\t\t\tconst awaitLabels = processSubroutines(lineList, definedLabels);\n\n\t\t\tconst instrMap = semanticsHelper.getInstrMap();\n\t\t\tsemanticsHelper.addInstr(\"resetText\");\n\t\t\tconst dataList = semanticsHelper.getDataList();\n\n\t\t\t// Prepare data definition snippet if needed\n\t\t\tlet dataListSnippet = \"\";\n\t\t\tif (dataList.length) {\n\t\t\t\tconst restoreMap = semanticsHelper.getRestoreMap();\n\n\t\t\t\tfor (const label of definedLabels) {\n\t\t\t\t\tif (restoreMap[label.label] === -1) {\n\t\t\t\t\t\trestoreMap[label.label] = label.dataIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const key of Object.keys(restoreMap)) {\n\t\t\t\t\tif (restoreMap[key] < 0) {\n\t\t\t\t\t\trestoreMap[key] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdataListSnippet = `\nfunction _defineData() {\n\t_d.data = [\n${dataList.join(\",\\n\")}\n\t];\n\t_d.restoreMap = ${JSON.stringify(restoreMap)};\n\t_d.dataPtr = 0;\n}\n`;\n\t\t\t}\n\n\t\t\tconst codeSnippets = getCodeSnippets(codeSnippetsData);\n\n\t\t\tconst librarySnippet = Object.keys(codeSnippets)\n\t\t\t\t.filter(key => instrMap[key])\n\t\t\t\t.map(key => trimIndent(String(codeSnippets[key as keyof typeof codeSnippets])))\n\t\t\t\t.join('\\n');\n\n\t\t\tconst needsAsync = Object.keys(codeSnippets).some(key =>\n\t\t\t\tinstrMap[key] && trimIndent(String(codeSnippets[key as keyof typeof codeSnippets])).startsWith(\"async \")\n\t\t\t);\n\n\t\t\tconst needsTimerMap = instrMap[\"after\"] || instrMap[\"every\"] || instrMap[\"remain\"];\n\t\t\tconst needsCommaOrTabOpChar = instrMap[\"printTab\"];\n\n\t\t\t// Assemble code lines\n\t\t\tconst codeLines = [\n\t\t\t\tneedsAsync ? 'return async function() {' : '',\n\t\t\t\t'\"use strict\";',\n\t\t\t\t`const _d = _o.getSnippetData(); resetText();${dataList.length ? ' _defineData();' : ''}`,\n\t\t\t\tinstrMap[\"time\"] ? '_d.startTime = Date.now();' : '',\n\t\t\t\tneedsTimerMap ? '_d.timerMap = {};' : '',\n\t\t\t\tneedsCommaOrTabOpChar ? `const CommaOpChar = \"${CommaOpChar}\", TabOpChar = \"${TabOpChar}\";` : '',\n\t\t\t\tvariableDeclarations,\n\t\t\t\t...lineList.filter(line => line.trimEnd() !== ''),\n\t\t\t\t!instrMap[\"end\"] ? `return _o.flush();` : \"\",\n\t\t\t\tdataListSnippet,\n\t\t\t\t'// library',\n\t\t\t\tlibrarySnippet,\n\t\t\t\tneedsAsync ? '}();' : ''\n\t\t\t].filter(Boolean);\n\n\t\t\tlet lineStr = codeLines.join('\\n');\n\t\t\tif (awaitLabels.length) {\n\t\t\t\tfor (const label of awaitLabels) {\n\t\t\t\t\tconst regEx = new RegExp(`_${label}\\\\(\\\\);`, \"g\");\n\t\t\t\t\tlineStr = lineStr.replace(regEx, `await _${label}();`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn lineStr;\n\t\t},\n\n\t\tLabelRange(start: Node, minus: Node, end: Node) {\n\t\t\treturn [start, minus, end].map((node) => evalAnyFn(node)).join(\"\");\n\t\t},\n\n\t\tLetterRange(start: Node, minus: Node, end: Node) {\n\t\t\treturn [start, minus, end].map((node) => evalAnyFn(node)).join(\"\");\n\t\t},\n\n\t\tLine(label: Node, stmts: Node, comment: Node, _eol: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst labelString = label.sourceString;\n\n\t\t\tconst currentLineIndex = semanticsHelper.incrementLineIndex() - 1;\n\n\t\t\tif (labelString) {\n\t\t\t\tsemanticsHelper.addDefinedLabel(labelString, currentLineIndex);\n\t\t\t}\n\n\t\t\tconst lineStr = stmts.eval();\n\n\t\t\tif (lineStr === \"return\") {\n\t\t\t\tconst definedLabels = semanticsHelper.getDefinedLabels();\n\t\t\t\tif (definedLabels.length) {\n\t\t\t\t\tconst lastLabelItem = definedLabels[definedLabels.length - 1];\n\t\t\t\t\tlastLabelItem.last = currentLineIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst commentStr = comment.sourceString ? `; //${comment.sourceString.substring(1)}` : \"\";\n\t\t\tconst semi = lineStr === \"\" || lineStr.endsWith(\"{\") || lineStr.endsWith(\"}\") || lineStr.startsWith(\"//\") || commentStr ? \"\" : \";\";\n\n\t\t\tconst indentStr = semanticsHelper.getIndentStr();\n\n\t\t\treturn indentStr + lineStr + commentStr + semi;\n\t\t},\n\n\t\tStatements(stmt: Node, _stmtSep: Node, stmts: Node) {\n\t\t\t// separate statements, use \";\", if the last stmt does not end with \"{\"\n\t\t\tconst statements = [stmt.eval(), ...evalChildren(stmts.children)];\n\t\t\treturn statements.reduce((acc, current) => acc.endsWith(\"{\") ? `${acc} ${current}` : `${acc}; ${current}`);\n\t\t},\n\n\t\tArrayAssign(ident: Node, _op: Node, e: Node): string {\n\t\t\treturn `${ident.eval()} = ${e.eval()}`;\n\t\t},\n\n\t\tAssign(ident: Node, _op: Node, e: Node): string {\n\t\t\tconst variableName = ident.eval();\n\t\t\tconst resolvedVariableName = semanticsHelper.getVariable(variableName);\n\t\t\tconst value = e.eval();\n\t\t\treturn `${resolvedVariableName} = ${value}`;\n\t\t},\n\n\t\tLoopBlockContent(separator: Node, stmts: Node) {\n\t\t\tconst separatorStr = separator.eval();\n\t\t\tconst lineStr = stmts.eval();\n\n\t\t\treturn `${separatorStr}${lineStr}`;\n\t\t},\n\n\t\tLoopBlockSeparator_colon(_colonLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"\";\n\t\t},\n\n\t\tLoopBlockSeparator_newline(comment: Node, eol: Node, _label: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// labels in blocks are ignored\n\t\t\tconst commentStr = comment.sourceString ? ` //${comment.sourceString.substring(1)}` : \"\";\n\t\t\tconst eolStr = eol.sourceString + semanticsHelper.getIndentStr();\n\t\t\treturn `${commentStr}${eolStr}`;\n\t\t},\n\n\t\tAbs(_absLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.abs(${e.eval()})`;\n\t\t},\n\n\t\tAddressOf(op: Node, ident: Node) {\n\t\t\treturn notSupported(op, ident) + \"0\";\n\t\t},\n\n\t\tAfter(_afterLit: Node, e1: Node, _comma1: Node, e2: Node, _gosubLit: Node, label: Node) {\n\t\t\tsemanticsHelper.addInstr(\"after\");\n\t\t\tsemanticsHelper.addInstr(\"remain\"); // we also call \"remain\"\n\t\t\tconst timeout = e1.eval();\n\t\t\tconst timer = e2.child(0)?.eval() || 0;\n\t\t\tconst labelString = label.sourceString;\n\t\t\tsemanticsHelper.addUsedLabel(labelString, \"gosub\");\n\t\t\treturn `after(${timeout}, ${timer}, _${labelString})`;\n\t\t},\n\n\t\tAsc(_ascLit: Node, _open: Node, str: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${str.eval()}).charCodeAt(0)`;\n\t\t},\n\n\t\tAtn(_atnLit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn semanticsHelper.getDeg() ? `(Math.atan(${num.eval()}) * 180 / Math.PI)` : `Math.atan(${num.eval()})`;\n\t\t},\n\n\t\tAuto(lit: Node, label: Node, comma: Node, step: Node) {\n\t\t\treturn notSupported(lit, label, comma, step);\n\t\t},\n\n\t\tBinS(_binLit: Node, _open: Node, num: Node, _comma: Node, pad: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"bin$\");\n\t\t\treturn `bin$(${num.eval()}${evalOptionalArg(pad)})`;\n\t\t},\n\n\t\tBorder(lit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2);\n\t\t},\n\n\t\tCall(lit: Node, args: Node) {\n\t\t\treturn notSupported(lit, args.asIteration());\n\t\t},\n\n\t\tCat: notSupported,\n\n\t\tChain(lit: Node, merge: Node, file: Node, comma: Node, num: Node, comma2: Node, del: Node) {\n\t\t\treturn notSupported(lit, merge, file, comma, num, comma2, del);\n\t\t},\n\n\t\tChrS(_chrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `String.fromCharCode(${e.eval()})`;\n\t\t},\n\n\t\tCint(_cintLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.round(${e.eval()})`;\n\t\t},\n\n\t\tClear: notSupported,\n\n\t\tClear_input(lit: Node, inputLit: Node) {\n\t\t\treturn notSupported(lit, inputLit);\n\t\t},\n\n\t\tClg(lit: Node, num: Node) {\n\t\t\treturn notSupported(lit, num);\n\t\t},\n\n\t\tClosein: notSupported,\n\n\t\tCloseout: notSupported,\n\n\t\tCls(_clsLit: Node, stream: Node) {\n\t\t\tsemanticsHelper.addInstr(\"cls\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\treturn `cls(${streamStr})`;\n\t\t},\n\n\t\tComment(_commentLit: Node, remain: Node) {\n\t\t\treturn `//${remain.sourceString}`;\n\t\t},\n\n\t\tCont: notSupported,\n\n\t\tCopychrS(lit: Node, open: Node, stream: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, stream, close) + '\" \"';\n\t\t},\n\n\t\tCos: cosSinTan,\n\n\t\tCreal(_lit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${num.eval()}`;\n\t\t},\n\n\t\tCursor(lit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2);\n\t\t},\n\n\t\tData(_datalit: Node, args: Node) {\n\t\t\tconst argList = evalChildren(args.asIteration().children);\n\n\t\t\tconst definedLabels = semanticsHelper.getDefinedLabels();\n\n\t\t\tif (definedLabels.length) {\n\t\t\t\tconst currentLabel = definedLabels[definedLabels.length - 1];\n\t\t\t\tif (currentLabel.dataIndex === -1) {\n\t\t\t\t\tconst dataIndex = semanticsHelper.getDataIndex();\n\t\t\t\t\tcurrentLabel.dataIndex = dataIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst dataList = semanticsHelper.getDataList();\n\t\t\tdataList.push(argList.join(\", \"));\n\t\t\tsemanticsHelper.addDataIndex(argList.length);\n\t\t\treturn \"\";\n\t\t},\n\n\t\tDecS(_decLit: Node, _open: Node, num: Node, _comma: Node, format: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"dec$\");\n\t\t\treturn `dec$(${num.eval()}, ${format.eval()})`;\n\t\t},\n\n\t\tDef(_defLit: Node, _fnLit: Node, assign: Node) {\n\t\t\treturn `${assign.eval()}`;\n\t\t},\n\n\t\tDefArgs(_open: Node, arrayIdents: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argList = evalChildren(arrayIdents.asIteration().children);\n\n\t\t\treturn `(${argList.join(\", \")})`;\n\t\t},\n\n\t\tDefAssign(ident: Node, args: Node, _equal: Node, e: Node) {\n\t\t\tconst fnIdent = semanticsHelper.getVariable(`fn${ident.eval()}`);\n\n\t\t\tsemanticsHelper.setDefContext(true); // do not create global variables in this context\n\t\t\tconst argStr = evalChildren(args.children).join(\", \") || \"()\";\n\n\t\t\tconst defBody = e.eval();\n\t\t\tsemanticsHelper.setDefContext(false);\n\n\t\t\treturn `${fnIdent} = ${argStr} => ${defBody}`;\n\t\t},\n\n\t\tDefint(lit: Node, letterRange: Node) {\n\t\t\treturn notSupported(lit, letterRange.asIteration());\n\t\t},\n\n\t\tDefreal(lit: Node, letterRange: Node) {\n\t\t\treturn notSupported(lit, letterRange.asIteration());\n\t\t},\n\n\t\tDefstr(lit: Node, letterRange: Node) {\n\t\t\treturn notSupported(lit, letterRange.asIteration());\n\t\t},\n\n\t\tDeg(_degLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.setDeg(true);\n\t\t\treturn `/* deg active */`;\n\t\t},\n\n\t\tDelete(lit: Node, labelRange: Node) {\n\t\t\treturn notSupported(lit, labelRange);\n\t\t},\n\n\t\tDerr(lit: Node) {\n\t\t\treturn notSupported(lit) + \"0\";\n\t\t},\n\n\t\tDi: notSupported,\n\n\t\tDim(_dimLit: Node, dimArgs: Node) {\n\t\t\tconst argumentList: string[] = evalChildren(dimArgs.asIteration().children);\n\t\t\treturn argumentList.join(\"; \");\n\t\t},\n\n\t\tDraw: drawMovePlot,\n\n\t\tDrawr: drawMovePlot,\n\n\t\tEdit(lit: Node, label: Node) {\n\t\t\treturn notSupported(lit, label);\n\t\t},\n\n\t\tEi: notSupported,\n\n\t\tEnd(_endLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"end\");\n\t\t\treturn `return end()`;\n\t\t},\n\n\t\tEnt(lit: Node, nums: Node) { // TODO: separator\n\t\t\treturn notSupported(lit, nums.asIteration());\n\t\t},\n\n\t\tEnv(lit: Node, nums: Node) { // TODO: separator\n\t\t\treturn notSupported(lit, nums.asIteration());\n\t\t},\n\n\t\tEof(lit: Node) {\n\t\t\treturn notSupported(lit) + \"-1\";\n\t\t},\n\n\t\tErase(_eraseLit: Node, arrayIdents: Node) { // erase not really needed\n\t\t\tconst arrayIdentifiers: string[] = evalChildren(arrayIdents.asIteration().children);\n\t\t\tconst results: string[] = [];\n\n\t\t\tfor (const ident of arrayIdentifiers) {\n\t\t\t\tconst initValStr = ident.endsWith(\"$\") ? '\"\"' : '0';\n\t\t\t\tresults.push(`${ident} = ${initValStr}`);\n\t\t\t}\n\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tErl(lit: Node) {\n\t\t\treturn notSupported(lit) + \"0\";\n\t\t},\n\n\t\tErr(lit: Node) {\n\t\t\treturn notSupported(lit) + \"0\";\n\t\t},\n\n\t\tError(_errorLit: Node, e: Node) {\n\t\t\treturn `throw new Error(${e.eval()})`;\n\t\t},\n\n\t\tEvery(_everyLit: Node, e1: Node, _comma1: Node, e2: Node, _gosubLit: Node, label: Node) {\n\t\t\tsemanticsHelper.addInstr(\"every\");\n\t\t\tsemanticsHelper.addInstr(\"remain\"); // we also call this\n\t\t\tconst timeout = e1.eval();\n\t\t\tconst timer = e2.child(0)?.eval() || 0;\n\t\t\tconst labelString = label.sourceString;\n\t\t\tsemanticsHelper.addUsedLabel(labelString, \"gosub\");\n\t\t\treturn `every(${timeout}, ${timer}, _${labelString})`;\n\t\t},\n\n\t\tExp(_expLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.exp(${e.eval()})`;\n\t\t},\n\n\t\tFill(lit: Node, num: Node) {\n\t\t\treturn notSupported(lit, num);\n\t\t},\n\n\t\tFix(_fixLit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.trunc(${num.eval()})`;\n\t\t},\n\n\t\tFre(lit: Node, open: Node, e: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, e, close) + \"0\";\n\t\t},\n\n\t\tAnyFnArgs(_open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\treturn `(${argumentList.join(\", \")})`;\n\t\t},\n\n\n\t\tFnIdent(fnIdent: Node, args: Node) {\n\t\t\tconst argumentString = args.child(0)?.eval() || \"()\";\n\t\t\treturn `${fnIdent.eval()}${argumentString}`;\n\t\t},\n\n\t\tStrFnIdent(fnIdent: Node, args: Node) {\n\t\t\tconst argStr = args.child(0)?.eval() || \"()\";\n\t\t\treturn `${fnIdent.eval()}${argStr}`;\n\t\t},\n\n\t\tFor(_forLit: Node, variable: Node, _eqSign: Node, start: Node, _dirLit: Node, end: Node, _stepLit: Node, step: Node) {\n\t\t\tconst variableExpression = variable.eval();\n\t\t\tconst startExpression = start.eval();\n\t\t\tconst endExpression = end.eval();\n\t\t\tconst stepExpression = step.child(0)?.eval() || \"1\";\n\n\t\t\tconst stepAsNumber = Number(stepExpression);\n\n\t\t\tlet comparisonStatement = \"\";\n\t\t\tif (isNaN(stepAsNumber)) {\n\t\t\t\tcomparisonStatement = `${stepExpression} >= 0 ? ${variableExpression} <= ${endExpression} : ${variableExpression} >= ${endExpression}`;\n\t\t\t} else {\n\t\t\t\tcomparisonStatement = stepAsNumber >= 0 ? `${variableExpression} <= ${endExpression}` : `${variableExpression} >= ${endExpression}`;\n\t\t\t}\n\n\t\t\tsemanticsHelper.addIndent(2);\n\t\t\tconst result = `for (${variableExpression} = ${startExpression}; ${comparisonStatement}; ${variableExpression} += ${stepExpression}) {`;\n\n\t\t\treturn result;\n\t\t},\n\n\t\tForNextBlock: loopBlock,\n\n\t\tFrame(_frameLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"frame\");\n\t\t\treturn `await frame()`;\n\t\t},\n\n\t\tGosub(_gosubLit: Node, e: Node) {\n\t\t\tconst labelString = e.sourceString;\n\t\t\tsemanticsHelper.addUsedLabel(labelString, \"gosub\");\n\n\t\t\treturn `_${labelString}()`;\n\t\t},\n\n\t\tGoto(lit: Node, label: Node) {\n\t\t\treturn notSupported(lit, label);\n\t\t},\n\n\t\tGraphicsPaper(lit: Node, paperLit: Node, num: Node) {\n\t\t\treturn notSupported(lit, paperLit, num);\n\t\t},\n\n\t\tGraphicsPen(_graphicsLit: Node, _penLit: Node, num: Node, _comma: Node, mode: Node) {\n\t\t\tsemanticsHelper.addInstr(\"graphicsPen\");\n\t\t\tconst modeStr = mode.child(0) ? notSupported(mode.child(0)) : \"\";\n\t\t\treturn `graphicsPen(${num.eval()}${modeStr})`;\n\t\t},\n\n\t\tHexS(_hexLit: Node, _open: Node, num: Node, _comma: Node, pad: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"hex$\");\n\t\t\treturn `hex$(${num.eval()}${evalOptionalArg(pad)})`;\n\t\t},\n\n\t\tHimem(lit: Node) {\n\t\t\treturn notSupported(lit) + \"0\";\n\t\t},\n\n\t\tIfExp_label(label: Node) {\n\t\t\treturn notSupported(label);\n\t\t},\n\n\t\tIfThen_then(_thenLit: Node, thenStat: Node) {\n\t\t\tconst thenStatement = thenStat.eval();\n\t\t\treturn thenStatement;\n\t\t},\n\n\t\tIf(_iflit: Node, condExp: Node, thenStat: Node, elseLit: Node, elseStat: Node) {\n\t\t\tconst initialIndent = semanticsHelper.getIndentStr();\n\t\t\tsemanticsHelper.addIndent(2);\n\t\t\tconst increasedIndent = semanticsHelper.getIndentStr();\n\n\t\t\tconst condition = condExp.eval();\n\t\t\tconst thenStatement = thenStat.eval();\n\n\t\t\tlet result = `if (${condition}) {\\n${increasedIndent}${thenStatement}\\n${initialIndent}}`; // put in newlines to also allow line comments\n\t\t\tif (elseLit.sourceString) {\n\t\t\t\tconst elseStatement = evalChildren(elseStat.children).join('; ');\n\t\t\t\tresult += ` else {\\n${increasedIndent}${elseStatement}\\n${initialIndent}}`;\n\t\t\t}\n\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn result;\n\t\t},\n\n\t\tInk(_inkLit: Node, num: Node, _comma: Node, col: Node, _comma2: Node, col2: Node) {\n\t\t\tsemanticsHelper.addInstr(\"ink\");\n\t\t\tconst col2Str = col2.child(0) ? notSupported(col2.child(0)) : \"\";\n\t\t\treturn `ink(${num.eval()}, ${col.eval()}${col2Str})`;\n\t\t},\n\n\t\tInkey(lit: Node, open: Node, num: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, close) + \"0\";\n\t\t},\n\n\t\tInkeyS(_inkeySLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"inkey$\");\n\t\t\tsemanticsHelper.addInstr(\"frame\");\n\t\t\treturn `await inkey$()`;\n\t\t},\n\n\t\tInp(lit: Node, open: Node, num: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, close) + \"0\";\n\t\t},\n\n\t\tInput(_inputLit: Node, stream: Node, _comma: Node, _semi: Node, message: Node, _commaSemi: Node, ids: Node) {\n\t\t\tsemanticsHelper.addInstr(\"input\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\n\t\t\tconst messageString = message.sourceString.replace(/\\s*[;,]$/, \"\") || '\"\"';\n\t\t\tconst identifiers = evalChildren(ids.asIteration().children);\n\t\t\tconst isNumberString = identifiers[0].includes(\"$\") ? \"\" : \", true\"; // TODO\n\t\t\tif (identifiers.length > 1) {\n\t\t\t\tconst identifierStr = `[${identifiers.join(\", \")}]`;\n\t\t\t\treturn `${identifierStr} = (await input(${streamStr}${messageString}${isNumberString})).split(\",\")`;\n\t\t\t}\n\n\t\t\treturn `${identifiers[0]} = await input(${streamStr}${messageString}${isNumberString})`;\n\t\t},\n\n\t\tInstr_noLen(_instrLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"instr\");\n\t\t\treturn `instr(${e1.eval()}, ${e2.eval()})`;\n\t\t},\n\n\t\tInstr_len(_instrLit: Node, _open: Node, len: Node, _comma1: Node, e1: Node, _comma2: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"instr\");\n\t\t\treturn `instr(${e1.eval()}, ${e2.eval()}, ${len.eval()})`;\n\t\t},\n\n\t\tInt(_intLit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.floor(${num.eval()})`;\n\t\t},\n\n\t\tJoy(lit: Node, open: Node, num: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, close) + \"0\";\n\t\t},\n\n\t\tKey_key(lit: Node, num: Node, comma: Node, str: Node) {\n\t\t\treturn notSupported(lit, num, comma, str);\n\t\t},\n\n\t\tKey_def(lit: Node, defLit: Node, nums: Node) {\n\t\t\treturn notSupported(lit, defLit, nums.asIteration());\n\t\t},\n\n\t\tLeftS(_leftLit: Node, _open: Node, pos: Node, _comma: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"left$\");\n\t\t\treturn `left$(${pos.eval()}, ${len.eval()})`;\n\t\t},\n\n\t\tLen(_lenLit: Node, _open: Node, str: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${str.eval()}).length`;\n\t\t},\n\n\t\tLet(_letLit: Node, assign: Node) {\n\t\t\treturn `${assign.eval()}`;\n\t\t},\n\n\t\tLineInput(lit: Node, inputLit: Node, stream: Node, comma: Node, message: Node, semi: Node, e: Node) {\n\t\t\treturn notSupported(lit, inputLit, stream, comma, message, semi, e);\n\t\t},\n\n\t\tList(lit: Node, labelRange: Node, comma: Node, stream: Node) {\n\t\t\treturn notSupported(lit, labelRange, comma, stream);\n\t\t},\n\n\t\tLoad(lit: Node, file: Node, comma: Node, address: Node) {\n\t\t\treturn notSupported(lit, file, comma, address);\n\t\t},\n\n\t\tLocate(lit: Node, stream: Node, comma: Node, x: Node, comma2: Node, y: Node) {\n\t\t\treturn notSupported(lit, stream, comma, x, comma2, y);\n\t\t},\n\n\t\tLog(_logLit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.log(${num.eval()})`;\n\t\t},\n\n\t\tLog10(_log10Lit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.log10(${num.eval()})`;\n\t\t},\n\n\t\tLowerS(_lowerLit: Node, _open: Node, str: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${str.eval()}).toLowerCase()`;\n\t\t},\n\n\t\tMask(lit: Node, num: Node, comma: Node, num2: Node, comma2: Node, num3: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2, comma2, num3);\n\t\t},\n\n\t\tMax(_maxLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.max(${evalChildren(args.asIteration().children)})`;\n\t\t},\n\n\t\tMemory(lit: Node, num: Node) {\n\t\t\treturn notSupported(lit, num);\n\t\t},\n\n\t\tMerge(lit: Node, file: Node) {\n\t\t\treturn notSupported(lit, file);\n\t\t},\n\n\t\tMidS(_midLit: Node, _open: Node, str: Node, _comma1: Node, start: Node, _comma2: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"mid$\");\n\t\t\treturn `mid$(${str.eval()}, ${start.eval()}${evalOptionalArg(len)})`;\n\t\t},\n\n\t\tMidSAssign(_midLit: Node, _open: Node, ident: Node, _comma1: Node, start: Node, _comma2: Node, len: Node, _close: Node, _op: Node, newStr: Node) {\n\t\t\tsemanticsHelper.addInstr(\"mid$Assign\");\n\t\t\tconst variableName = ident.eval();\n\t\t\treturn `${variableName} = mid$Assign(${variableName}, ${start.eval()}, ${newStr.eval()}${evalOptionalArg(len)})`;\n\t\t},\n\n\t\tMin(_minLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.min(${evalChildren(args.asIteration().children)})`;\n\t\t},\n\n\t\tMode(_modeLit: Node, num: Node) {\n\t\t\tsemanticsHelper.addInstr(\"mode\");\n\t\t\tsemanticsHelper.addInstr(\"cls\");\n\t\t\treturn `mode(${num.eval()})`;\n\t\t},\n\n\t\tMove: drawMovePlot,\n\n\t\tMover: drawMovePlot,\n\n\t\tNew: notSupported,\n\n\t\tNext(_nextLit: Node, _variable: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// we cannot parse NEXT with multiple variables, if we want to match FOR and NEXT\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn `}`;\n\t\t},\n\n\t\tOn_numGosub(_onLit: Node, e1: Node, _gosubLit: Node, args: Node) {\n\t\t\tconst index = e1.eval();\n\t\t\tconst argumentList = args.asIteration().children.map(child => child.sourceString);\n\n\t\t\tfor (let i = 0; i < argumentList.length; i += 1) {\n\t\t\t\tconst labelString = argumentList[i];\n\t\t\t\tsemanticsHelper.addUsedLabel(labelString, \"gosub\");\n\t\t\t}\n\n\t\t\treturn `([${argumentList.map((label) => `_${label}`).join(\",\")}]?.[${index} - 1] || (() => undefined))()`; // 1-based index\n\t\t},\n\n\t\tOn_numGoto(lit: Node, num: Node, gotoLit: Node, labels: Node) {\n\t\t\treturn notSupported(lit, num, gotoLit, labels.asIteration());\n\t\t},\n\n\t\tOn_breakCont(lit: Node, breakLit: Node, contLit: Node) {\n\t\t\treturn notSupported(lit, breakLit, contLit);\n\t\t},\n\n\t\tOn_breakGosub(lit: Node, breakLit: Node, gosubLit: Node, label: Node) {\n\t\t\treturn notSupported(lit, breakLit, gosubLit, label);\n\t\t},\n\n\t\tOn_breakStop(lit: Node, breakLit: Node, stopLit: Node) {\n\t\t\treturn notSupported(lit, breakLit, stopLit);\n\t\t},\n\n\t\tOn_errorGoto(lit: Node, errorLit: Node, gotoLit: Node, label: Node) {\n\t\t\treturn notSupported(lit, errorLit, gotoLit, label);\n\t\t},\n\n\t\tOpenin(lit: Node, file: Node) {\n\t\t\treturn notSupported(lit, file);\n\t\t},\n\n\t\tOpenout(lit: Node, file: Node) {\n\t\t\treturn notSupported(lit, file);\n\t\t},\n\n\t\tOrigin(_originLit: Node, x: Node, _comma: Node, y: Node, _comma2: Node, win: Node,) {\n\t\t\tsemanticsHelper.addInstr(\"origin\");\n\t\t\tconst winStr = win.child(0) ? notSupported(win.child(0)) : \"\";\n\t\t\treturn `origin(${x.eval()}, ${y.eval()}${winStr})`;\n\t\t},\n\n\t\tOut(lit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2);\n\t\t},\n\n\t\tPaper(_paperLit: Node, stream: Node, _comma: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"paper\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\treturn `paper(${streamStr}${e.eval()})`;\n\t\t},\n\n\t\tPeek(lit: Node, open: Node, num: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, close) + \"0\";\n\t\t},\n\n\t\tPen(_penLit: Node, stream: Node, _comma: Node, e: Node, _comma2: Node, e2: Node) {\n\t\t\tsemanticsHelper.addInstr(\"pen\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\tconst modeStr = e2.child(0) ? notSupported(e2.child(0)) : \"\";\n\t\t\treturn `pen(${streamStr}${e.eval()}${modeStr})`;\n\t\t},\n\n\t\tPi(_piLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"Math.PI\";\n\t\t},\n\n\t\tPlot: drawMovePlot,\n\n\t\tPlotr: drawMovePlot,\n\n\t\tPoke(lit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2);\n\t\t},\n\n\t\tPos(lit: Node, open: Node, streamLit: Node, num: Node, close: Node) {\n\t\t\tif (num.eval() !== \"0\") {\n\t\t\t\treturn notSupported(lit, open, streamLit, num, close) + \"0\";\n\t\t\t}\n\t\t\tsemanticsHelper.addInstr(\"pos\");\n\t\t\treturn \"pos()\";\n\t\t},\n\n\t\tPrintArg_strCmp(_cmp: Node, args: Node) {\n\t\t\tconst parameterString = args.children[0].eval();\n\t\t\treturn parameterString;\n\t\t},\n\n\t\tPrintArg_usingNum(_printLit: Node, format: Node, _semi: Node, numArgs: Node) {\n\t\t\tsemanticsHelper.addInstr(\"dec$\");\n\t\t\tconst formatString = format.eval();\n\t\t\tconst argumentList = evalChildren(numArgs.asIteration().children);\n\t\t\tconst parameterString = argumentList.map((arg) => `dec$(${arg}, ${formatString})`).join(', ');\n\t\t\treturn parameterString;\n\t\t},\n\n\t\tPrintArg_commaOp(_comma: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\"${CommaOpChar}\"`; // Unicode arrow right\n\t\t},\n\n\t\tStreamArg(streamLit: Node, stream: Node) {\n\t\t\treturn notSupported(streamLit, stream) + \"\";\n\t\t},\n\n\t\tPrint(_printLit: Node, stream: Node, _comma: Node, args: Node, semi: Node) {\n\t\t\tsemanticsHelper.addInstr(\"printText\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\tconst parameterString = argumentList.join(', ') || \"\";\n\n\t\t\tconst hasCommaOrTab = parameterString.includes(`\"${CommaOpChar}`) || parameterString.includes(`\"${TabOpChar}`);\n\t\t\tif (hasCommaOrTab) {\n\t\t\t\tsemanticsHelper.addInstr(\"printTab\");\n\t\t\t} else {\n\t\t\t\tsemanticsHelper.addInstr(\"print\");\n\t\t\t}\n\n\t\t\tlet newlineString = \"\";\n\t\t\tif (!semi.sourceString) {\n\t\t\t\tnewlineString = parameterString ? `, \"\\\\n\"` : `\"\\\\n\"`;\n\t\t\t}\n\t\t\treturn `${hasCommaOrTab ? \"printTab\" : \"print\"}(${streamStr}${parameterString}${newlineString})`;\n\t\t},\n\n\t\tRad(_radLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.setDeg(false);\n\t\t\treturn `/* rad active */`;\n\t\t},\n\n\t\tRandomize(lit: Node, num: Node) {\n\t\t\treturn notSupported(lit, num);\n\t\t},\n\n\t\tRead(_readlit: Node, args: Node) {\n\t\t\tsemanticsHelper.addInstr(\"read\");\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\tconst results = argumentList.map(identifier => `${identifier} = read()`);\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tRelease(lit: Node, num: Node) {\n\t\t\treturn notSupported(lit, num);\n\t\t},\n\n\t\tRem(_remLit: Node, remain: Node) {\n\t\t\treturn `// ${remain.sourceString}`;\n\t\t},\n\n\t\tRemain(_remainLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"remain\");\n\t\t\treturn `remain(${e.eval()})`;\n\t\t},\n\n\t\tRenum(lit: Node, num: Node, comma: Node, num2: Node, comma2: Node, num3: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2, comma2, num3);\n\t\t},\n\n\t\tRestore(_restoreLit: Node, e: Node) {\n\t\t\tconst labelString = e.sourceString || \"0\";\n\t\t\tsemanticsHelper.addRestoreLabel(labelString);\n\t\t\tsemanticsHelper.addUsedLabel(labelString, \"restore\");\n\n\t\t\tsemanticsHelper.addInstr(\"restore\");\n\t\t\treturn `restore(${labelString})`;\n\t\t},\n\n\t\tResume(lit: Node, labelOrNext: Node) {\n\t\t\treturn notSupported(lit, labelOrNext);\n\t\t},\n\n\t\tReturn(_returnLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"return\";\n\t\t},\n\n\t\tRightS(_rightLit: Node, _open: Node, str: Node, _comma: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"right$\");\n\t\t\treturn `right$(${str.eval()}, ${len.eval()})`;\n\t\t},\n\n\t\tRnd(_rndLit: Node, _open: Node, _e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// args are ignored\n\t\t\treturn `Math.random()`;\n\t\t},\n\n\t\tRound(_roundLit: Node, _open: Node, num: Node, _comma: Node, decimals: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst decimalPlaces = evalOptionalArg(decimals);\n\t\t\tif (decimalPlaces) {\n\t\t\t\tsemanticsHelper.addInstr(\"round\");\n\t\t\t\treturn `round(${num.eval()}${decimalPlaces})`;\n\t\t\t}\n\t\t\treturn `Math.round(${num.eval()})`; // common round without decimals places\n\t\t\t// A better way to avoid rounding errors: https://www.jacklmoore.com/notes/rounding-in-javascript\n\t\t},\n\n\t\tRsx(_rsxLit: Node, cmd: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"rsxCall\");\n\t\t\tconst cmdString = adaptIdentName(cmd.sourceString).toLowerCase();\n\t\t\tconst rsxArgs: string = e.child(0)?.eval() || \"\";\n\n\t\t\tif (rsxArgs === \"\") {\n\t\t\t\treturn `await rsxCall(\"${cmdString}\"${rsxArgs})`;\n\t\t\t}\n\t\t\t// need assign, not so nice to use <RSXFUNCTION>\" as separator\n\t\t\treturn rsxArgs.replace(\"<RSXFUNCTION>\", `await rsxCall(\"${cmdString}\"`) + \")\";\n\t\t},\n\n\t\tRsxAddressOf(_adressOfLit: Node, ident: Node) {\n\t\t\tconst identString = ident.eval().toLowerCase();\n\t\t\treturn `@${identString}`;\n\t\t},\n\n\t\tRsxArgs(_comma: Node, args: Node) {\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\n\t\t\t// Remove \"@\" prefix from arguments\n\t\t\tconst argumentListNoAddr = argumentList.map(arg =>\n\t\t\t\targ.startsWith(\"@\") ? arg.substring(1) : arg\n\t\t\t);\n\n\t\t\t// Extract assignments and remove \"@\" prefix\n\t\t\tconst assignList = argumentList.map(arg => arg.startsWith(\"@\") ? arg.substring(1) : undefined);\n\n\t\t\t// Remove trailing undefined values\n\t\t\twhile (assignList.length && assignList[assignList.length - 1] === undefined) {\n\t\t\t\tassignList.pop();\n\t\t\t}\n\n\t\t\t// Build the result string\n\t\t\tconst assignments = assignList.length ? `[${assignList.join(\", \")}] = ` : \"\";\n\t\t\tconst result = `${assignments}<RSXFUNCTION>, ${argumentListNoAddr.join(\", \")}`;\n\n\t\t\treturn result;\n\t\t},\n\n\t\tRun(lit: Node, labelOrFileOrNoting: Node) {\n\t\t\treturn notSupported(lit, labelOrFileOrNoting);\n\t\t},\n\n\t\tSave(lit: Node, file: Node, comma: Node, type: Node, comma2: Node, num: Node, comma3: Node, num2: Node, comma4: Node, num3: Node) {\n\t\t\treturn notSupported(lit, file, comma, type, comma2, num, comma3, num2, comma4, num3);\n\t\t},\n\n\t\tSgn(_sgnLit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sign(${num.eval()})`;\n\t\t},\n\n\t\tSin: cosSinTan,\n\n\t\tSound(lit: Node, args: Node) {\n\t\t\treturn notSupported(lit, args.asIteration());\n\t\t},\n\n\t\tSpaceS(_stringLit: Node, _open: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\" \".repeat(${len.eval()})`;\n\t\t},\n\n\t\tSpc(_lit: Node, _open: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\" \".repeat(${len.eval()})`;\n\t\t},\n\n\t\tSpeed_ink(lit: Node, inkLit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, inkLit, num, comma, num2);\n\t\t},\n\n\t\tSpeed_key(lit: Node, keyLit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, keyLit, num, comma, num2);\n\t\t},\n\n\t\tSpeed_write(lit: Node, writeLit: Node, num: Node) {\n\t\t\treturn notSupported(lit, writeLit, num);\n\t\t},\n\n\t\tSq(lit: Node, open: Node, num: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, close) + \"0\";\n\t\t},\n\n\t\tSqr(_sqrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sqrt(${e.eval()})`;\n\t\t},\n\n\t\tStop(_stopLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"stop\");\n\t\t\treturn `return stop()`;\n\t\t},\n\n\t\tStrS(_strLit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argument = num.eval();\n\n\t\t\tif (isNaN(Number(argument))) {\n\t\t\t\tsemanticsHelper.addInstr(\"str$\");\n\t\t\t\treturn `str$(${argument})`;\n\t\t\t}\n\t\t\t// simplify if we know at compile time that arg is a positive number\n\t\t\treturn argument >= 0 ? `(\" \" + String(${argument}))` : `String(${argument})`;\n\t\t},\n\n\t\tStringS_str(_stringLit: Node, _open: Node, len: Node, _commaLit: Node, chr: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// Note: we do not use charAt(0) to get just one char\n\t\t\treturn `(${chr.eval()}).repeat(${len.eval()})`;\n\t\t},\n\n\t\tStringS_num(_stringLit: Node, _open: Node, len: Node, _commaLit: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `String.fromCharCode(${num.eval()}).repeat(${len.eval()})`;\n\t\t},\n\n\t\tSymbol_def(lit: Node, args: Node) {\n\t\t\treturn notSupported(lit, args.asIteration());\n\t\t},\n\n\t\tSymbol_after(lit: Node, afterLit: Node, num: Node) {\n\t\t\treturn notSupported(lit, afterLit, num);\n\t\t},\n\n\t\tTab(_lit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\"${TabOpChar}${num.eval()}\"`; // Unicode double arrow right\n\t\t},\n\n\t\tTag(_tagLit: Node, stream: Node) {\n\t\t\tsemanticsHelper.addInstr(\"tag\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\treturn `tag(true${streamStr})`;\n\t\t},\n\n\t\tTagoff(_tagoffLit: Node, stream: Node) {\n\t\t\tsemanticsHelper.addInstr(\"tag\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\treturn `tag(false${streamStr})`;\n\t\t},\n\n\t\tTan: cosSinTan,\n\n\t\tTest(lit: Node, open: Node, num: Node, comma: Node, num2: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, comma, num2, close) + \"0\";\n\t\t},\n\n\t\tTestr(lit: Node, open: Node, num: Node, comma: Node, num2: Node, close: Node) {\n\t\t\treturn notSupported(lit, open, num, comma, num2, close) + \"0\";\n\t\t},\n\n\t\tTime(_timeLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"time\");\n\t\t\treturn `time()`;\n\t\t},\n\n\t\tTroff: notSupported,\n\n\t\tTron: notSupported,\n\n\t\tUnt(_lit: Node, _open: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${num.eval()}`;\n\t\t},\n\n\t\tUpperS(_upperLit: Node, _open: Node, str: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${str.eval()}).toUpperCase()`;\n\t\t},\n\n\t\tVal(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst numPattern = /^\"[\\\\+\\\\-]?\\d*\\.?\\d+(?:[Ee][\\\\+\\\\-]?\\d+)?\"$/;\n\t\t\tconst numStr = String(e.eval());\n\n\t\t\tif (numPattern.test(numStr)) {\n\t\t\t\treturn `Number(${numStr})`; // for non-hex/bin number strings we can use this simple version\n\t\t\t}\n\t\t\tsemanticsHelper.addInstr(\"val\");\n\t\t\treturn `val(${numStr})`;\n\t\t},\n\n\t\tVpos(lit: Node, open: Node, streamLit: Node, num: Node, close: Node) {\n\t\t\tif (num.eval() !== \"0\") {\n\t\t\t\treturn notSupported(lit, open, streamLit, num, close) + \"0\";\n\t\t\t}\n\t\t\tsemanticsHelper.addInstr(\"vpos\");\n\t\t\treturn \"vpos()\";\n\t\t},\n\n\t\tWait(lit: Node, num: Node, comma: Node, num2: Node, comma2: Node, num3: Node) {\n\t\t\treturn notSupported(lit, num, comma, num2, comma2, num3);\n\t\t},\n\n\t\tWend(_wendLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn '}';\n\t\t},\n\n\t\tWhile(_whileLit: Node, e: Node) {\n\t\t\tconst cond = e.eval();\n\t\t\tsemanticsHelper.addIndent(2);\n\t\t\treturn `while (${cond}) {`;\n\t\t},\n\n\t\tWhileWendBlock: loopBlock,\n\n\t\tWidth(lit: Node, num: Node,) {\n\t\t\treturn notSupported(lit, num);\n\t\t},\n\n\t\tWindow_def(lit: Node, stream: Node, comma0: Node, num: Node, comma: Node, num2: Node, comma2: Node, num3: Node, comma3: Node, num4: Node) {\n\t\t\treturn notSupported(lit, stream, comma0, num, comma, num2, comma2, num3, comma3, num4);\n\t\t},\n\n\t\tWindow_swap(lit: Node, swapLit: Node, num: Node, comma: Node, num2: Node) {\n\t\t\treturn notSupported(lit, swapLit, num, comma, num2);\n\t\t},\n\n\t\tWrite(_printLit: Node, stream: Node, _comma: Node, args: Node) {\n\t\t\tsemanticsHelper.addInstr(\"write\");\n\t\t\tsemanticsHelper.addInstr(\"printText\");\n\t\t\tconst streamStr = stream.child(0)?.eval() || \"\";\n\t\t\tconst parameterString = evalChildren(args.asIteration().children).join(', ');\n\t\t\treturn `write(${streamStr}${parameterString})`;\n\t\t},\n\n\t\tXpos(_xposLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"xpos\");\n\t\t\treturn `xpos()`;\n\t\t},\n\n\t\tYpos(_xposLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"ypos\");\n\t\t\treturn `ypos()`;\n\t\t},\n\n\t\tZone(_lit: Node, num: Node) {\n\t\t\tsemanticsHelper.addInstr(\"zone\");\n\t\t\treturn `zone(${num.eval()})`;\n\t\t},\n\n\t\tAndExp_and(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} & ${b.eval()}`;\n\t\t},\n\n\t\tNotExp_not(_op: Node, e: Node) {\n\t\t\treturn `~(${e.eval()})`;\n\t\t},\n\n\t\tOrExp_or(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} | ${b.eval()}`;\n\t\t},\n\n\t\tXorExp_xor(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} ^ ${b.eval()}`;\n\t\t},\n\n\n\t\tAddExp_minus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} - ${b.eval()}`;\n\t\t},\n\t\tAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} + ${b.eval()}`;\n\t\t},\n\n\t\tCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"===\", b);\n\t\t},\n\t\tCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \">=\", b);\n\t\t},\n\t\tCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \">\", b);\n\t\t},\n\t\tCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"<=\", b);\n\t\t},\n\t\tCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"<\", b);\n\t\t},\n\t\tCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"!==\", b);\n\t\t},\n\n\t\tDivExp_div(a: Node, _op: Node, b: Node) {\n\t\t\treturn `((${a.eval()} / ${b.eval()}) | 0)`;\n\t\t},\n\n\t\tExpExp_power(a: Node, _: Node, b: Node) {\n\t\t\treturn `Math.pow(${a.eval()}, ${b.eval()})`;\n\t\t},\n\n\t\tModExp_mod(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} % ${b.eval()}`;\n\t\t},\n\n\t\tMulExp_divide(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} / ${b.eval()}`;\n\t\t},\n\n\t\tMulExp_times(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} * ${b.eval()}`;\n\t\t},\n\n\t\tPriExp_neg(_op: Node, e: Node) {\n\t\t\treturn `-${e.eval()}`;\n\t\t},\n\t\tPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()})`;\n\t\t},\n\t\tPriExp_pos(_op: Node, e: Node) {\n\t\t\treturn `+${e.eval()}`;\n\t\t},\n\n\t\tStrAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} + ${b.eval()}`;\n\t\t},\n\t\tStrCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} === ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} >= ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} > ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} <= ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} < ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} !== ${b.eval()})`;\n\t\t},\n\n\t\tStrPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()})`;\n\t\t},\n\n\t\tArrayArgs(args: Node) {\n\t\t\treturn evalChildren(args.asIteration().children).join(\"][\");\n\t\t},\n\n\t\tArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${ident.eval()}[${e.eval()}]`;\n\t\t},\n\n\t\tDimArrayArgs(args: Node) {\n\t\t\treturn evalChildren(args.asIteration().children).join(\", \");\n\t\t},\n\n\t\tDimArrayIdent(ident: Node, _open: Node, indices: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst identStr = ident.eval();\n\t\t\tconst indicesStr = indices.eval();\n\t\t\tconst isMultiDimensional = indicesStr.includes(\",\"); // also for expressions containing comma\n\t\t\tconst valueStr = identStr.endsWith(\"$\") ? ', \"\"' : \"\";\n\n\t\t\tif (isMultiDimensional) { // one value (not detected for expressions containing comma)\n\t\t\t\tsemanticsHelper.addInstr(\"dim\");\n\t\t\t\treturn `${identStr} = dim([${indicesStr}]${valueStr})`;\n\t\t\t}\n\n\t\t\tsemanticsHelper.addInstr(\"dim1\");\n\t\t\treturn `${identStr} = dim1(${indicesStr}${valueStr})`;\n\t\t},\n\n\t\tStrArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${ident.eval()}[${e.eval()}]`;\n\t\t},\n\n\t\tdataUnquoted(data: Node) {\n\t\t\tconst str = data.sourceString;\n\t\t\tif (!isNaN(Number(str))) {\n\t\t\t\treturn str;\n\t\t\t}\n\t\t\treturn notSupported(data) + `\"${str}\"`;\n\t\t},\n\n\t\tdecimalValue(value: Node) {\n\t\t\tconst valueStr = value.sourceString.replace(/^(-?)(0+)(\\d)/, \"$1$3\"); // avoid octal numbers: remove leading zeros, but keep sign\n\t\t\tif (valueStr !== value.sourceString) {\n\t\t\t\tnotSupported(value);\n\t\t\t}\n\t\t\treturn valueStr;\n\t\t},\n\n\t\thexValue(_prefix: Node, value: Node) {\n\t\t\treturn `0x${value.sourceString}`;\n\t\t},\n\n\t\tbinaryValue(_prefix: Node, value: Node) {\n\t\t\treturn `0b${value.sourceString}`;\n\t\t},\n\n\t\tstring(_quote1: Node, e: Node, quote2: Node) {\n\t\t\tconst str = e.sourceString.replace(/\\\\/g, \"\\\\\\\\\"); // escape backslashes\n\t\t\tconst varStr = quote2.sourceString !== '\"' ? notSupported(quote2).replace(\"\\n\", \"eol\") : \"\";\n\t\t\treturn `\"${str}\"${varStr}`;\n\t\t},\n\n\t\tident(ident: Node, suffix: Node) {\n\t\t\tconst name = adaptIdentName(ident.sourceString);\n\t\t\tconst suffixStr = suffix.child(0)?.sourceString;\n\t\t\tif (suffixStr !== undefined) { // real or integer suffix\n\t\t\t\treturn semanticsHelper.getVariable(name) + notSupported(suffix);\n\t\t\t}\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tfnIdent(fn: Node, _space: Node, ident: Node, suffix: Node) {\n\t\t\tconst name = fn.sourceString + adaptIdentName(ident.sourceString);\n\t\t\tconst suffixStr = suffix.child(0)?.sourceString;\n\t\t\tif (suffixStr !== undefined) { // real or integer suffix\n\t\t\t\treturn semanticsHelper.getVariable(name) + notSupported(suffix);\n\t\t\t}\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tstrIdent(ident: Node, typeSuffix: Node) {\n\t\t\tconst name = adaptIdentName(ident.sourceString) + typeSuffix.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tstrFnIdent(fn: Node, _space: Node, ident: Node, typeSuffix: Node) {\n\t\t\tconst name = fn.sourceString + adaptIdentName(ident.sourceString) + typeSuffix.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t}\n\t};\n\treturn semantics;\n}\n\nexport class Semantics implements ISemantics {\n\tprivate readonly helper: SemanticsHelper;\n\n\tconstructor() {\n\t\tthis.helper = new SemanticsHelper();\n\t}\n\n\tpublic resetParser(): void {\n\t\tthis.helper.resetParser();\n\t}\n\n\tpublic getUsedLabels(): Record<string, Record<string, UsedLabelEntryType>> {\n\t\treturn this.helper.getUsedLabels();\n\t}\n\n\tpublic getSemanticsActions() {\n\t\treturn getSemanticsActions(this.helper);\n\t}\n\n\tpublic getSemanticsActionDict(): ActionDict<string> {\n\t\treturn this.getSemanticsActions() as ActionDict<string>;\n\t}\n\n\tpublic getHelper(): SemanticsHelper {\n\t\treturn this.helper;\n\t}\n\n\tpublic getCodeSnippets4Test(data: Partial<typeof codeSnippetsData>) {\n\t\treturn getCodeSnippets(data as typeof codeSnippetsData);\n\t}\n}\n","import type { ConfigEntryType, ConfigType, DatabaseMapType, DatabaseType, ExampleMapType, ExampleType, ICore, IVm, IVmAdmin } from \"./Interfaces\";\nimport { Parser } from \"./Parser\";\nimport { arithmetic } from \"./arithmetic\";\nimport { Semantics } from \"./Semantics\";\n\nfunction fnHereDoc(fn: () => void) {\n    return String(fn).replace(/^[^/]+\\/\\*\\S*/, \"\").replace(/\\*\\/[^/]+$/, \"\");\n}\n\nexport class Core implements ICore {\n    private readonly defaultConfig: ConfigType;\n    private readonly config: ConfigType;\n    private readonly semantics = new Semantics();\n    private readonly databaseMap: DatabaseMapType = {};\n    private arithmeticParser: Parser | undefined;\n\n    constructor(defaultConfig: ConfigType) {\n        this.defaultConfig = defaultConfig;\n        this.config = { ...defaultConfig };\n    }\n\n    private onCheckSyntax = async (_s: string) => \"\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    public getDefaultConfigMap(): ConfigType {\n        return this.defaultConfig;\n    }\n\n    public getConfigMap(): ConfigType {\n        return this.config;\n    }\n\n    public initDatabaseMap(): DatabaseMapType {\n        const databaseDirs = this.config.databaseDirs.split(\",\");\n\n        for (const source of databaseDirs) {\n            const parts = source.split(\"/\");\n            const key = parts[parts.length - 1];\n\n            this.databaseMap[key] = {\n                key,\n                source,\n                exampleMap: undefined\n            };\n        }\n        return this.databaseMap;\n    }\n\n    public getDatabaseMap(): DatabaseMapType {\n        return this.databaseMap;\n    }\n\n    public getDatabase(): DatabaseType {\n        return this.databaseMap[this.config.database];\n    }\n\n    public getExampleMap(): ExampleMapType {\n        const exampleMap = this.databaseMap[this.config.database].exampleMap;\n        if (!exampleMap) {\n            console.error(\"getExampleMap: Undefined exampleMap for database\", this.config.database);\n            return {};\n        }\n        return exampleMap;\n    }\n\n    public setExampleMap(exampleMap: ExampleMapType): void {\n        this.databaseMap[this.config.database].exampleMap = exampleMap;\n    }\n\n    public getExample(name: string): ExampleType {\n        const exampleMap = this.getExampleMap();\n        return exampleMap[name];\n    }\n\n    public setOnCheckSyntax(fn: (s: string) => Promise<string>): void {\n        this.onCheckSyntax = fn;\n    }\n\n    public compileScript(script: string): string {\n        if (!this.arithmeticParser) {\n            const semanticsActionDict = this.semantics.getSemanticsActionDict();\n            if (this.config.grammar === \"strict\") {\n                const basicParser = new Parser(arithmetic.basicGrammar, semanticsActionDict);\n                this.arithmeticParser = new Parser(arithmetic.strictGrammar, semanticsActionDict, basicParser);\n            } else {\n                this.arithmeticParser = new Parser(arithmetic.basicGrammar, semanticsActionDict);\n            }\n        }\n        this.semantics.resetParser();\n        return this.arithmeticParser.parseAndEval(script);\n    }\n\n    public async executeScript(compiledScript: string, vm: IVmAdmin): Promise<string> {\n        vm.reset();\n\n        if (compiledScript.startsWith(\"ERROR:\")) {\n            return \"ERROR\";\n        }\n\n        const syntaxError = await this.onCheckSyntax(compiledScript);\n        if (syntaxError) {\n            vm.cls();\n            return \"ERROR: \" + syntaxError;\n        }\n\n        let errorStr = \"\";\n        try {\n            const fnScript = new Function(\"_o\", compiledScript);\n            const result = await fnScript(vm as IVm);\n\n            if (this.config.debug > 0) {\n                console.debug(\"executeScript: \", result);\n            }\n            vm.flush();\n        } catch (error) {\n            const errorMsg = String(error).replace(\"Error: INFO: \", \"INFO: \");\n            if (this.config.debug > 0) {\n                console.log(\"DEBUG: executeScript: \", errorMsg);\n            }\n            if (errorMsg !== \"INFO: Program stopped\") {\n                errorStr += errorMsg;\n                if (error instanceof Error) {\n                    const anyErr = error as unknown as Record<string, number>;\n                    const lineNumber = anyErr.lineNumber; // only on FireFox\n                    const columnNumber = anyErr.columnNumber; // only on FireFox\n\n                    if (lineNumber || columnNumber) {\n                        const errLine = lineNumber - 2; // lineNumber -2 because of anonymous function added by new Function() constructor\n                        errorStr += ` (Line ${errLine}, column ${columnNumber})`;\n                    }\n                }\n            }\n        }\n\n        // remain for all timers\n        const snippetData = vm.getSnippetData();\n\n        const timerMap = snippetData.timerMap;\n        for (const timer in timerMap) {\n            if (timerMap[timer] !== undefined) {\n                const value = timerMap[timer];\n                clearTimeout(value);\n                clearInterval(value);\n                timerMap[timer] = undefined;\n            }\n        }\n\n        const compileMessages = this.semantics.getHelper().getCompileMessages();\n        const output = [snippetData.output, vm.escapeText(errorStr), vm.escapeText(compileMessages.join(\"\\n\"))].join(\"\\n\");\n        return output.trim();\n    }\n\n    public getSemantics() {\n        return this.semantics;\n    }\n\n    public addIndex = (dir: string, input: Record<string, ExampleType[]> | (() => void)): void => { // need property function because we need bound \"this\"\n        if (typeof input === \"function\") {\n            input = {\n                [dir]: JSON.parse(fnHereDoc(input).trim())\n            };\n        }\n\n        const exampleMap: ExampleMapType = {};\n        for (const value in input) {\n            const item = input[value] as ExampleType[];\n\n            for (let i = 0; i < item.length; i += 1) {\n                exampleMap[item[i].key] = item[i];\n            }\n        }\n        this.setExampleMap(exampleMap);\n    };\n\n    public addItem = (key: string, input: string | (() => void)): void => { // need property function because we need bound \"this\"\n        let inputString = typeof input !== \"string\" ? fnHereDoc(input) : input;\n        inputString = inputString.replace(/^\\n/, \"\").replace(/\\n$/, \"\"); // remove preceding and trailing newlines\n\n        if (!key) { // maybe \"\"\n            console.warn(\"addItem: no key!\");\n            key = \"unknown\";\n        }\n\n        const example = this.getExample(key);\n        if (example) {\n            example.script = inputString;\n        }\n    };\n\n    public parseArgs(args: string[], config: Record<string, ConfigEntryType>): Record<string, ConfigEntryType> {\n        for (const arg of args) {\n            const [name, ...valueParts] = arg.split(\"=\");\n            const nameType = typeof config[name];\n\n            let value: ConfigEntryType = valueParts.join(\"=\");\n            if (value !== undefined) {\n                if (nameType === \"boolean\") {\n                    value = value === \"true\";\n                } else if (nameType === \"number\") {\n                    value = Number(value);\n                }\n                config[name] = value;\n            }\n        }\n        return config;\n    }\n}\n","import { IVmRsxApi } from \"./Interfaces\";\n\ntype RsxMapType = Record<string, {\n    argTypes: string[];\n    fn: (args: (number | string)[]) => Promise<(number | string)[]> | void;\n}>;\n\nexport class BasicVmRsxHandler {\n    private core: IVmRsxApi; // Use the actual type if available (e.g., BasicVmCore)\n    private pitch: number = 1;\n    private fnOnSpeak: (text: string, pitch: number) => Promise<void> = () => Promise.resolve();\n\n    constructor(core: IVmRsxApi) {\n        this.core = core;\n    }\n\n    public reset() {\n        this.pitch = 1;\n    }\n\n    public setOnSpeak(fn: (text: string, pitch: number) => Promise<void>) {\n        this.fnOnSpeak = fn;\n    }\n\n    private getStrokeAndFillStr(fill: number): string {\n        const currGraphicsPen = this.core.getGraphicsPen();\n        const strokeStr = currGraphicsPen >= 0 ? ` stroke=\"${this.core.getRgbColorStringForPen(currGraphicsPen)}\"` : \"\";\n        const fillStr = fill >= 0 ? ` fill=\"${this.core.getRgbColorStringForPen(fill)}\"` : \"\";\n        return `${strokeStr}${fillStr}`;\n    }\n\n    private rsxArc = (args: (number | string)[]) => {\n        const [x, y, rx, ry, rotx, long, sweep, endx, endy, fill] = args.map((p) => Math.round(p as number));\n        const strokeAndFillStr = this.getStrokeAndFillStr(fill);\n        const svgPathCmd = `M${x} ${399 - y} A${rx} ${ry} ${rotx} ${long} ${sweep} ${endx} ${399 - endy}`;\n        this.core.addGraphicsElement(`<path d=\"${svgPathCmd}\"${strokeAndFillStr} />`);\n    }\n\n    private rsxCircle = (args: (number | string)[]) => {\n        const [cx, cy, r, fill] = args.map((p) => Math.round(p as number));\n        const strokeAndFillStr = this.getStrokeAndFillStr(fill);\n        this.core.addGraphicsElement(`<circle cx=\"${cx}\" cy=\"${399 - cy}\" r=\"${r}\"${strokeAndFillStr} />`);\n    }\n\n    private rsxDate = async (args: (number | string)[]) => {\n        const date = new Date();\n        const dayOfWeek = (date.getDay() + 1) % 7;\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear() % 100;\n        const dateStr = `${String(dayOfWeek).padStart(2, '0')} ${String(day).padStart(2, '0')} ${String(month).padStart(2, '0')} ${String(year).padStart(2, '0')}`;\n        args[0] = dateStr;\n        return Promise.resolve(args);\n    }\n\n    private rsxEllipse = (args: (number | string)[]) => {\n        const [cx, cy, rx, ry, fill] = args.map((p) => Math.round(p as number));\n        const strokeAndFillStr = this.getStrokeAndFillStr(fill);\n        this.core.addGraphicsElement(`<ellipse cx=\"${cx}\" cy=\"${399 - cy}\" rx=\"${rx}\" ry=\"${ry}\"${strokeAndFillStr} />`);\n    }\n\n    private rsxRect = (args: (number | string)[]) => {\n        const [x1, y1, x2, y2, fill] = args.map((p) => Math.round(p as number));\n        const x = Math.min(x1, x2);\n        const y = Math.max(y1, y2);\n        const width = Math.abs(x2 - x1);\n        const height = Math.abs(y2 - y1);\n        const strokeAndFillStr = this.getStrokeAndFillStr(fill);\n        this.core.addGraphicsElement(`<rect x=\"${x}\" y=\"${399 - y}\" width=\"${width}\" height=\"${height}\"${strokeAndFillStr} />`);\n    }\n\n    private rsxPitch = (args: (number | string)[]) => {\n        this.pitch = (args[0] as number) / 10;\n    }\n\n    private rsxSay = async (args: (number | string)[]) => {\n        const text = args[0] as string;\n        return this.fnOnSpeak(text, this.pitch).then(() => args);\n    }\n\n    private rsxTime = async (args: (number | string)[]) => {\n        const date = new Date();\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const seconds = date.getSeconds();\n        const timeStr = `${String(hours).padStart(2, '0')} ${String(minutes).padStart(2, '0')} ${String(seconds).padStart(2, '0')}`;\n        args[0] = timeStr;\n        return Promise.resolve(args);\n    }\n\n    private rsxMap: RsxMapType = {\n        arc: {\n            argTypes: [\"number\", \"number\", \"number\", \"number\", \"number\", \"number\", \"number\", \"number\", \"number\", \"number?\"],\n            fn: this.rsxArc\n        },\n        circle: {\n            argTypes: [\"number\", \"number\", \"number\", \"number?\"],\n            fn: this.rsxCircle\n        },\n        date: {\n            argTypes: [\"string\"],\n            fn: this.rsxDate\n        },\n        ellipse: {\n            argTypes: [\"number\", \"number\", \"number\", \"number\", \"number?\"],\n            fn: this.rsxEllipse\n        },\n        pitch: {\n            argTypes: [\"number\"],\n            fn: this.rsxPitch\n        },\n        rect: {\n            argTypes: [\"number\", \"number\", \"number\", \"number\", \"number?\"],\n            fn: this.rsxRect\n        },\n        say: {\n            argTypes: [\"string\"],\n            fn: this.rsxSay\n        },\n        time: {\n            argTypes: [\"string\"],\n            fn: this.rsxTime\n        }\n    };\n\n    public async rsx(cmd: string, args: (number | string)[]): Promise<(number | string)[]> {\n        if (!this.rsxMap[cmd]) {\n            throw new Error(`Unknown RSX command: |${cmd.toUpperCase()}`);\n        }\n        const rsxInfo = this.rsxMap[cmd];\n        const expectedArgs = rsxInfo.argTypes.length;\n        const optionalArgs = rsxInfo.argTypes.filter((type) => type.endsWith(\"?\")).length;\n        if (args.length < expectedArgs - optionalArgs) {\n            throw new Error(`|${cmd.toUpperCase()}: Wrong number of arguments: ${args.length} < ${expectedArgs - optionalArgs}`);\n        }\n        if (args.length > expectedArgs) {\n            throw new Error(`|${cmd.toUpperCase()}: Wrong number of arguments: ${args.length} > ${expectedArgs}`);\n        }\n        for (let i = 0; i < args.length; i += 1) {\n            const expectedType = rsxInfo.argTypes[i].replace(\"?\", \"\");\n            const arg = args[i];\n            if (typeof arg !== expectedType) {\n                throw new Error(`|${cmd.toUpperCase()}: Wrong argument type (pos ${i}): ${typeof arg}`);\n            }\n        }\n        const result = rsxInfo.fn(args);\n        if (result instanceof Promise) {\n            return result;\n        } else {\n            return args;\n        }\n    }\n}\n","import type { IVmRsxApi, SnippetDataType } from \"./Interfaces\";\nimport { BasicVmRsxHandler } from \"./BasicVmRsxHandler\";\n\nconst strokeWidthForMode: number[] = [4, 2, 1, 1];\n\nexport class BasicVmCore implements IVmRsxApi {\n    private readonly penColors: string[];\n    private readonly paperColors: string[];\n    private currMode: number = 2;\n    private readonly graphicsBuffer: string[] = [];\n    private readonly graphicsPathBuffer: string[] = [];\n    private currGraphicsPen: number = -1;\n    private originX: number = 0;\n    private originY: number = 0;\n    private graphicsX: number = 0;\n    private graphicsY: number = 0;\n    private readonly colorsForPens: number[] = [];\n    private backgroundColor = \"\";\n    private snippetData: SnippetDataType = {\n    } as SnippetDataType;\n    private rsxHandler: BasicVmRsxHandler;\n    private outputGraphicsIndex: number = -1;\n\n    private static readonly cpcColors = [\n        \"#000000\", //  0 Black\n        \"#000080\", //  1 Blue\n        \"#0000FF\", //  2 Bright Blue\n        \"#800000\", //  3 Red\n        \"#800080\", //  4 Magenta\n        \"#8000FF\", //  5 Mauve\n        \"#FF0000\", //  6 Bright Red\n        \"#FF0080\", //  7 Purple\n        \"#FF00FF\", //  8 Bright Magenta\n        \"#008000\", //  9 Green\n        \"#008080\", // 10 Cyan\n        \"#0080FF\", // 11 Sky Blue\n        \"#808000\", // 12 Yellow\n        \"#808080\", // 13 White\n        \"#8080FF\", // 14 Pastel Blue\n        \"#FF8000\", // 15 Orange\n        \"#FF8080\", // 16 Pink\n        \"#FF80FF\", // 17 Pastel Magenta\n        \"#00FF00\", // 18 Bright Green\n        \"#00FF80\", // 19 Sea Green\n        \"#00FFFF\", // 20 Bright Cyan\n        \"#80FF00\", // 21 Lime\n        \"#80FF80\", // 22 Pastel Green\n        \"#80FFFF\", // 23 Pastel Cyan\n        \"#FFFF00\", // 24 Bright Yellow\n        \"#FFFF80\", // 25 Pastel Yellow\n        \"#FFFFFF\", // 26 Bright White\n        \"#808080\", // 27 White (same as 13)\n        \"#FF00FF\", // 28 Bright Magenta (same as 8)\n        \"#FFFF80\", // 29 Pastel Yellow (same as 25)\n        \"#000080\", // 30 Blue (same as 1)\n        \"#00FF80\" //  31 Sea Green (same as 19)\n    ];\n\n    private readonly defaultColorsForPens: number[] = [\n        1, 24, 20, 6, 26, 0, 2, 8, 10, 12, 14, 16, 18, 22, 1, 16, 1\n    ];\n\n    public constructor(penColors: string[], paperColors: string[]) {\n        this.penColors = penColors;\n        this.paperColors = paperColors;\n        this.rsxHandler = new BasicVmRsxHandler(this);\n        this.reset();\n    }\n\n    public static getCpcColors() {\n        return BasicVmCore.cpcColors;\n    }\n\n    private static deleteAllItems(items: Record<string, unknown>): void {\n        Object.keys(items).forEach(key => delete items[key]);\n    }\n\n    public reset(): void {\n        this.colorsForPens.splice(0, this.colorsForPens.length, ...this.defaultColorsForPens);\n        BasicVmCore.deleteAllItems(this.snippetData);\n        this.snippetData.output = \"\";\n        this.backgroundColor = \"\";\n        this.mode(1);\n        this.cls();\n    }\n\n    public cls(): void {\n        this.graphicsBuffer.length = 0;\n        this.graphicsPathBuffer.length = 0;\n        this.currGraphicsPen = -1;\n        this.graphicsX = 0;\n        this.graphicsY = 0;\n        this.outputGraphicsIndex = -1;\n    }\n\n    public mode(num: number): void {\n        this.currMode = num;\n        this.origin(0, 0);\n    }\n\n    private setOutputGraphicsIndex(): void {\n        if (this.outputGraphicsIndex < 0) {\n            this.outputGraphicsIndex = this.getSnippetData().output.length;\n        }\n    }\n\n    public getOutputGraphicsIndex(): number {\n        return this.outputGraphicsIndex;\n    }\n\n\n    // type: M | m | P | p | L | l\n    public drawMovePlot(type: string, x: number, y: number, pen?: number): void {\n        this.setOutputGraphicsIndex();\n        if (pen !== undefined) {\n            this.graphicsPen(pen);\n        }\n        x = Math.round(x);\n        y = Math.round(y);\n\n        if (!this.graphicsPathBuffer.length && type !== \"M\" && type !== \"P\") { // path must start with an absolute move\n            this.graphicsPathBuffer.push(`M${this.graphicsX + this.originX} ${399 - this.graphicsY - this.originY}`);\n        }\n\n        const isAbsolute = type === type.toUpperCase();\n        if (isAbsolute) {\n            this.graphicsX = x;\n            this.graphicsY = y;\n            x = this.graphicsX + this.originX;\n            y = 399 - this.graphicsY - this.originY;\n        } else {\n            this.graphicsX += x;\n            this.graphicsY += y;\n            y = -y;\n        }\n\n        const svgPathCmd = (type === \"P\" || type === \"p\")\n            ? `${isAbsolute ? \"M\" : \"m\"}${x} ${y}h1v1h-1v-1`\n            : `${type}${x} ${y}`;\n\n        this.graphicsPathBuffer.push(svgPathCmd);\n    }\n\n    public getGraphicsPen(): number {\n        return this.currGraphicsPen;\n    }\n\n    public getRgbColorStringForPen(pen: number): string {\n        return BasicVmCore.cpcColors[this.colorsForPens[pen]];\n    }\n\n    private flushGraphicsPath(): void {\n        if (this.graphicsPathBuffer.length) {\n            const strokeStr = this.currGraphicsPen >= 0 ? `stroke=\"${this.getRgbColorStringForPen(this.currGraphicsPen)}\" ` : \"\";\n            this.graphicsBuffer.push(`<path ${strokeStr}d=\"${this.graphicsPathBuffer.join(\"\")}\" />`);\n            this.graphicsPathBuffer.length = 0;\n        }\n    }\n\n    public addGraphicsElement(element: string): void {\n        this.setOutputGraphicsIndex();\n        this.flushGraphicsPath(); // maybe a path is open\n        this.graphicsBuffer.push(element);\n    }\n\n    public static getTagInSvg(content: string, strokeWidth: string, backgroundColor: string) {\n        const backgroundColorStr = backgroundColor !== \"\" ? ` style=\"background-color:${backgroundColor}\"` : '';\n        return `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 640 400\" shape-rendering=\"optimizeSpeed\" stroke=\"currentColor\" stroke-width=\"${strokeWidth}\"${backgroundColorStr}>\n${content}\n</svg>\n`;\n    }\n\n    public flushGraphics(): string {\n        this.flushGraphicsPath();\n        if (this.graphicsBuffer.length) {\n            const graphicsBufferStr = this.graphicsBuffer.join(\"\\n\");\n            const strokeWith = strokeWidthForMode[this.currMode] + \"px\";\n            this.graphicsBuffer.length = 0;\n            return BasicVmCore.getTagInSvg(graphicsBufferStr, strokeWith, this.backgroundColor);\n        }\n        return \"\";\n    }\n\n    public flushText(): string {\n        const snippetData = this.getSnippetData();\n        const output = snippetData.output; // text output\n        snippetData.output = \"\";\n        return output;\n    }\n\n    public graphicsPen(num: number): void {\n        if (num !== this.currGraphicsPen) {\n            this.flushGraphicsPath();\n            this.currGraphicsPen = num;\n        }\n    }\n\n    public ink(num: number, col: number): void {\n        this.colorsForPens[num] = col;\n        // we modify inks, so set default pens and papers\n        if (this.currGraphicsPen < 0) {\n            this.graphicsPen(1);\n        }\n        if (num === 0) {\n            this.backgroundColor = this.getRgbColorStringForPen(0);\n        }\n    }\n\n    public origin(x: number, y: number): void {\n        this.originX = x;\n        this.originY = y;\n    }\n\n    public getColorForPen(n: number, isPaper?: boolean): string {\n        return isPaper ? this.paperColors[this.colorsForPens[n]] : this.penColors[this.colorsForPens[n]];\n    }\n\n    public printGraphicsText(text: string): void {\n        const yOffset = 16;\n        const colorStyleStr = this.currGraphicsPen >= 0 ? `; color: ${this.getRgbColorStringForPen(this.currGraphicsPen)}` : \"\";\n        this.addGraphicsElement(`<text x=\"${this.graphicsX + this.originX}\" y=\"${399 - this.graphicsY - this.originY + yOffset}\" style=\"white-space: pre${colorStyleStr}\">${text}</text>`);\n        this.graphicsX += text.length * 8; // assuming 8px width per character\n    }\n\n    public setOnSpeak(fnOnSpeak: (text: string, pitch: number) => Promise<void>) {\n        this.rsxHandler.setOnSpeak(fnOnSpeak);\n    }\n\n    public async rsx(cmd: string, args: (number | string)[]): Promise<(number | string)[]> {\n        return this.rsxHandler.rsx(cmd, args);\n    }\n\n    public xpos(): number {\n        return this.graphicsX;\n    }\n\n    public ypos(): number {\n        return this.graphicsY;\n    }\n\n    public getSnippetData(): SnippetDataType {\n        return this.snippetData;\n    }\n}\n","import type { INodeParts, IVmAdmin, SnippetDataType } from \"./Interfaces\";\nimport { BasicVmCore } from \"./BasicVmCore\";\n\nfunction getAnsiColors(background: boolean): string[] {\n    const colorCodes = [\n        30, //  0 Black\n        34, //  1 Blue \n        94, //  2 Bright Blue\n        31, //  3 Red\n        35, //  4 Magenta (Purple?)\n        35, //  5 Mauve ???\n        91, //  6 Bright Red\n        35, //  7 Purple\n        95, //  8 Bright Magenta ?\n        32, //  9 Green\n        36, // 10 Cyan\n        94, // 11 Sky Blue ?\n        33, // 12 Yellow\n        37, // 13 White\n        94, // 14 Pastel Blue ?\n        91, // 15 Orange ?\n        95, // 16 Pink (Bright Magenta?)\n        95, // 17 Pastel Magenta?\n        92, // 18 Bright Green\n        92, // 19 Sea Green\n        96, // 20 Bright Cyan\n        96, // 21 Lime ?\n        92, // 22 Pastel Green (Bright Green)\n        96, // 23 Pastel Cyan ?\n        93, // 24 Bright Yellow\n        93, // 25 Pastel Yellow\n        37, // 26 Bright White\n        37, // 27 White (same as 13)\n        95, // 28 Bright Magenta (same as 8)\n        93, // 29 Pastel Yellow (same as 25)\n        34, // 30 Blue (same as 1)\n        92 //  31 Sea Green (same as 19)\n    ];\n    const add = background ? 10 : 0;\n\n    return colorCodes.map((code: number) => `\\x1b[${code + add}m`); // e.g. Navy: pen: \"\\x1b[34m\" or paper: \"\\x1b[44m\"\n}\n\nexport class BasicVmNode implements IVmAdmin {\n    private readonly vmCore: BasicVmCore;\n    private readonly nodeParts: INodeParts;\n\n    public reset: () => void;\n    public drawMovePlot: (type: string, x: number, y: number, pen?: number) => void;\n    public graphicsPen: (num: number) => void;\n    public ink: (num: number, col: number) => void;\n    public origin: (x: number, y: number) => void;\n    public printGraphicsText: (text: string) => void;\n    public rsx: (cmd: string, args: (number | string)[]) => Promise<(number | string)[]>;\n    public xpos: () => number;\n    public ypos: () => number;\n    public getSnippetData: () => SnippetDataType;\n    public getColorForPen: (n: number, isPaper?: boolean) => string;\n\n    constructor(nodeParts: INodeParts) {\n        this.nodeParts = nodeParts;\n        const penColors = getAnsiColors(false);\n        const paperColors = getAnsiColors(true);\n        this.vmCore = new BasicVmCore(penColors, paperColors);\n\n        this.reset = this.vmCore.reset.bind(this.vmCore);\n        this.drawMovePlot = this.vmCore.drawMovePlot.bind(this.vmCore);\n        this.graphicsPen = this.vmCore.graphicsPen.bind(this.vmCore);\n        this.ink = this.vmCore.ink.bind(this.vmCore);\n        this.origin = this.vmCore.origin.bind(this.vmCore);\n        this.printGraphicsText = this.vmCore.printGraphicsText.bind(this.vmCore);\n        this.rsx = this.vmCore.rsx.bind(this.vmCore);\n        this.xpos = this.vmCore.xpos.bind(this.vmCore);\n        this.ypos = this.vmCore.ypos.bind(this.vmCore);\n        this.getSnippetData = this.vmCore.getSnippetData.bind(this.vmCore);\n        this.getColorForPen = this.vmCore.getColorForPen.bind(this.vmCore);\n    }\n\n    public cls(): void {\n        this.vmCore.cls();\n        this.nodeParts.consoleClear();\n    }\n\n    public escapeText(str: string, isGraphics?: boolean): string {\n        // for node we need to escape only graphics text\n        return isGraphics ? str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\") : str;\n    }\n\n    public flush(): void {\n        const textOutput = this.vmCore.flushText().replace(/\\n$/, \"\");\n        const graphicsOutput = this.vmCore.flushGraphics().replace(/\\n$/, \"\");\n        const outputGraphicsIndex = this.vmCore.getOutputGraphicsIndex();\n        const output = outputGraphicsIndex >= 0 ? textOutput.substring(0, outputGraphicsIndex) + graphicsOutput + textOutput.substring(outputGraphicsIndex) : textOutput;\n        if (output !== \"\") {\n            this.nodeParts.consolePrint(output);\n        }\n    }\n\n    public inkey$(): Promise<string> {\n        const key = this.nodeParts.getKeyFromBuffer();\n        return Promise.resolve(key);\n    }\n\n    private async fnOnInput(msg: string): Promise<string> {\n        console.log(msg);\n        return Promise.resolve(\"\");\n    }\n\n    public input(msg: string): Promise<string | null> {\n        this.flush();\n        return this.fnOnInput(msg);\n    }\n\n    public mode(num: number): void {\n        this.vmCore.mode(num);\n    }\n\n    public getEscape(): boolean {\n        return this.nodeParts.getEscape();\n    }\n}\n","import type { DatabaseType, ExampleType, ICore, INodeParts, IVm, IVmAdmin, SnippetDataType } from \"./Interfaces\";\nimport { BasicVmNode } from \"./BasicVmNode\";\n\ninterface NodePath {\n    dirname: (dirname: string) => string;\n    resolve: (dirname: string, name: string) => string;\n}\n\ninterface NodeFs {\n    promises: {\n        readFile(name: string, encoding: string): Promise<string>\n    };\n}\n\ntype nodeIncomingMessage = { on: (type: string, fn: (s: string) => void) => void };\n\ninterface NodeHttps {\n    get: (url: string, fn: (res: nodeIncomingMessage) => void) => {\n        on: (type: string, fn: (err: Error) => void) => NodeHttps;\n    }\n}\n\ninterface NodeReadline {\n    emitKeypressEvents(stream: typeof process.stdin): void;\n}\n\ninterface NodeVm {\n    runInNewContext: (code: string) => string;\n}\n\ntype NodeKeyPressType = {\n    sequence: string;\n    name: string;\n    ctrl: boolean;\n    meta: boolean;\n    shift: boolean;\n}\n\ndeclare function require(name: string): NodeFs | NodeHttps | NodeModule | NodePath | NodeReadline | NodeVm;\n\ninterface DummyVm extends IVm {\n    _snippetData: SnippetDataType;\n    debug(...args: (string | number | boolean)[]): void;\n}\n\n// The functions from dummyVm will be stringified in the putScriptInFrame function\nconst dummyVm: DummyVm = {\n    _snippetData: {} as SnippetDataType,\n    debug(..._args: (string | number)[]) { /* console.debug(...args); */ }, // eslint-disable-line @typescript-eslint/no-unused-vars\n    cls() { },\n    drawMovePlot(type: string, x: number, y: number, pen?: number) { this.debug(\"drawMovePlot:\", type, x, y, pen !== undefined ? pen : \"\"); },\n    escapeText(str: string, isGraphics?: boolean) { return isGraphics ? str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\") : str; },\n    flush() { if (this._snippetData.output) { console.log(this._snippetData.output); this._snippetData.output = \"\"; } },\n    graphicsPen(num: number) { this.debug(\"graphicsPen:\", num); },\n    ink(num: number, col: number) { this.debug(\"ink:\", num, col); },\n    async inkey$() { return Promise.resolve(\"\"); },\n    async input(msg: string) { console.log(msg); return \"\"; },\n    mode(num: number) { this.debug(\"mode:\", num); },\n    origin(x: number, y: number) { this.debug(\"origin:\", x, y); },\n    printGraphicsText(text: string) { this.debug(\"printGraphicsText:\", text); },\n    rsx(cmd: string, args: (string | number)[]): Promise<(number | string)[]> { this._snippetData.output += cmd + \",\" + args.join(''); return Promise.resolve([]); },\n    xpos() { this.debug(\"xpos:\"); return 0; },\n    ypos() { this.debug(\"ypos:\"); return 0; },\n    getEscape() { return false; },\n    getSnippetData() { return this._snippetData; },\n    getColorForPen(_n: number, isPaper?: boolean) { this.debug(\"getColorForPen:\"); return isPaper ? \"0\" : \"1\"; }\n};\n\nfunction isUrl(s: string) {\n    return s.startsWith(\"http\"); // http or https\n}\n\nexport class NodeParts implements INodeParts {\n    private nodePath?: NodePath;\n    private nodeFs?: NodeFs;\n    private nodeHttps?: NodeHttps;\n    private modulePath = \"\";\n    private nodeVm?: NodeVm;\n    private nodeReadline?: NodeReadline;\n    private readonly keyBuffer: string[] = []; // buffered pressed keys\n    private escape = false;\n    private fnOnKeyPressHandler?: (chunk: string, key: NodeKeyPressType) => void;\n\n    private nodeGetAbsolutePath(name: string) {\n        if (!this.nodePath) {\n            this.nodePath = require(\"path\") as NodePath;\n        }\n        const path = this.nodePath;\n\n        // https://stackoverflow.com/questions/8817423/why-is-dirname-not-defined-in-node-repl\n        const dirname = __dirname || path.dirname(__filename);\n        const absolutePath = path.resolve(dirname, name);\n\n        return absolutePath;\n    }\n\n    private async nodeReadFile(name: string): Promise<string> {\n        if (!this.nodeFs) {\n            this.nodeFs = require(\"fs\") as NodeFs;\n        }\n\n        if (!module) {\n            const module = require(\"module\") as NodeModule;\n            this.modulePath = module.path || \"\";\n\n            if (!this.modulePath) {\n                console.warn(\"nodeReadFile: Cannot determine module path\");\n            }\n        }\n        try {\n            return await this.nodeFs.promises.readFile(name, \"utf8\");\n        } catch (error) {\n            console.error(`Error reading file ${name}:`, String(error));\n            throw error;\n        }\n    }\n\n    private async nodeReadUrl(url: string): Promise<string> {\n        if (!this.nodeHttps) {\n            this.nodeHttps = require(\"https\") as NodeHttps;\n        }\n        const nodeHttps = this.nodeHttps;\n\n        return new Promise((resolve, reject) => {\n            nodeHttps.get(url, (resp) => {\n                let data = \"\";\n\n                resp.on(\"data\", (chunk: string) => {\n                    data += chunk;\n                });\n\n                resp.on(\"end\", () => {\n                    resolve(data);\n                });\n            }).on(\"error\", (err: Error) => {\n                console.error(\"Error: \" + err.message);\n                reject(err);\n            });\n        });\n    }\n\n    private loadScript(fileOrUrl: string): Promise<string> {\n        if (isUrl(fileOrUrl)) {\n            return this.nodeReadUrl(fileOrUrl);\n        } else {\n            return this.nodeReadFile(fileOrUrl);\n        }\n    };\n\n    private keepRunning(fn: () => void, timeout: number): Promise<void> {\n        const timerId = setTimeout(() => { }, timeout);\n        return (async () => {\n            fn();\n            clearTimeout(timerId);\n        })();\n    }\n\n    private putScriptInFrame(script: string): string {\n        const dummyVmString = Object.entries(dummyVm).map(([key, value]) => {\n            if (typeof value === \"function\") {\n                return `${value}`;\n            } else if (typeof value === \"object\") {\n                return `${key}: ${JSON.stringify(value)}`;\n            } else {\n                return `${key}: \"${value}\"`;\n            }\n        }).join(\",\\n  \");\n        const result =\n            `(function(_o) {\n    ${script}\n})({\n    ${dummyVmString}\n});`\n        return result;\n    }\n\n    private nodeCheckSyntax(script: string): string {\n        if (!this.nodeVm) {\n            this.nodeVm = require(\"vm\") as NodeVm;\n        }\n\n        const describeError = (stack: string): string => {\n            const match = stack.match(/^\\D+(\\d+)\\n(.+\\n( *)\\^+)\\n\\n(SyntaxError.+)/);\n            if (!match) {\n                return \"\"; // parse successful?\n            }\n            const [, linenoPlusOne, caretString, colSpaces, message] = match;\n            const lineno = Number(linenoPlusOne) - 1;\n            const colno = colSpaces.length + 1;\n            return `Syntax error thrown at: Line ${lineno}, col: ${colno}\\n${caretString}\\n${message}`;\n        };\n        let output = \"\";\n\n        try {\n            const scriptInFrame = this.putScriptInFrame(script);\n            this.nodeVm.runInNewContext(`throw new Error();\\n${scriptInFrame}`);\n        } catch (err) { // Error-like object\n            const stack = (err as Error).stack;\n            if (stack) {\n                output = describeError(stack);\n            }\n        }\n        return output;\n    }\n\n    private putKeyInBuffer(key: string): void {\n        this.keyBuffer.push(key);\n    }\n\n    private fnOnKeypress(_chunk: string, key: NodeKeyPressType) {\n        if (key) {\n            const keySequenceCode = key.sequence.charCodeAt(0);\n            if (key.name === 'c' && key.ctrl === true) {\n                // key: '<char>' { sequence: '\\x03', name: 'c', ctrl: true, meta: false, shift: false }\n                process.exit();\n            } else if (key.name === \"escape\") {\n                this.escape = true;\n            } else if (keySequenceCode === 0x0d || (keySequenceCode >= 32 && keySequenceCode <= 128)) {\n                this.putKeyInBuffer(key.sequence);\n            }\n        }\n    }\n\n    private initKeyboardInput(): void {\n        this.nodeReadline = require('readline') as NodeReadline;\n\n        if (process.stdin.isTTY) {\n            this.nodeReadline.emitKeypressEvents(process.stdin);\n            process.stdin.setRawMode(true);\n\n            this.fnOnKeyPressHandler = this.fnOnKeypress.bind(this);\n            process.stdin.on('keypress', this.fnOnKeyPressHandler);\n        } else {\n            console.warn(\"initKeyboardInput: not a TTY\", process.stdin);\n        }\n    }\n\n    public getKeyFromBuffer(): string {\n        if (!this.nodeReadline) {\n            this.initKeyboardInput();\n        }\n        const key = this.keyBuffer.length ? this.keyBuffer.shift() as string : \"\";\n        return key;\n    }\n\n    public getEscape(): boolean {\n        return this.escape;\n    }\n\n    public consoleClear(): void {\n        console.clear();\n    }\n\n    public consolePrint(msg: string): void {\n        console.log(msg);\n    }\n\n    private start(core: ICore, vm: IVmAdmin, input: string): Promise<void> | undefined {\n        const actionConfig = core.getConfigMap().action;\n        if (input !== \"\") {\n            core.setOnCheckSyntax((s: string) => Promise.resolve(this.nodeCheckSyntax(s)));\n\n            const compiledScript = actionConfig.includes(\"compile\") ? core.compileScript(input) : input;\n\n            if (compiledScript.startsWith(\"ERROR:\")) {\n                console.error(compiledScript);\n                return;\n            }\n\n            if (actionConfig.includes(\"run\")) {\n                return this.keepRunning(async () => {\n                    const output = await core.executeScript(compiledScript, vm);\n                    console.log(output.replace(/\\n$/, \"\"));\n                    if (this.fnOnKeyPressHandler) {\n                        process.stdin.off('keypress', this.fnOnKeyPressHandler);\n                        process.stdin.setRawMode(false);\n                        process.exit(0); // hmm, not so nice\n                    }\n                }, 5000);\n            } else {\n                const inFrame = this.putScriptInFrame(compiledScript);\n                console.log(inFrame);\n            }\n        } else {\n            console.log(\"No input\");\n            console.log(NodeParts.getHelpString());\n        }\n    }\n\n    private async getExampleMap(databaseItem: DatabaseType, core: ICore) {\n        if (databaseItem.exampleMap) {\n            return databaseItem.exampleMap;\n        }\n        databaseItem.exampleMap = {};\n        const scriptName = databaseItem.source + \"/0index.js\";\n        try {\n            const jsFile = await this.loadScript(scriptName);\n            const fnScript = new Function(\"cpcBasic\", jsFile);\n            fnScript({\n                addIndex: core.addIndex\n            });\n        } catch (error) {\n            console.error(\"Load Example Map \", scriptName, error);\n        }\n        return databaseItem.exampleMap;\n    }\n\n    private async getExampleScript(example: ExampleType, core: ICore) {\n        if (example.script !== undefined) {\n            return example.script;\n        }\n        const database = core.getDatabase();\n        const scriptName = database.source + \"/\" + example.key + \".js\";\n        try {\n            const jsFile = await this.loadScript(scriptName);\n            const fnScript = new Function(\"cpcBasic\", jsFile);\n            fnScript({\n                addItem: (key: string, input: string | (() => void)) => {\n                    if (!key) { // maybe \"\"\n                        key = example.key;\n                    }\n                    core.addItem(key, input);\n                }\n            });\n        } catch (error) {\n            console.error(\"Load Example\", scriptName, error);\n        }\n        return example.script || \"\"; //TTT\n\n    }\n\n    public async nodeMain(core: ICore): Promise<void> {\n        const vm = new BasicVmNode(this);\n        const config = core.getConfigMap();\n        core.parseArgs(global.process.argv.slice(2), config);\n\n        if (config.input) {\n            return this.keepRunning(async () => {\n                this.start(core, vm, config.input);\n            }, 5000);\n        }\n\n        if (config.fileName) {\n            return this.keepRunning(async () => {\n                const inputFromFile = await this.nodeReadFile(config.fileName);\n                this.start(core, vm, inputFromFile);\n            }, 5000);\n        }\n\n        if (config.example) {\n            const databaseMap = core.initDatabaseMap();\n            const database = config.database;\n            const databaseItem = databaseMap[database];\n\n            if (!databaseItem) {\n                console.error(`Error: Database ${database} not found in ${config.databaseDirs}`);\n                return;\n            }\n\n            return this.keepRunning(async () => {\n                if (!isUrl(databaseItem.source)) {\n                    databaseItem.source = this.nodeGetAbsolutePath(databaseItem.source);\n                }\n\n                await this.getExampleMap(databaseItem, core);\n                const exampleName = config.example;\n                const example = core.getExample(exampleName);\n                if (example) {\n                    const script = await this.getExampleScript(example, core);\n                    this.start(core, vm, script);\n                } else {\n                    console.error(`Error: Example not found: ${exampleName}`);\n                }\n            }, 5000);\n        }\n    }\n\n    private static getHelpString(): string {\n        return `\nUsage:\nnode dist/locobasic.js [<option=<value(s)>] [<option=<value(s)>]\n\n- Options:\naction=compile,run\ndatabaseDirs=examples,...\ndatabase=examples\ndebounceCompile=800\ndebounceExecute=400\ndebug=0\nexample=euler\nfileName=<file>\ngrammar=<name>\ninput=<statements>\n\n- Examples for compile and run:\nnode dist/locobasic.js input='PRINT \"Hello!\"'\nnpx ts-node dist/locobasic.js input='PRINT \"Hello!\"'\nnode dist/locobasic.js input='?3 + 5 * (2 - 8)' example=''\nnode dist/locobasic.js example=euler\nnode dist/locobasic.js example=archidr0 > test1.svg\nnode dist/locobasic.js example=binary database=rosetta databaseDirs=examples,https://benchmarko.github.io/CPCBasicApps/apps,https://benchmarko.github.io/CPCBasicApps/rosetta\nnode dist/locobasic.js grammar='strict' input='a$=\"Bob\":PRINT \"Hello \";a$;\"!\"'\nnode dist/locobasic.js fileName=dist/examples/example.bas  (if you have an example.bas file)\n\n- Example for compile only:\nnode dist/locobasic.js action='compile' input='PRINT \"Hello!\"' > hello1.js\n[Windows: Use node.exe when redirecting into a file; or npx ts-node ...]\nnode hello1.js\n[When using async functions like FRAME or INPUT, redirect to hello1.mjs]\n`;\n    }\n}\n","import type { IUI, IVmAdmin, SnippetDataType } from \"./Interfaces\";\nimport { BasicVmCore } from \"./BasicVmCore\";\n\nexport class BasicVmBrowser implements IVmAdmin {\n    private readonly ui: IUI;\n    private readonly vmCore: BasicVmCore;\n\n    public reset: () => void;\n    public drawMovePlot: (type: string, x: number, y: number, pen?: number) => void;\n    public graphicsPen: (num: number) => void;\n    public ink: (num: number, col: number) => void;\n    public origin: (x: number, y: number) => void;\n    public printGraphicsText: (text: string) => void;\n    public rsx: (cmd: string, args: (number | string)[]) => Promise<(number | string)[]>;\n    public xpos: () => number;\n    public ypos: () => number;\n    public getSnippetData: () => SnippetDataType;\n    public getColorForPen: (n: number, isPaper?: boolean) => string;\n\n    constructor(ui: IUI) {\n        this.ui = ui;\n        const cpcColors = BasicVmCore.getCpcColors();\n        const penColors = cpcColors.map((color) => ui.getColor(color, false));\n        const paperColors = cpcColors.map((color) => ui.getColor(color, true));\n        this.vmCore = new BasicVmCore(penColors, paperColors);\n        this.vmCore.setOnSpeak(this.fnOnSpeak.bind(this));\n\n        this.reset = this.vmCore.reset.bind(this.vmCore);\n        this.drawMovePlot = this.vmCore.drawMovePlot.bind(this.vmCore);\n        this.graphicsPen = this.vmCore.graphicsPen.bind(this.vmCore);\n        this.ink = this.vmCore.ink.bind(this.vmCore);\n        this.origin = this.vmCore.origin.bind(this.vmCore);\n        this.printGraphicsText = this.vmCore.printGraphicsText.bind(this.vmCore);\n        this.rsx = this.vmCore.rsx.bind(this.vmCore);\n        this.xpos = this.vmCore.xpos.bind(this.vmCore);\n        this.ypos = this.vmCore.ypos.bind(this.vmCore);\n        this.getSnippetData = this.vmCore.getSnippetData.bind(this.vmCore);\n        this.getColorForPen = this.vmCore.getColorForPen.bind(this.vmCore);\n    }\n\n    public cls(): void {\n        this.vmCore.cls();\n        this.ui.setOutputText(\"\");\n    }\n\n    public escapeText(str: string, _isGraphics?: boolean): string { // eslint-disable-line @typescript-eslint/no-unused-vars\n        // for a browser, we need to escape text and graphics text\n        return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\");\n    }\n\n    public flush(): void {\n        const textOutput = this.vmCore.flushText();\n        const graphicsOutput = this.vmCore.flushGraphics();\n        const outputGraphicsIndex = this.vmCore.getOutputGraphicsIndex();\n        const hasGraphics = outputGraphicsIndex >= 0;\n        const output = hasGraphics ? textOutput.substring(0, outputGraphicsIndex) + graphicsOutput + textOutput.substring(outputGraphicsIndex) : textOutput;\n\n        if (output !== \"\") {\n            this.ui.addOutputText(output, hasGraphics);\n        }\n    }\n\n    public inkey$(): Promise<string> {\n        const key = this.ui.getKeyFromBuffer();\n        return Promise.resolve(key);\n    }\n\n    /**\n     * Prompts the user with a message and returns the input.\n     * @param msg - The message to prompt.\n     * @returns A promise that resolves to the user input or null if canceled.\n     */\n    private async fnOnInput(msg: string): Promise<string | null> {\n        await new Promise(resolve => setTimeout(resolve, 50)); // 50 ms delay to allow UI to update\n        const input = this.ui.prompt(msg);\n        return Promise.resolve(input);\n    }\n\n    public async input(msg: string): Promise<string | null> {\n        this.flush();\n        return this.fnOnInput(msg);\n    }\n\n    public mode(num: number): void {\n        this.vmCore.mode(num);\n    }\n\n    private async fnOnSpeak(text: string, pitch: number): Promise<void> {\n        return this.ui.speak(text, pitch);\n    }\n\n    public getEscape(): boolean {\n        return this.ui.getEscape();\n    }\n}\n","import type { ExampleType, ICore, IUI } from \"./Interfaces\";\nimport { Core } from \"./Core\";\nimport { NodeParts } from \"./NodeParts\";\nimport { BasicVmBrowser } from \"./BasicVmBrowser\";\n\ninterface WindowProperties {\n    cpcBasic: {\n        addIndex: (dir: string, input: Record<string, ExampleType[]> | (() => void)) => void,\n        addItem: (key: string, input: string | (() => void)) => void\n    };\n    locobasicUI: {\n        UI: {\n            new(): IUI\n        }\n    };\n    onload: (event: Event) => void;\n}\n\ndeclare const window: WindowProperties | undefined;\n\nconst core: ICore = new Core({\n    action: \"compile,run\",\n    autoCompile: true,\n    autoExecute: true,\n    databaseDirs: \"examples\", // example base directories (comma separated)\n\tdatabase: \"examples\", // examples, apps, saved\n    debounceCompile: 800,\n    debounceExecute: 400,\n    debug: 0,\n    example: \"locobas\",\n    fileName: \"\",\n    grammar: \"basic\", // basic or strict\n    input: \"\",\n    showBasic: true,\n    showCompiled: false,\n    showOutput: true\n});\n\nif (typeof window !== \"undefined\") {\n    window.onload = () => {\n        const UI = window.locobasicUI.UI; // we expect that it is already loaded in the HTML page\n        const ui = new UI();\n        window.cpcBasic = {\n            addIndex: core.addIndex,\n            addItem: (key: string, input: string | (() => void)) => {\n                if (!key) { // maybe \"\"\n                    key = ui.getCurrentDataKey();\n                }\n                core.addItem(key, input);\n            }\n        };\n        ui.onWindowLoadContinue(core, new BasicVmBrowser(ui));\n    };\n} else { // node.js\n    new NodeParts().nodeMain(core);\n}\n"],"names":["grammar"],"mappings":"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"}