{"version":3,"file":"locobasic.js","sources":["../src/Parser.ts","../src/arithmetic.ts","../src/Semantics.ts","../src/Core.ts","../src/main.ts"],"sourcesContent":["// Parser.ts\n\nimport { type ActionDict, type Grammar, type Namespace, type Semantics, grammar } from \"ohm-js\";\n\nexport class Parser {\n\tprivate readonly ohmGrammar: Grammar;\n\tprivate readonly ohmSemantics: Semantics;\n\n\tconstructor(grammarString: string, semanticsMap: ActionDict<string | string[]>, superParser?: Parser) {\n\t\tif (superParser) {\n\t\t\tconst superGrammar = superParser.getOhmGrammar();\n\t\t\t\n\t\t\tconst namespace: Namespace = {\n\t\t\t\tbasicGrammar: superGrammar\n\t\t\t}\n\t\t\tthis.ohmGrammar = grammar(grammarString, namespace);\n\t\t} else {\n\t\t\tthis.ohmGrammar = grammar(grammarString);\n\t\t}\n\n\t\tthis.ohmSemantics = this.ohmGrammar\n\t\t\t.createSemantics()\n\t\t\t.addOperation<string | string[]>(\"eval\", semanticsMap);\n\t}\n\n\tpublic getOhmGrammar() {\n\t\treturn this.ohmGrammar;\n\t}\n\n\t// Function to parse and evaluate an expression\n\tparseAndEval(input: string) {\n\t\ttry {\n\t\t\tconst matchResult = this.ohmGrammar.match(input);\n\t\t\tif (matchResult.succeeded()) {\n\t\t\t\treturn this.ohmSemantics(matchResult).eval();\n\t\t\t} else {\n\t\t\t\treturn 'ERROR: Parsing failed: ' + matchResult.message;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn 'ERROR: Parsing evaluator failed: ' + (error instanceof Error ? error.message : \"unknown\");\n\t\t}\n\t}\n}\n","// arithmetics.ts\n//\nexport const arithmetic = {\n  basicGrammar:\n    `\n    Arithmetic {\n    Program\n      = Line*\n\n    Line\n      = Label? Statements Comment? (eol | end)\n\n    Label\n      = label\n\n    Statements\n      = Statement (\":\" Statement)*\n\n    Statement\n      = Comment\n      | Cls\n      | Data\n      | Def\n      | Dim\n      | End\n      | Erase\n      | Error\n      | For\n      | Frame\n      | Gosub\n      | If\n      | Input\n      | MidSAssign\n      | Mode\n      | Next\n      | On\n      | Print\n      | Read\n      | Rem\n      | Restore\n      | Return\n      | Stop\n      | While\n      | Wend\n      | ArrayAssign\n      | Assign\n\n    ArrayAssign\n      = ArrayIdent \"=\" NumExp\n      | StrArrayIdent \"=\" StrExp\n\n    Abs\n      = abs \"(\" NumExp \")\"\n\n    Asc\n      = asc \"(\" StrExp \")\"\n\n    Atn\n      = atn \"(\" NumExp \")\"\n\n    Assign\n      = ident \"=\" NumExp\n      | strIdent \"=\" StrExp\n\n    BinS\n      = binS \"(\" NumExp (\",\" NumExp)? \")\"\n\n    ChrS\n      = chrS \"(\" NumExp \")\"\n\n    Cint\n      = cint \"(\" NumExp \")\"\n\n    Cls\n      = cls\n\n    Comment\n      = \"\\\\'\" partToEol\n\n    Cos\n      = cos \"(\" NumExp \")\"\n\n    DataItem\n      = string | number | signedDecimal\n\n    Data\n      = data NonemptyListOf<DataItem, \",\">\n\n    DecS\n      = decS \"(\" NumExp \",\" StrExp \")\"\n\n    Def\n      = def fn DefAssign\n    \n    DefArgs\n      = \"(\" ListOf<SimpleIdent, \",\"> \")\"\n\n    DefAssign\n      = ident DefArgs? \"=\" NumExp\n      | strIdent DefArgs? \"=\" StrExp\n\n    Dim\n      = dim NonemptyListOf<DimArrayIdent, \",\">\n\n    End\n      = endLit\n\n    Erase\n      = erase NonemptyListOf<SimpleIdent, \",\">\n\n    Error\n      = error NumExp\n\n    Exp\n      = exp \"(\" NumExp \")\"\n\n    Fix\n      = fix \"(\" NumExp \")\"\n\n    For\n      = for variable \"=\" NumExp to NumExp (step NumExp)?\n\n    Frame\n      = frame\n\n    Gosub\n      = gosub label\n\n    HexS\n      = hexS \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Input\n      = input (string (\";\" | \",\"))? AnyIdent  // or NonemptyListOf?\n\n    Instr\n      = instr \"(\" StrExp \",\" StrExp \")\"\n\n    Int\n      = int \"(\" NumExp \")\"\n\n    LeftS\n      = leftS \"(\" StrExp \",\" NumExp \")\"\n\n    Len\n      = len \"(\" StrExp \")\"\n\n    Log\n      = log \"(\" NumExp \")\"\n\n    Log10\n      = log10 \"(\" NumExp \")\"\n\n    LowerS\n      = lowerS \"(\" StrExp \")\"\n\n    Max\n      = max \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    MidS\n      = midS \"(\" StrExp \",\" NumExp (\",\" NumExp)? \")\"\n\n    MidSAssign\n      = midS \"(\" strIdent \",\" NumExp (\",\" NumExp)? \")\" \"=\" StrExp\n\n    Min\n      = min \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    Mode\n      = mode NumExp\n\n    Pi\n      = pi\n\n    Next\n      = next ListOf<variable, \",\">\n\n    On\n      = on NumExp gosub NonemptyListOf<label, \",\">\n\n    PrintArg\n      = &StrCmpExp NumExp -- strCmp\n      | StrExp\n      | NumExp\n\n    Print\n      = (print | \"?\") ListOf<PrintArg,\";\"> (\";\")?\n\n    Read\n      = read NonemptyListOf<AnyIdent, \",\">\n\n    Rem\n      = rem partToEol\n\n    Restore\n      = restore label?\n\n    Return\n      = return\n\n    RightS\n      = rightS \"(\" StrExp \",\" NumExp \")\"\n\n    Rnd\n      = rnd (\"(\" NumExp \")\")?\n    \n    Round\n      = round \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Sgn\n      = sgn \"(\" NumExp \")\"\n\n    Sin\n      = sin \"(\" NumExp \")\"\n\n    SpaceS\n      = spaceS \"(\" NumExp \")\"\n\n    Sqr\n      = sqr \"(\" NumExp \")\"\n\n    Stop\n      = stop\n\n    StrS\n      = strS \"(\" NumExp \")\"\n\n    StringS\n      = stringS \"(\" NumExp \",\" StrExp \")\"\n\n    Tan\n      = tan \"(\" NumExp \")\"\n\n    Time\n      = time\n\n    UpperS\n      = upperS \"(\" StrExp \")\"\n\n    Val\n      = val \"(\" StrExp \")\"\n\n    Wend\n      = wend\n\n    While\n      = while NumExp\n\n    If\n      = if NumExp then Statements (else Statements)?\n\n    StrExp\n      = StrAddExp\n\n    StrAddExp\n      = StrAddExp \"+\" StrPriExp  -- plus\n      | StrPriExp\n\n    StrPriExp\n      = \"(\" StrExp \")\"  -- paren\n      | BinS\n      | ChrS\n      | DecS\n      | HexS\n      | LeftS\n      | LowerS\n      | MidS\n      | RightS\n      | SpaceS\n      | StrS\n      | StringS\n      | UpperS\n      | StrFnIdent\n      | StrArrayIdent\n      | strIdent\n      | string\n\n\n    NumExp\n      = XorExp\n\n    XorExp\n      = OrExp xor XorExp  -- xor\n      | OrExp\n\n    OrExp\n      = AndExp or OrExp  -- or\n      | AndExp\n\n    AndExp\n      = NotExp and AndExp  -- and\n      | NotExp\n\n    NotExp\n      = not NotExp  -- not\n      | StrCmpExp\n      | CmpExp\n\n    StrCmpExp\n      = StrAddExp \"=\" StrAddExp  -- eq\n      | StrAddExp \"<>\" StrAddExp  -- ne\n      | StrAddExp \"<\" StrAddExp  -- lt\n      | StrAddExp \"<=\" StrAddExp  -- le\n      | StrAddExp \">\" StrAddExp  -- gt\n      | StrAddExp \">=\" StrAddExp  -- ge\n\n    CmpExp\n      = CmpExp \"=\" AddExp  -- eq\n      | CmpExp \"<>\" AddExp  -- ne\n      | CmpExp \"<\" AddExp  -- lt\n      | CmpExp \"<=\" AddExp  -- le\n      | CmpExp \">\" AddExp  -- gt\n      | CmpExp \">=\" AddExp  -- ge\n      | AddExp\n\n    AddExp\n      = AddExp \"+\" ModExp  -- plus\n      | AddExp \"-\" ModExp  -- minus\n      | ModExp\n\n    ModExp\n      = ModExp mod DivExp -- mod\n      | DivExp\n\n    DivExp\n      = DivExp \"\\\\\\\\\" MulExp -- div\n      | MulExp\n\n    MulExp\n      = MulExp \"*\" ExpExp  -- times\n      | MulExp \"/\" ExpExp  -- divide\n      | ExpExp\n\n    ExpExp\n      = PriExp \"^\" ExpExp  -- power\n      | PriExp\n\n    PriExp\n      = \"(\" NumExp \")\"  -- paren\n      | \"+\" PriExp   -- pos\n      | \"-\" PriExp   -- neg\n      | FnIdent\n      | ArrayIdent\n      | ident\n      | number\n      | Abs\n      | Asc\n      | Atn\n      | Cint\n      | Cos\n      | Exp\n      | Fix\n      | Instr\n      | Int\n      | Len\n      | Log\n      | Log10\n      | Max\n      | Min\n      | Pi\n      | Rnd\n      | Round\n      | Sgn\n      | Sin\n      | Sqr\n      | Tan\n      | Time\n      | Val\n\n    ArrayArgs\n      = NonemptyListOf<NumExp, \",\">\n\n    ArrayIdent\n      = ident \"(\" ArrayArgs \")\"\n\n    StrArrayIdent\n      = strIdent \"(\" ArrayArgs \")\"\n\n    DimArrayIdent\n      = ident \"(\" ArrayArgs \")\"\n      | strIdent \"(\" ArrayArgs \")\"\n\n    SimpleIdent\n      = strIdent\n      | ident\n\n    AnyIdent\n      = StrArrayIdent\n      | ArrayIdent\n      | strIdent\n      | ident\n\n    FnIdent\n      = fnIdent FnArgs?\n\n    StrFnIdent\n      = strFnIdent StrFnArgs?\n\n    FnArgs\n      = \"(\" ListOf<NumExp, \",\"> \")\"\n\n    StrFnArgs\n      = \"(\" ListOf<StrExp, \",\"> \")\"\n\n    keyword\n      = abs | after | and | asc | atn | auto | binS | border | break\n      | call | cat | chain | chrS | cint | clear | clg | closein | closeout | cls | cont | copychrS | cos | creal | cursor\n      | data | decS | def | defint | defreal | defstr | deg | delete | derr | di | dim | draw | drawr\n      | edit | ei | else | endLit | ent | env | eof | erase | erl | err | error | every | exp | fill | fix | fn | for | frame | fre | gosub | goto | graphics\n      | hexS | himem | if | ink | inkey | inkeyS|  inp | input | instr | int | joy | key | leftS | len | let | line | list | load | locate | log | log10 | lowerS\n      | mask | max | memory | merge | midS | min | mod | mode | move | mover | new | next | not | on | openin | openout | or | origin | out\n      | paper | peek | pen | pi | plot | plotr | poke | pos | print\n      | rad | randomize | read | release | rem | remain | renum | restore | resume | return | rightS | rnd | round | run\n      | save | sgn | sin | sound | spaceS | spc | speed | sq | sqr | step | stop | strS | stringS | swap | symbol\n      | tab | tag | tagoff | tan | test | testr | then | time | to | troff | tron | unt | upperS | using\n      | val | vpos | wait | wend | while | width | window | write | xor | xpos | ypos | zone\n\n    abs\n      = (\"abs\" | \"ABS\") ~identPart\n    after\n      = (\"after\" | \"AFTER\") ~identPart\n    and\n      = (\"and\" | \"AND\") ~identPart\n    asc\n      = (\"asc\" | \"ASC\") ~identPart\n    atn\n      = (\"atn\" | \"ATN\") ~identPart\n    auto\n      = (\"auto\" | \"AUTO\") ~identPart\n    binS\n      = (\"bin$\" | \"BIN$\") ~identPart\n    border\n      = (\"border\" | \"BORDER\") ~identPart\n    break\n      = (\"break\" | \"BREAK\") ~identPart\n    call\n      = (\"call\" | \"CALL\") ~identPart\n    cat\n      = (\"cat\" | \"CAT\") ~identPart\n    chain\n      = (\"chain\" | \"CHAIN\") ~identPart\n    chrS\n      = (\"chr$\" | \"CHR$\") ~identPart\n    cint\n      = (\"cint\" | \"CINT\") ~identPart\n    clear\n      = (\"clear\" | \"CLEAR\") ~identPart\n    clg\n      = (\"clg\" | \"CLG\") ~identPart\n    closein\n      = (\"closein\" | \"CLOSEIN\") ~identPart\n    closeout\n      = (\"closeout\" | \"CLOSEOUT\") ~identPart\n    cls\n      = (\"cls\" | \"CLS\") ~identPart\n    cont\n      = (\"cont\" | \"CONT\") ~identPart\n    copychrS\n      = (\"copychr$\" | \"COPYCHR$\") ~identPart\n    cos\n      = (\"cos\" | \"COS\") ~identPart\n    creal\n      = (\"creal\" | \"CREAL\") ~identPart\n    cursor\n      = (\"cursor\" | \"CURSOR\") ~identPart\n    data\n      = (\"data\" | \"DATA\") ~identPart\n    decS\n      = (\"dec$\" | \"DEC$\") ~identPart\n    def\n      = (\"def\" | \"DEF\") ~identPart\n    defint\n      = (\"defint\" | \"DEFINT\") ~identPart\n    defreal\n      = (\"defreal\" | \"DEFREAL\") ~identPart\n    defstr\n      = (\"defstr\" | \"DEFSTR\") ~identPart\n    deg\n      = (\"deg\" | \"DEG\") ~identPart\n    delete\n      = (\"delete\" | \"DELETE\") ~identPart\n    derr\n      = (\"derr\" | \"DERR\") ~identPart\n    di\n      = (\"di\" | \"DI\") ~identPart\n    dim\n      = (\"dim\" | \"DIM\") ~identPart\n    draw\n      = (\"draw\" | \"DRAW\") ~identPart\n    drawr\n      = (\"drawr\" | \"DRAWR\") ~identPart\n    edit\n      = (\"edit\" | \"EDIT\") ~identPart\n    ei\n      = (\"ei\" | \"EI\") ~identPart\n    else\n      = (\"else\" | \"ELSE\") ~identPart\n    endLit\n      = (\"end\" | \"END\") ~identPart\n    ent\n      = (\"ent\" | \"ENT\") ~identPart\n    env\n      = (\"env\" | \"ENV\") ~identPart\n    eof\n      = (\"eof\" | \"EOF\") ~identPart\n    erase\n      = (\"erase\" | \"ERASE\") ~identPart\n    erl\n      = (\"erl\" | \"ERL\") ~identPart\n    err\n      = (\"err\" | \"ERR\") ~identPart\n    error\n      = (\"error\" | \"ERROR\") ~identPart\n    every\n      = (\"every\" | \"EVERY\") ~identPart\n    exp\n      = (\"exp\" | \"EXP\") ~identPart\n    fill\n      = (\"fill\" | \"FILL\") ~identPart\n    fix\n      = (\"fix\" | \"FIX\") ~identPart\n    fn\n      = (\"fn\" | \"FN\")  //~identPart\n    for\n      = (\"for\" | \"FOR\") ~identPart\n    frame\n      = (\"frame\" | \"FRAME\") ~identPart\n    fre\n      = (\"fre\" | \"FRE\") ~identPart\n    gosub\n      = (\"gosub\" | \"GOSUB\") ~identPart\n    goto\n      = (\"goto\" | \"GOTO\") ~identPart\n    graphics\n      = (\"graphics\" | \"GRAPHICS\") ~identPart\n    hexS\n      = (\"hex$\" | \"HEX$\") ~identPart\n    himem\n      = (\"himem\" | \"HIMEM\") ~identPart\n    if\n      = (\"if\" | \"IF\") ~identPart\n    ink\n      = (\"ink\" | \"INK\") ~identPart\n    inkey\n      = (\"inkey\" | \"INKEY\") ~identPart\n    inkeyS\n      = (\"inkey$\" | \"INKEY$\") ~identPart\n    inp\n      = (\"inp\" | \"INP\") ~identPart\n    input\n      = (\"input\" | \"INPUT\") ~identPart\n    instr\n      = (\"instr\" | \"INSTR\") ~identPart\n    int\n      = (\"int\" | \"INT\") ~identPart\n    joy\n      = (\"joy\" | \"JOY\") ~identPart\n    key\n      = (\"key\" | \"KEY\") ~identPart\n    leftS\n      = (\"left$\" | \"LEFT$\") ~identPart\n    len\n      = (\"len\" | \"LEN\") ~identPart\n    let\n      = (\"let\" | \"LET\") ~identPart\n    line\n      = (\"line\" | \"LINE\") ~identPart\n    list\n      = (\"list\" | \"LIST\") ~identPart\n    load\n      = (\"load\" | \"LOAD\") ~identPart\n    locate\n      = (\"locate\" | \"LOCATE\") ~identPart\n    log\n      = (\"log\" | \"LOG\") ~identPart\n    log10\n      = (\"log10\" | \"LOG10\") ~identPart\n    lowerS\n      = (\"lower$\" | \"LOWER$\") ~identPart\n    mask\n      = (\"mask\" | \"MASK\") ~identPart\n    max\n      = (\"max\" | \"MAX\") ~identPart\n    memory\n      = (\"memory\" | \"MEMORY\") ~identPart\n    merge\n      = (\"merge\" | \"MERGE\") ~identPart\n    midS\n      = (\"mid$\" | \"MID$\") ~identPart\n    min\n      = (\"min\" | \"MIN\") ~identPart\n    mod\n      = (\"mod\" | \"MOD\") ~identPart\n    mode\n      = (\"mode\" | \"MODE\") ~identPart\n    move\n      = (\"move\" | \"MOVE\") ~identPart\n    mover\n      = (\"mover\" | \"MOVER\") ~identPart\n    new\n      = (\"new\" | \"NEW\") ~identPart\n    next\n      = (\"next\" | \"NEXT\") ~identPart\n    not\n      = (\"not\" | \"NOT\") ~identPart\n    on\n      = (\"on\" | \"ON\") ~identPart\n    openin\n      = (\"openin\" | \"OPENIN\") ~identPart\n    openout\n      = (\"openout\" | \"OPENOUT\") ~identPart\n    or\n      = (\"or\" | \"OR\") ~identPart\n    origin\n      = (\"origin\" | \"ORIGIN\") ~identPart\n    out\n      = (\"out\" | \"OUT\") ~identPart\n    paper\n      = (\"paper\" | \"PAPER\") ~identPart\n    peek\n      = (\"peek\" | \"PEEK\") ~identPart\n    pen\n      = (\"pen\" | \"PEN\") ~identPart\n    pi\n      = (\"pi\" | \"PI\") ~identPart\n    plot\n      = (\"plot\" | \"PLOT\") ~identPart\n    plotr\n      = (\"plotr\" | \"PLOTR\") ~identPart\n    poke\n      = (\"poke\" | \"POKE\") ~identPart\n    pos\n      = (\"pos\" | \"POS\") ~identPart\n    print\n      = (\"print\" | \"PRINT\") ~identPart\n    rad\n      = (\"rad\" | \"RAD\") ~identPart\n    randomize\n      = (\"randomize\" | \"RANDOMIZE\") ~identPart\n    read\n      = (\"read\" | \"READ\") ~identPart\n    release\n      = (\"release\" | \"RELEASE\") ~identPart\n    rem\n      = (\"rem\" | \"REM\") ~identPart\n    remain\n      = (\"remain\" | \"REMAIN\") ~identPart\n    renum\n      = (\"renum\" | \"RENUM\") ~identPart\n    restore\n      = (\"restore\" | \"RESTORE\") ~identPart\n    resume\n      = (\"resume\" | \"RESUME\") ~identPart\n    return\n      = (\"return\" | \"RETURN\") ~identPart\n    rightS\n      = (\"right$\" | \"RIGHT$\") ~identPart\n    rnd\n      = (\"rnd\" | \"RND\") ~identPart\n    round\n      = (\"round\" | \"ROUND\") ~identPart\n    run\n      = (\"run\" | \"RUN\") ~identPart\n    save\n      = (\"save\" | \"SAVE\") ~identPart\n    sgn\n      = (\"sgn\" | \"SGN\") ~identPart\n    sin\n      = (\"sin\" | \"SIN\") ~identPart\n    sound\n      = (\"sound\" | \"SOUND\") ~identPart\n    spaceS\n      = (\"space$\" | \"SPACE$\") ~identPart\n    spc\n      = (\"spc\" | \"SPC\") ~identPart\n    speed\n      = (\"speed\" | \"SPEED\") ~identPart\n    sq\n      = (\"sq\" | \"SQ\") ~identPart\n    sqr\n      = (\"sqr\" | \"SQR\") ~identPart\n    step\n      = (\"step\" | \"STEP\") ~identPart\n    stop\n      = (\"stop\" | \"STOP\") ~identPart\n    strS\n      = (\"str$\" | \"STR$\") ~identPart\n    stringS\n      = (\"string$\" | \"STRING$\") ~identPart\n    swap\n      = (\"swap\" | \"SWAP\") ~identPart\n    symbol\n      = (\"symbol\" | \"SYMBOL\") ~identPart\n    tab\n      = (\"tab\" | \"TAB\") ~identPart\n    tag\n      = (\"tag\" | \"TAG\") ~identPart\n    tagoff\n      = (\"tagoff\" | \"TAGOFF\") ~identPart\n    tan\n      = (\"tan\" | \"TAN\") ~identPart\n    test\n      = (\"test\" | \"TEST\") ~identPart\n    testr\n      = (\"testr\" | \"TESTR\") ~identPart\n    then\n      = (\"then\" | \"THEN\") ~identPart\n    time\n      = (\"time\" | \"TIME\") ~identPart\n    to\n      = (\"to\" | \"TO\") ~identPart\n    troff\n      = (\"troff\" | \"TROFF\") ~identPart\n    tron\n      = (\"tron\" | \"TRON\") ~identPart\n    unt\n      = (\"unt\" | \"UNT\") ~identPart\n    upperS\n      = (\"upper$\" | \"UPPER$\") ~identPart\n    using\n      = (\"using\" | \"USING\") ~identPart\n    val\n      = (\"val\" | \"VAL\") ~identPart\n    vpos\n      = (\"vpos\" | \"VPOS\") ~identPart\n    wait\n      = (\"wait\" | \"WAIT\") ~identPart\n    wend\n      = (\"wend\" | \"WEND\") ~identPart\n    while\n      = (\"while\" | \"WHILE\") ~identPart\n    width\n      = (\"width\" | \"WIDTH\") ~identPart\n    window\n      = (\"window\" | \"WINDOW\") ~identPart\n    write\n      = (\"write\" | \"WRITE\") ~identPart\n    xor\n      = (\"xor\" | \"XOR\") ~identPart\n    xpos\n      = (\"xpos\" | \"XPOS\") ~identPart\n    ypos\n      = (\"ypos\" | \"YPOS\") ~identPart\n    zone\n      = (\"zone\" | \"ZONE\") ~identPart\n\n    ident (an identifier)\n      = ~keyword identName\n\n    fnIdent\n      = fn ~keyword identName\n\n    identName = identStart identPart*\n\n    identStart = letter\n\n    identPart = letter | digit\n\n    variable = ident\n\n    strIdent\n      = ~keyword identName \"$\"\n\n    strFnIdent\n      = fn ~keyword identName \"$\"\n\n    binaryDigit = \"0\"..\"1\"\n\n    exponentPart = (\"e\" | \"E\") signedDecimal\n\n    decimalValue  (decimal number)\n      = digit* \".\" digit+ exponentPart* -- fract\n      | digit+            exponentPart* -- whole\n\n    hexValue\n      = \"&\" hexDigit+\n\n    binaryValue\n      = caseInsensitive<\"&x\"> binaryDigit+\n\n    number  (a number)\n      = decimalValue\n      | hexValue\n      | binaryValue\n\n    signedDecimal\n      = (\"+\" | \"-\")? decimalValue\n\n    partToEol\n      = (~eol any)*\n\n    string = \"\\\\\"\" (\"\\\\\\\\\\\\\"\" | (~\"\\\\\"\" any))* \"\\\\\"\"\n\n    label = digit+\n\n    space := \" \" | \"\\t\"\n\n    eol (end of line)\n      = \"\\\\n\"\n    }\n  `,\n\n  strictGrammar:\n  `strictGrammar <: basicGrammar {\n    abs\n      := \"ABS\" ~identPart\n    after\n      := \"AFTER\" ~identPart\n    and\n      := \"AND\" ~identPart\n    asc\n      := \"ASC\" ~identPart\n    atn\n      := \"ATN\" ~identPart\n    auto\n      := \"AUTO\" ~identPart\n    binS\n      := \"BIN$\" ~identPart\n    border\n      := \"BORDER\" ~identPart\n    break\n      := \"BREAK\" ~identPart\n    call\n      := \"CALL\" ~identPart\n    cat\n      := \"CAT\" ~identPart\n    chain\n      := \"CHAIN\" ~identPart\n    chrS\n      := \"CHR$\" ~identPart\n    cint\n      := \"CINT\" ~identPart\n    clear\n      := \"CLEAR\" ~identPart\n    clg\n      := \"CLG\" ~identPart\n    closein\n      := \"CLOSEIN\" ~identPart\n    closeout\n      := \"CLOSEOUT\" ~identPart\n    cls\n      := \"CLS\" ~identPart\n    cont\n      := \"CONT\" ~identPart\n    copychrS\n      := \"COPYCHR$\" ~identPart\n    cos\n      := \"COS\" ~identPart\n    creal\n      := \"CREAL\" ~identPart\n    cursor\n      := \"CURSOR\" ~identPart\n    data\n      := \"DATA\" ~identPart\n    decS\n      := \"DEC$\" ~identPart\n    def\n      := \"DEF\" ~identPart\n    defint\n      := \"DEFINT\" ~identPart\n    defreal\n      := \"DEFREAL\" ~identPart\n    defstr\n      := \"DEFSTR\" ~identPart\n    deg\n      := \"DEG\" ~identPart\n    delete\n      := \"DELETE\" ~identPart\n    derr\n      := \"DERR\" ~identPart\n    di\n      := \"DI\" ~identPart\n    dim\n      := \"DIM\" ~identPart\n    draw\n      := \"DRAW\" ~identPart\n    drawr\n      := \"DRAWR\" ~identPart\n    edit\n      := \"EDIT\" ~identPart\n    ei\n      := \"EI\" ~identPart\n    else\n      := \"ELSE\" ~identPart\n    endLit\n      := \"END\" ~identPart\n    ent\n      := \"ENT\" ~identPart\n    env\n      := \"ENV\" ~identPart\n    eof\n      := \"EOF\" ~identPart\n    erase\n      := \"ERASE\" ~identPart\n    erl\n      := \"ERL\" ~identPart\n    err\n      := \"ERR\" ~identPart\n    error\n      := \"ERROR\" ~identPart\n    every\n      := \"EVERY\" ~identPart\n    exp\n      := \"EXP\" ~identPart\n    fill\n      := \"FILL\" ~identPart\n    fix\n      := \"FIX\" ~identPart\n    fn\n      := \"FN\"  //~identPart\n    for\n      := \"FOR\" ~identPart\n    frame\n      := \"FRAME\" ~identPart\n    fre\n      := \"FRE\" ~identPart\n    gosub\n      := \"GOSUB\" ~identPart\n    goto\n      := \"GOTO\" ~identPart\n    graphics\n      := \"GRAPHICS\" ~identPart\n    hexS\n      := \"HEX$\" ~identPart\n    himem\n      := \"HIMEM\" ~identPart\n    if\n      := \"IF\" ~identPart\n    ink\n      := \"INK\" ~identPart\n    inkey\n      := \"INKEY\" ~identPart\n    inkeyS\n      := \"INKEY$\" ~identPart\n    inp\n      := \"INP\" ~identPart\n    input\n      := \"INPUT\" ~identPart\n    instr\n      := \"INSTR\" ~identPart\n    int\n      := \"INT\" ~identPart\n    joy\n      := \"JOY\" ~identPart\n    key\n      := \"KEY\" ~identPart\n    leftS\n      := \"LEFT$\" ~identPart\n    len\n      := \"LEN\" ~identPart\n    let\n      := \"LET\" ~identPart\n    line\n      := \"LINE\" ~identPart\n    list\n      := \"LIST\" ~identPart\n    load\n      := \"LOAD\" ~identPart\n    locate\n      := \"LOCATE\" ~identPart\n    log\n      := \"LOG\" ~identPart\n    log10\n      := \"LOG10\" ~identPart\n    lowerS\n      := \"LOWER$\" ~identPart\n    mask\n      := \"MASK\" ~identPart\n    max\n      := \"MAX\" ~identPart\n    memory\n      := \"MEMORY\" ~identPart\n    merge\n      := \"MERGE\" ~identPart\n    midS\n      := \"MID$\" ~identPart\n    min\n      := \"MIN\" ~identPart\n    mod\n      := \"MOD\" ~identPart\n    mode\n      := \"MODE\" ~identPart\n    move\n      := \"MOVE\" ~identPart\n    mover\n      := \"MOVER\" ~identPart\n    new\n      := \"NEW\" ~identPart\n    next\n      := \"NEXT\" ~identPart\n    not\n      := \"NOT\" ~identPart\n    on\n      := \"ON\" ~identPart\n    openin\n      := \"OPENIN\" ~identPart\n    openout\n      := \"OPENOUT\" ~identPart\n    or\n      := \"OR\" ~identPart\n    origin\n      := \"ORIGIN\" ~identPart\n    out\n      := \"OUT\" ~identPart\n    paper\n      := \"PAPER\" ~identPart\n    peek\n      := \"PEEK\" ~identPart\n    pen\n      := \"PEN\" ~identPart\n    pi\n      := \"PI\" ~identPart\n    plot\n      := \"PLOT\" ~identPart\n    plotr\n      := \"PLOTR\" ~identPart\n    poke\n      := \"POKE\" ~identPart\n    pos\n      := \"POS\" ~identPart\n    print\n      := \"PRINT\" ~identPart\n    rad\n      := \"RAD\" ~identPart\n    randomize\n      := \"RANDOMIZE\" ~identPart\n    read\n      := \"READ\" ~identPart\n    release\n      := \"RELEASE\" ~identPart\n    rem\n      := \"REM\" ~identPart\n    remain\n      := \"REMAIN\" ~identPart\n    renum\n      := \"RENUM\" ~identPart\n    restore\n      := \"RESTORE\" ~identPart\n    resume\n      := \"RESUME\" ~identPart\n    return\n      := \"RETURN\" ~identPart\n    rightS\n      := \"RIGHT$\" ~identPart\n    rnd\n      := \"RND\" ~identPart\n    round\n      := \"ROUND\" ~identPart\n    run\n      := \"RUN\" ~identPart\n    save\n      := \"SAVE\" ~identPart\n    sgn\n      := \"SGN\" ~identPart\n    sin\n      := \"SIN\" ~identPart\n    sound\n      := \"SOUND\" ~identPart\n    spaceS\n      := \"SPACE$\" ~identPart\n    spc\n      := \"SPC\" ~identPart\n    speed\n      := \"SPEED\" ~identPart\n    sq\n      := \"SQ\" ~identPart\n    sqr\n      := \"SQR\" ~identPart\n    step\n      := \"STEP\" ~identPart\n    stop\n      := \"STOP\" ~identPart\n    strS\n      := \"STR$\" ~identPart\n    stringS\n      := \"STRING$\" ~identPart\n    swap\n      := \"SWAP\" ~identPart\n    symbol\n      := \"SYMBOL\" ~identPart\n    tab\n      := \"TAB\" ~identPart\n    tag\n      := \"TAG\" ~identPart\n    tagoff\n      := \"TAGOFF\" ~identPart\n    tan\n      := \"TAN\" ~identPart\n    test\n      := \"TEST\" ~identPart\n    testr\n      := \"TESTR\" ~identPart\n    then\n      := \"THEN\" ~identPart\n    time\n      := \"TIME\" ~identPart\n    to\n      := \"TO\" ~identPart\n    troff\n      := \"TROFF\" ~identPart\n    tron\n      := \"TRON\" ~identPart\n    unt\n      := \"UNT\" ~identPart\n    upperS\n      := \"UPPER$\" ~identPart\n    using\n      := \"USING\" ~identPart\n    val\n      := \"VAL\" ~identPart\n    vpos\n      := \"VPOS\" ~identPart\n    wait\n      := \"WAIT\" ~identPart\n    wend\n      := \"WEND\" ~identPart\n    while\n      := \"WHILE\" ~identPart\n    width\n      := \"WIDTH\" ~identPart\n    window\n      := \"WINDOW\" ~identPart\n    write\n      := \"WRITE\" ~identPart\n    xor\n      := \"XOR\" ~identPart\n    xpos\n      := \"XPOS\" ~identPart\n    ypos\n      := \"YPOS\" ~identPart\n    zone\n      := \"ZONE\" ~identPart\n\n    identStart := lower\n}\n  `\n};\n","// Semantics.ts\n\nimport type { ActionDict, Node } from \"ohm-js\";\nimport type { IVm } from \"./Interfaces\";\n\n// Type definition for a defined label entry\ntype DefinedLabelEntryType = {\n    label: string,\n    first: number,\n    last: number,\n    dataIndex: number\n}\n\n// Type definition for a GOSUB label entry\ntype GosubLabelEntryType = {\n    count: number\n}\n\ntype RecursiveArray<T> = T | RecursiveArray<T>[];\n\n// Interface for Semantics Helper\ninterface SemanticsHelper {\n    addDataIndex(count: number): void,\n    addDefinedLabel(label: string, line: number): void,\n    addGosubLabel(label: string): void,\n    addIndent(num: number): number,\n    addInstr(name: string): number,\n    addRestoreLabel(label: string): void,\n    applyNextIndent(): void,\n    getDataIndex(): number,\n    getDataList(): (string | number)[],\n    getDefinedLabels(): DefinedLabelEntryType[],\n    getGosubLabels(): Record<string, GosubLabelEntryType>,\n    getIndent(): number,\n    getIndentStr(): string,\n    getInstrMap(): Record<string, number>,\n    getRestoreMap(): Record<string, number>,\n    getVariable(name: string): string,\n    getVariables(): string[],\n    incrementLineIndex(): number,\n    nextIndentAdd(num: number): void,\n    setIndent(indent: number): void\n}\n\nfunction getCodeSnippets() {\n\tconst _o = {} as IVm;\n\tlet _data: (string | number)[] = [];\n\tlet _dataPtr = 0;\n\tlet _restoreMap: Record<string, number> = {};\n\n\tconst codeSnippets: Record<string, (...args: any[]) => unknown> = {\n\t\t_setDataDummy: function _setDataDummy() { // not really used\n\t\t\t_data = [ ];\n\t\t\t_dataPtr = 0;\n\t\t\t_restoreMap = {};\n\t\t\t//Object.assign(_o, vm);\n\t\t},\n\t\tbin$: function bin$(num: number, pad: number = 0) {\n\t\t\treturn num.toString(2).toUpperCase().padStart(pad, \"0\");\n\t\t},\n\t\tcls: function cls() {\n\t\t\t_o.cls();\n\t\t},\n\t\tdec$: function dec$(num: number, format: string) {\n\t\t\tconst [, decimalPart] = format.split(\".\", 2);\n\t\t\tconst decimals = decimalPart ? decimalPart.length : 0;\n\t\t\tconst str = num.toFixed(decimals);\n\t\t\tconst padLen = format.length - str.length;\n\t\t\tconst pad = padLen > 0 ? \" \".repeat(padLen) : \"\";\n\t\t\treturn pad + str;\n\t\t},\n\t\tdim: function dim(dims: number[], initVal: string | number = 0) {\n\t\t\tconst createRecursiveArray = (depth: number): RecursiveArray<string | number> => {\n\t\t\t\tconst length = dims[depth] + 1; // +1 because of 0-based index\n\t\t\t\tconst array = Array.from({ length }, () =>\n\t\t\t\t\tdepth + 1 < dims.length ? createRecursiveArray(depth + 1) : initVal\n\t\t\t\t);\n\t\t\t\treturn array;\n\t\t\t};\n\t\t\treturn createRecursiveArray(0);\n\t\t},\n\t\tframe: function frame() { // async\n\t\t\treturn new Promise<void>(resolve => setTimeout(() => resolve(), Date.now() % 50));\n\t\t},\n\t\thex$: function hex$(num: number, pad?: number) {\n\t\t\treturn num.toString(16).toUpperCase().padStart(pad || 0, \"0\");\n\t\t},\n\t\tinput: function input(msg: string, isNum: boolean) { // async\n\t\t\treturn new Promise(resolve => setTimeout(() => {\n\t\t\t\tconst input = _o.prompt(msg);\n\t\t\t\tresolve(isNum ? Number(input) : input);\n\t\t\t}, 0));\n\t\t},\n\t\tmid$Assign: function mid$Assign(s: string, start: number, newString: string, len?: number) {\n\t\t\tstart -= 1;\n\t\t\tlen = Math.min(len ?? newString.length, newString.length, s.length - start);\n\t\t\treturn s.substring(0, start) + newString.substring(0, len) + s.substring(start + len);\n\t\t},\n\t\tprint: function print(...args: (string | number)[]) {\n\t\t\tconst _printNumber = (arg: number) => (arg >= 0 ? ` ${arg} ` : `${arg} `);\n\t\t\tconst output = args.map((arg) => (typeof arg === \"number\") ? _printNumber(arg) : arg).join(\"\");\n\t\t\t_o.print(output);\n\t\t},\n\t\tread: function read() {\n\t\t\treturn _data[_dataPtr++];\n\t\t},\n\t\trestore: function restore(label: string) {\n\t\t\t_dataPtr = _restoreMap[label];\n\t\t},\n\t\tround: function round(num: number, dec: number) {\n\t\t\treturn Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n\t\t},\n\t\tstr$: function str$(num: number) {\n\t\t\treturn num >= 0 ? ` ${num}`: String(num);\n\t\t},\n\t\ttime: function time() {\n\t\t\treturn (Date.now() * 3 / 10) | 0;\n\t\t},\n\t\tval: function val(str: string) {\n\t\t\treturn Number(str.replace(\"&x\", \"0b\").replace(\"&\", \"0x\"));\n\t\t}\n\t};\n\treturn codeSnippets;\n}\n\n/*\n// round with higher precision: https://www.jacklmoore.com/notes/rounding-in-javascript\nround: function round(num: number, dec: number) {\n\tconst maxDecimals = 20 - Math.floor(Math.log10(Math.abs(num))); // limit for JS\n\tif (dec >= 0 && dec > maxDecimals) {\n\t\tdec = maxDecimals;\n\t}\n\treturn Math.sign(num) * Number(Math.round(Number(Math.abs(num) + \"e\" + dec)) + \"e\" + (dec >= 0 ? -dec : -dec));\n}\n*/\n\nfunction trimIndent(code: string) {\n\tconst lines = code.split(\"\\n\");\n\tconst lastLine = lines[lines.length - 1];\n\n\tconst match = lastLine.match(/^(\\s+)}$/);\n\tif (match) {\n\t\tconst indent = match[1];\n\t\tconst trimmedLines = lines.map((line) => line.startsWith(indent) ? line.slice(indent.length) : line);\n\t\treturn trimmedLines.join(\"\\n\");\n\t}\n\treturn code;\n}\n\n\nfunction evalChildren(children: Node[]) {\n\treturn children.map(c => c.eval());\n}\n\nfunction getSemantics(semanticsHelper: SemanticsHelper) {\n\t// Semantics to evaluate an arithmetic expression\n\tconst semantics: ActionDict<string | string[]> = {\n\t\tProgram(lines: Node) {\n\t\t\tconst lineList = evalChildren(lines.children);\n\n\t\t\tconst variableList = semanticsHelper.getVariables();\n\t\t\tconst variableDeclarations = variableList.length ? \"let \" + variableList.map((v) => v.endsWith(\"$\") ? `${v} = \"\"` : `${v} = 0`).join(\", \") + \";\" : \"\";\n\n\t\t\t// find subroutines\n\t\t\tconst definedLabels = semanticsHelper.getDefinedLabels();\n\t\t\tconst gosubLabels = semanticsHelper.getGosubLabels();\n\t\t\tconst restoreMap = semanticsHelper.getRestoreMap();\n\n\t\t\tconst awaitLabels: string[] = [];\n\t\t\tlet subroutineStart: DefinedLabelEntryType | undefined;\n\t\t\tfor (const label of definedLabels) {\n\t\t\t\tif (gosubLabels[label.label]) {\n\t\t\t\t\tsubroutineStart = label;\n\t\t\t\t}\n\n\t\t\t\tif (subroutineStart && label.last >= 0) {\n\t\t\t\t\tconst first = subroutineStart.first;\n\t\t\t\t\tconst indent = lineList[first].search(/\\S|$/);\n\t\t\t\t\tconst indentStr = \" \".repeat(indent);\n\n\t\t\t\t\tlet hasAwait = false;\n\t\t\t\t\tfor (let i = first; i <= label.last; i += 1) {\n\t\t\t\t\t\tif (lineList[i].includes(\"await \")) {\n\t\t\t\t\t\t\thasAwait = true; // quick check\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlineList[i] = \"  \" + lineList[i]; // indent\n\t\t\t\t\t}\n\n\t\t\t\t\tconst asyncStr = hasAwait ? \"async \" : \"\";\n\t\t\t\t\tlineList[first] = `${indentStr}${asyncStr}function _${subroutineStart.label}() {${indentStr}\\n` + lineList[first];\n\t\t\t\t\tlineList[label.last] += `\\n${indentStr}` + \"}\"; //TS issue when using the following? `\\n${indentStr}};`\n\t\t\t\t\tif (hasAwait) {\n\t\t\t\t\t\tawaitLabels.push(subroutineStart.label);\n\t\t\t\t\t}\n\t\t\t\t\tsubroutineStart = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (restoreMap[label.label] === -1) {\n\t\t\t\t\trestoreMap[label.label] = label.dataIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst dataList = semanticsHelper.getDataList();\n\t\t\tif (dataList.length) {\n\t\t\t\tfor (const key of Object.keys(restoreMap)) {\n\t\t\t\t\tlet index = restoreMap[key];\n\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\trestoreMap[key] = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlineList.unshift(`const {_data, _restoreMap} = _defineData();\\nlet _dataPtr = 0;`);\n\t\t\t\tlineList.push(`function _defineData() {\\n  const _data = [\\n${dataList.join(\",\\n\")}\\n  ];\\n  const _restoreMap = ${JSON.stringify(restoreMap)};\\n  return {_data, _restoreMap};\\n}`);\n\t\t\t}\n\n\t\t\tlineList.push(\"// library\");\n\n\t\t\tconst instrMap = semanticsHelper.getInstrMap();\n\t\t\tconst codeSnippets = getCodeSnippets();\n\n\t\t\tlet needsAsync = false;\n\t\t\tfor (const key of Object.keys(codeSnippets)) {\n\t\t\t\tif (instrMap[key]) {\n\t\t\t\t\tconst code = String(codeSnippets[key]);\n\t\t\t\t\tconst adaptedCode = trimIndent(code);\n\t\t\t\t\tif (adaptedCode.includes(\"Promise\") || adaptedCode.includes(\"await\")) {\n\t\t\t\t\t\tlineList.push(\"async \" + adaptedCode);\n\t\t\t\t\t\tneedsAsync = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlineList.push(adaptedCode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (variableDeclarations) {\n\t\t\t\tlineList.unshift(variableDeclarations);\n\t\t\t}\n\n\t\t\tif (needsAsync) {\n\t\t\t\tlineList.unshift(`return async function() {`);\n\t\t\t\tlineList.push('}();');\n\t\t\t}\n\n\t\t\tlineList.unshift(`\"use strict\"`);\n\n\t\t\tlet lineStr = lineList.filter((line) => line.trimEnd() !== \"\").join('\\n');\n\t\t\tif (awaitLabels.length) {\n\t\t\t\tfor (const label of awaitLabels) {\n\t\t\t\t\tconst regEx = new RegExp(`_${label}\\\\(\\\\);`, \"g\");\n\t\t\t\t\tlineStr = lineStr.replace(regEx, `await _${label}();`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn lineStr;\n\t\t},\n\n\t\tLine(label: Node, stmts: Node, comment: Node, _eol: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst labelString = label.sourceString;\n\n\t\t\tconst currentLineIndex = semanticsHelper.incrementLineIndex() - 1;\n\n\t\t\tif (labelString) {\n\t\t\t\tsemanticsHelper.addDefinedLabel(labelString, currentLineIndex);\n\t\t\t}\n\n\t\t\tconst lineStr = stmts.eval();\n\n\t\t\tif (lineStr === \"return\") {\n\t\t\t\tconst definedLabels = semanticsHelper.getDefinedLabels();\n\t\t\t\tif (definedLabels.length) {\n\t\t\t\t\tconst lastLabelItem = definedLabels[definedLabels.length - 1];\n\t\t\t\t\tlastLabelItem.last = currentLineIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst commentStr = comment.sourceString ? `; //${comment.sourceString.substring(1)}` : \"\";\n\t\t\tconst semi = lineStr === \"\" || lineStr.endsWith(\"{\") || lineStr.endsWith(\"}\") || lineStr.startsWith(\"//\") || commentStr ? \"\" : \";\";\n\n\t\t\tconst indentStr = semanticsHelper.getIndentStr();\n\t\t\tsemanticsHelper.applyNextIndent();\n\n\t\t\treturn indentStr + lineStr + commentStr + semi;\n\t\t},\n\n\t\tStatements(stmt: Node, _stmtSep: Node, stmts: Node) {\n\t\t\t// separate statements, use \";\", if the last stmt does not end with \"{\"\n\t\t\tconst statements = [stmt.eval(), ...evalChildren(stmts.children)];\n\t\t\treturn statements.reduce((acc, current) => acc.endsWith(\"{\") ? `${acc} ${current}` : `${acc}; ${current}`);\n\t\t},\n\n\t\tArrayAssign(ident: Node, _op: Node, e: Node): string {\n\t\t\treturn `${ident.eval()} = ${e.eval()}`;\n\t\t},\n\n\t\tAssign(ident: Node, _op: Node, e: Node): string {\n\t\t\tconst variableName = ident.sourceString;\n\t\t\tconst resolvedVariableName = semanticsHelper.getVariable(variableName);\n\t\t\tconst value = e.eval();\n\t\t\treturn `${resolvedVariableName} = ${value}`;\n\t\t},\n\n\t\tAbs(_absLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.abs(${e.eval()})`;\n\t\t},\n\n\t\tAsc(_ascLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).charCodeAt(0)`;\n\t\t},\n\n\t\tAtn(_atnLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.atan(${e.eval()})`;\n\t\t},\n\n\t\tBinS(_binLit: Node, _open: Node, e: Node, _comma: Node, n: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"bin$\");\n\t\t\tconst pad = n.child(0)?.eval();\n\t\t\treturn pad !== undefined ? `bin$(${e.eval()}, ${pad})` : `bin$(${e.eval()})`\n\t\t},\n\n\t\tChrS(_chrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `String.fromCharCode(${e.eval()})`;\n\t\t},\n\n\t\tComment(_commentLit: Node, remain: Node) {\n\t\t\treturn `//${remain.sourceString}`;\n\t\t},\n\n\t\tCos(_cosLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.cos(${e.eval()})`;\n\t\t},\n\n\t\tCint(_cintLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.round(${e.eval()})`;\n\t\t},\n\n\t\tCls(_clsLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"cls\");\n\t\t\treturn `cls()`;\n\t\t},\n\n\t\tData(_datalit: Node, args: Node) {\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\n\t\t\tconst definedLabels = semanticsHelper.getDefinedLabels();\n\n\t\t\tif (definedLabels.length) {\n\t\t\t\tconst currentLabel = definedLabels[definedLabels.length - 1];\n\t\t\t\tif (currentLabel.dataIndex === -1) {\n\t\t\t\t\tconst dataIndex = semanticsHelper.getDataIndex();\n\t\t\t\t\tcurrentLabel.dataIndex = dataIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst dataList = semanticsHelper.getDataList();\n\t\t\tdataList.push(argList.join(\", \"));\n\t\t\tsemanticsHelper.addDataIndex(argList.length);\n\t\t\treturn \"\";\n\t\t},\n\n\t\tDecS(_decLit: Node, _open: Node, num: Node, _comma: Node, format: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"dec$\");\n\t\t\treturn `dec$(${num.eval()}, ${format.eval()})`;\n\t\t},\n\n\t\tDef(_defLit: Node, _fnLit: Node, assign: Node) {\n\t\t\treturn `${assign.eval()}`;\n\t\t},\n\n\t\tDefArgs(_open: Node, arrayIdents: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argList = arrayIdents.asIteration().children.map(c => c.eval());\n\n\t\t\treturn `(${argList.join(\", \")})`;\n\t\t},\n\n\t\tDefAssign(ident: Node, args: Node, _equal: Node, e: Node) {\n\t\t\tconst argStr = args.children.map(c => c.eval()).join(\", \") || \"()\";\n\t\t\tconst fnIdent = semanticsHelper.getVariable(`fn${ident.sourceString}`);\n\n\t\t\treturn `${fnIdent} = ${argStr} => ${e.eval()}`;\n\t\t},\n\n\t\tDim(_dimLit: Node, arrayIdents: Node) {\n\t\t\tconst argList = arrayIdents.asIteration().children.map(c => c.eval());\n\t\t\tconst results: string[] = [];\n\n\t\t\tfor (const arg of argList) {\n\t\t\t\tconst [ident, ...indices] = arg;\n\t\t\t\tlet createArrStr: string;\n\t\t\t\tif (indices.length > 1) { // multi-dimensional?\n\t\t\t\t\tconst initValStr = ident.endsWith(\"$\") ? ', \"\"' : '';\n\t\t\t\t\tcreateArrStr = `dim([${indices}]${initValStr})`; // indices are automatically joined with comma\n\t\t\t\t\tsemanticsHelper.addInstr(\"dim\");\n\t\t\t\t} else {\n\t\t\t\t\tconst fillStr = ident.endsWith(\"$\") ? `\"\"` : \"0\";\n\t\t\t\t\tcreateArrStr = `new Array(${indices[0]} + 1).fill(${fillStr})`; // +1 because of 0-based index\n\t\t\t\t}\n\t\t\t\tresults.push(`${ident} = ${createArrStr}`);\n\t\t\t}\n\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tEnd(_endLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `return \"end\"`;\n\t\t},\n\n\t\tErase(_eraseLit: Node, arrayIdents: Node) { // erase not really needed\n\t\t\tconst argList = arrayIdents.asIteration().children.map(c => c.eval());\n\t\t\tconst results: string[] = [];\n\n\t\t\tfor (const ident of argList) {\n\t\t\t\tconst initValStr = ident.endsWith(\"$\") ? '\"\"' : '0';\n\t\t\t\tresults.push(`${ident} = ${initValStr}`);\n\t\t\t}\n\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tError(_errorLit: Node, e: Node) {\n\t\t\treturn `throw new Error(${e.eval()})`;\n\t\t},\n\n\t\tExp(_expLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.exp(${e.eval()})`;\n\t\t},\n\n\t\tFix(_fixLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.trunc(${e.eval()})`;\n\t\t},\n\n\t\tFnArgs(_open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\n\t\t\treturn `(${argList.join(\", \")})`;\n\t\t},\n\n\t\tStrFnArgs(_open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\n\t\t\treturn `(${argList.join(\", \")})`;\n\t\t},\n\n\t\tFnIdent(fnIdent: Node, args: Node) {\n\t\t\tconst argStr = args.child(0)?.eval() || \"()\";\n\t\t\treturn `${fnIdent.eval()}${argStr}`;\n\t\t},\n\n\t\tStrFnIdent(fnIdent: Node, args: Node) {\n\t\t\tconst argStr = args.child(0)?.eval() || \"()\";\n\t\t\treturn `${fnIdent.eval()}${argStr}`;\n\t\t},\n\n\t\tFor(_forLit: Node, variable: Node, _eqSign: Node, start: Node, _dirLit: Node, end: Node, _stepLit: Node, step: Node) {\n\t\t\tconst varExp = variable.eval();\n\t\t\tconst startExp = start.eval();\n\t\t\tconst endExp = end.eval();\n\t\t\tconst stepExp = step.child(0)?.eval() || \"1\";\n\n\t\t\tconst stepAsNum = Number(stepExp);\n\n\t\t\tlet cmpSt = \"\";\n\t\t\tif (isNaN(stepAsNum)) {\n\t\t\t\tcmpSt = `${stepExp} >= 0 ? ${varExp} <= ${endExp} : ${varExp} >= ${endExp}`\n\t\t\t} else {\n\t\t\t\tcmpSt = stepExp >= 0 ? `${varExp} <= ${endExp}` : `${varExp} >= ${endExp}`;\n\t\t\t}\n\n\t\t\tsemanticsHelper.nextIndentAdd(2);\n\t\t\tconst result = `for (${varExp} = ${startExp}; ${cmpSt}; ${varExp} += ${stepExp}) {`;\n\n\t\t\treturn result;\n\t\t},\n\n\t\tFrame(_frameLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"frame\");\n\t\t\treturn `await frame()`;\n\t\t},\n\n\t\tGosub(_gosubLit: Node, e: Node) {\n\t\t\tconst labelStr = e.sourceString;\n\t\t\tsemanticsHelper.addGosubLabel(labelStr);\n\n\t\t\treturn `_${labelStr}()`;\n\t\t},\n\n\t\tHexS(_hexLit: Node, _open: Node, e: Node, _comma: Node, n: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"hex$\");\n\t\t\tconst pad = n.child(0)?.eval();\n\t\t\treturn pad !== undefined ? `hex$(${e.eval()}, ${pad})` : `hex$(${e.eval()})`\n\t\t},\n\n\t\tIf(_iflit: Node, condExp: Node, _thenLit: Node, thenStat: Node, elseLit: Node, elseStat: Node) {\n\t\t\tconst initialIndent = semanticsHelper.getIndentStr();\n\t\t\tsemanticsHelper.addIndent(2);\n\t\t\tconst increasedIndent = semanticsHelper.getIndentStr();\n\n\t\t\tconst cond = condExp.eval();\n\t\t\tconst thSt = thenStat.eval();\n\n\t\t\tlet result = `if (${cond}) {\\n${increasedIndent}${thSt}\\n${initialIndent}}`; // put in newlines to also allow line comments\n\t\t\tif (elseLit.sourceString) {\n\t\t\t\tconst elseSt = evalChildren(elseStat.children).join('; ');\n\t\t\t\tresult += ` else {\\n${increasedIndent}${elseSt}\\n${initialIndent}}`;\n\t\t\t}\n\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn result;\n\t\t},\n\n\t\tInput(_inputLit: Node, message: Node, _semi: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"input\");\n\n\t\t\tconst msgStr = message.sourceString.replace(/\\s*[;,]$/, \"\");\n\t\t\tconst ident = e.eval();\n\t\t\tconst isNumStr = ident.includes(\"$\") ? \"\" : \", true\";\n\n\t\t\treturn `${ident} = await input(${msgStr}${isNumStr})`;\n\t\t},\n\n\t\tInstr(_instrLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `((${e1.eval()}).indexOf(${e2.eval()}) + 1)`;\n\t\t},\n\n\t\tInt(_intLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.floor(${e.eval()})`;\n\t\t},\n\n\t\tLeftS(_leftLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e1.eval()}).slice(0, ${e2.eval()})`;\n\t\t},\n\n\t\tLen(_lenLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).length`;\n\t\t},\n\n\t\tLog(_logLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.log(${e.eval()})`;\n\t\t},\n\n\t\tLog10(_log10Lit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.log10(${e.eval()})`;\n\t\t},\n\n\t\tLowerS(_lowerLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).toLowerCase()`;\n\t\t},\n\n\t\tMax(_maxLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval()); // see also: ArrayArgs\n\t\t\treturn `Math.max(${argList})`;\n\t\t},\n\n\t\tMidS(_midLit: Node, _open: Node, e1: Node, _comma1: Node, e2: Node, _comma2: Node, e3: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst length = e3.child(0)?.eval();\n\t\t\tconst lengthStr = length === undefined ? \"\" : `, ${length}`;\n\t\t\treturn `(${e1.eval()}).substr(${e2.eval()} - 1${lengthStr})`;\n\t\t},\n\n\t\tMidSAssign(_midLit: Node, _open: Node, ident: Node, _comma1: Node, e2: Node, _comma2: Node, e3: Node, _close: Node, _op: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"mid$Assign\");\n\n\t\t\tconst variableName = ident.sourceString;\n\t\t\tconst resolvedVariableName = semanticsHelper.getVariable(variableName);\n\t\t\tconst start = e2.eval();\n\t\t\tconst newString = e.eval();\n\t\t\tconst length = e3.child(0)?.eval(); // also undefined possible\n\n\t\t\treturn `${resolvedVariableName} = mid$Assign(${resolvedVariableName}, ${start}, ${newString}, ${length})`;\n\t\t},\n\n\t\tMin(_minLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval()); // see also: ArrayArgs\n\t\t\treturn `Math.min(${argList})`;\n\t\t},\n\n\t\tMode(_clsLit: Node, _num: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"cls\"); // currently MODE is the same as CLS\n\t\t\treturn `cls()`;\n\t\t},\n\n\t\tNext(_nextLit: Node, variables: Node) {\n\t\t\tconst argList = variables.asIteration().children.map(c => c.eval());\n\t\t\tif (!argList.length) {\n\t\t\t\targList.push(\"_any\");\n\t\t\t}\n\t\t\tsemanticsHelper.addIndent(-2 * argList.length);\n\t\t\treturn '} '.repeat(argList.length).slice(0, -1);\n\t\t},\n\n\t\tOn(_nLit: Node, e1: Node, _gosubLit: Node, args: Node) {\n\t\t\tconst index = e1.eval();\n\t\t\tconst argList = args.asIteration().children.map(c => c.sourceString);\n\n\t\t\tfor (let i = 0; i < argList.length; i += 1) {\n\t\t\t\tsemanticsHelper.addGosubLabel(argList[i]);\n\t\t\t}\n\n\t\t\treturn `[${argList.map((label) => `_${label}`).join(\",\")}]?.[${index} - 1]()`; // 1-based index\n\t\t},\n\n\t\tPi(_piLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"Math.PI\";\n\t\t},\n\n\t\tPrintArg_strCmp(_cmp: Node, args: Node) {\n\t\t\tconst paramStr = args.children[0].eval();\n\t\t\treturn paramStr;\n\t\t},\n\n\t\tPrint(_printLit: Node, args: Node, semi: Node) {\n\t\t\tsemanticsHelper.addInstr(\"print\");\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\t\t\tconst paramStr = argList.join(', ') || \"\";\n\n\t\t\tlet newlineStr = \"\";\n\t\t\tif (!semi.sourceString) {\n\t\t\t\tnewlineStr = paramStr ? `, \"\\\\n\"` : `\"\\\\n\"`;\n\t\t\t}\n\t\t\treturn `print(${paramStr}${newlineStr})`;\n\t\t},\n\n\t\tRead(_readlit: Node, args: Node) {\n\t\t\tsemanticsHelper.addInstr(\"read\");\n\t\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\t\t\tconst results = argList.map(identifier => `${identifier} = read()`);\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tRem(_remLit: Node, remain: Node) {\n\t\t\treturn `// ${remain.sourceString}`;\n\t\t},\n\n\t\tRestore(_restoreLit: Node, e: Node) {\n\t\t\tconst labelStr = e.sourceString || \"0\";\n\t\t\tsemanticsHelper.addRestoreLabel(labelStr);\n\n\t\t\tsemanticsHelper.addInstr(\"restore\");\n\t\t\treturn `restore(${labelStr})`;\n\t\t},\n\n\t\tReturn(_returnLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"return\";\n\t\t},\n\n\t\tRightS(_rightLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e1.eval()}).slice(-(${e2.eval()}))`;\n\t\t},\n\n\t\tRnd(_rndLit: Node, _open: Node, _e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// args are ignored\n\t\t\treturn `Math.random()`;\n\t\t},\n\n\t\tRound(_roundLit: Node, _open: Node, value: Node, _comma: Node, decimals: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst decimalPlaces = decimals.child(0)?.eval();\n\t\t\tif (decimalPlaces) {\n\t\t\t\tsemanticsHelper.addInstr(\"round\");\n\t\t\t\treturn `round(${value.eval()}, ${decimalPlaces})`;\n\t\t\t}\n\t\t\treturn `Math.round(${value.eval()})`; // common round without decimals places\n\t\t\t// A better way to avoid rounding errors: https://www.jacklmoore.com/notes/rounding-in-javascript\n\t\t},\n\n\t\tSgn(_sgnLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sign(${e.eval()})`;\n\t\t},\n\n\t\tSin(_sinLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sin(${e.eval()})`;\n\t\t},\n\n\t\tSpaceS(_stringLit: Node, _open: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\" \".repeat(${len.eval()})`;\n\t\t},\n\n\t\tSqr(_sqrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sqrt(${e.eval()})`;\n\t\t},\n\n\t\tStop(_stopLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `return \"stop\"`;\n\t\t},\n\n\t\tStrS(_strLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst arg = e.eval();\n\n\t\t\tif (isNaN(Number(arg))) {\n\t\t\t\tsemanticsHelper.addInstr(\"str$\");\n\t\t\t\treturn `str$(${arg})`;\n\t\t\t}\n\t\t\t// simplify if we know at compile time that arg is a positive number\n\t\t\treturn arg >= 0 ? `(\" \" + String(${arg}))` : `String(${arg})`;\n\t\t},\n\n\t\tStringS(_stringLit: Node, _open: Node, len: Node, _commaLit: Node, chr: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// Note: String$: we only support second parameter as string; we do not use charAt(0) to get just one char\n\t\t\treturn `(${chr.eval()}).repeat(${len.eval()})`;\n\t\t},\n\n\t\tTan(_tanLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.tan(${e.eval()})`;\n\t\t},\n\n\t\tTime(_timeLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"time\");\n\t\t\treturn `time()`;\n\t\t},\n\n\t\tUpperS(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).toUpperCase()`;\n\t\t},\n\n\t\tVal(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst numPattern = /^\"[\\\\+\\\\-]?\\d*\\.?\\d+(?:[Ee][\\\\+\\\\-]?\\d+)?\"$/;\n\t\t\tconst numStr = String(e.eval());\n\n\t\t\tif (numPattern.test(numStr)) {\n\t\t\t\treturn `Number(${numStr})`; // for non-hex/bin number strings we can use this simple version\n\t\t\t}\n\t\t\tsemanticsHelper.addInstr(\"val\");\n\t\t\treturn `val(${numStr})`;\n\t\t},\n\n\t\tWend(_wendLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn '}';\n\t\t},\n\n\t\tWhile(_whileLit: Node, e: Node) {\n\t\t\tconst cond = e.eval();\n\t\t\tsemanticsHelper.nextIndentAdd(2);\n\t\t\treturn `while (${cond}) {`;\n\t\t},\n\n\t\tXorExp_xor(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} ^ ${b.eval()}`;\n\t\t},\n\n\t\tOrExp_or(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} | ${b.eval()}`;\n\t\t},\n\n\t\tAndExp_and(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} & ${b.eval()}`;\n\t\t},\n\n\t\tNotExp_not(_op: Node, e: Node) {\n\t\t\treturn `~(${e.eval()})`;\n\t\t},\n\n\t\tCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} === ${b.eval()})`; // or -Number(...), or -(...), or: ? -1 : 0\n\t\t},\n\t\tCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} !== ${b.eval()})`;\n\t\t},\n\t\tCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} < ${b.eval()})`;\n\t\t},\n\t\tCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} <= ${b.eval()})`;\n\t\t},\n\t\tCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} > ${b.eval()})`;\n\t\t},\n\t\tCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} >= ${b.eval()})`;\n\t\t},\n\n\t\tAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} + ${b.eval()}`;\n\t\t},\n\t\tAddExp_minus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} - ${b.eval()}`;\n\t\t},\n\n\t\tModExp_mod(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} % ${b.eval()}`;\n\t\t},\n\n\t\tDivExp_div(a: Node, _op: Node, b: Node) {\n\t\t\treturn `((${a.eval()} / ${b.eval()}) | 0)`;\n\t\t},\n\n\t\tMulExp_times(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} * ${b.eval()}`;\n\t\t},\n\t\tMulExp_divide(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} / ${b.eval()}`;\n\t\t},\n\n\t\tExpExp_power(a: Node, _: Node, b: Node) {\n\t\t\treturn `Math.pow(${a.eval()}, ${b.eval()})`;\n\t\t},\n\n\t\tPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()})`;\n\t\t},\n\t\tPriExp_pos(_op: Node, e: Node) {\n\t\t\treturn `+${e.eval()}`;\n\t\t},\n\t\tPriExp_neg(_op: Node, e: Node) {\n\t\t\treturn `-${e.eval()}`;\n\t\t},\n\n\t\tStrCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} === ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} !== ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} < ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} <= ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} > ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} >= ${b.eval()})`;\n\t\t},\n\n\t\tStrAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} + ${b.eval()}`;\n\t\t},\n\n\t\tStrPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()})`;\n\t\t},\n\n\t\tArrayArgs(args: Node) {\n\t\t\treturn args.asIteration().children.map(c => String(c.eval()));\n\t\t},\n\n\t\tArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${ident.eval()}[${e.eval().join(\"][\")}]`;\n\t\t},\n\n\t\tStrArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${ident.eval()}[${e.eval().join(\"][\")}]`;\n\t\t},\n\n\t\tDimArrayIdent(ident: Node, _open: Node, indices: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn [ident.eval(), ...indices.eval()];\n\t\t},\n\n\t\tdecimalValue(value: Node) {\n\t\t\treturn value.sourceString;\n\t\t},\n\n\t\thexValue(_prefix: Node, value: Node) {\n\t\t\treturn `0x${value.sourceString}`;\n\t\t},\n\n\t\tbinaryValue(_prefix: Node, value: Node) {\n\t\t\treturn `0b${value.sourceString}`;\n\t\t},\n\n\t\tsignedDecimal(sign: Node, value: Node) {\n\t\t\treturn `${sign.sourceString}${value.sourceString}`;\n\t\t},\n\n\t\tstring(_quote1: Node, e: Node, _quote2: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\"${e.sourceString}\"`;\n\t\t},\n\n\t\tident(ident: Node) {\n\t\t\tconst name = ident.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tfnIdent(fn: Node, ident: Node) {\n\t\t\tconst name = fn.sourceString + ident.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tstrIdent(ident: Node, typeSuffix: Node) {\n\t\t\tconst name = ident.sourceString + typeSuffix.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tstrFnIdent(fn: Node, ident: Node, typeSuffix: Node) {\n\t\t\tconst name = fn.sourceString + ident.sourceString + typeSuffix.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t}\n\t};\n\treturn semantics;\n}\n\n\nexport class Semantics {\n\tprivate lineIndex = 0;\n\n\tprivate indent = 0;\n\tprivate indentAdd = 0;\n\n\tprivate readonly variables: Record<string, number> = {};\n\n\tprivate readonly definedLabels: DefinedLabelEntryType[] = [];\n\tprivate readonly gosubLabels: Record<string, GosubLabelEntryType> = {};\n\n\tprivate readonly dataList: (string | number)[] = [];\n\tprivate dataIndex = 0;\n\tprivate readonly restoreMap: Record<string, number> = {};\n\n\tprivate static readonly reJsKeyword = /^(arguments|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/;\n\n\tprivate readonly instrMap: Record<string, number> = {};\n\n\tprivate addIndent(num: number) {\n\t\tif (num < 0) {\n\t\t\tthis.applyNextIndent();\n\t\t}\n\t\tthis.indent += num;\n\t\treturn this.indent;\n\t}\n\n\tprivate setIndent(indent: number) {\n\t\tthis.indent = indent;\n\t}\n\n\tprivate getIndent() {\n\t\treturn this.indent;\n\t}\n\n\tprivate getIndentStr() {\n\t\tif (this.indent < 0) {\n\t\t\tconsole.error(\"getIndentStr: lineIndex=\", this.lineIndex, \", indent=\", this.indent);\n\t\t\treturn \"\";\n\t\t}\n\t\treturn \" \".repeat(this.indent);\n\t}\n\n\tprivate applyNextIndent() {\n\t\tthis.indent += this.indentAdd;\n\t\tthis.indentAdd = 0;\n\t}\n\n\tprivate nextIndentAdd(num: number) {\n\t\tthis.indentAdd += num;\n\t}\n\n\tprivate addDataIndex(count: number) {\n\t\treturn this.dataIndex += count;\n\t}\n\n\tprivate getDataIndex() {\n\t\treturn this.dataIndex;\n\t}\n\n\tprivate addDefinedLabel(label: string, line: number) {\n\t\tthis.definedLabels.push({\n\t\t\tlabel,\n\t\t\tfirst: line,\n\t\t\tlast: -1,\n\t\t\tdataIndex: -1\n\t\t});\n\t}\n\n\tprivate getDefinedLabels() {\n\t\treturn this.definedLabels;\n\t}\n\n\tprivate addGosubLabel(label: string) {\n\t\tthis.gosubLabels[label] = this.gosubLabels[label] || {\n\t\t\tcount: 0\n\t\t};\n\t\tthis.gosubLabels[label].count = (this.gosubLabels[label].count || 0) + 1;\n\t}\n\n\tprivate getGosubLabels() {\n\t\treturn this.gosubLabels;\n\t}\n\n\tprivate getInstrMap() {\n\t\treturn this.instrMap;\n\t}\n\n\tprivate addInstr(name: string) {\n\t\tthis.instrMap[name] = (this.instrMap[name] || 0) + 1;\n\t\treturn this.instrMap[name];\n\t}\n\n\tprivate getVariables() {\n\t\treturn Object.keys(this.variables);\n\t}\n\n\tprivate getVariable(name: string) {\n\t\tname = name.toLowerCase();\n\t\tif (Semantics.reJsKeyword.test(name)) {\n\t\t\tname = `_${name}`;\n\t\t}\n\n\t\tthis.variables[name] = (this.variables[name] || 0) + 1;\n\t\treturn name;\n\t}\n\n\tprivate static deleteAllItems(items: Record<string, unknown>) {\n\t\tfor (const name in items) {\n\t\t\tdelete items[name];\n\t\t}\n\t}\n\n\tprivate incrementLineIndex() {\n\t\tthis.lineIndex += 1;\n\t\treturn this.lineIndex;\n\t}\n\n\tprivate getRestoreMap() {\n\t\treturn this.restoreMap;\n\t}\n\n\tprivate addRestoreLabel(label: string) {\n\t\tthis.restoreMap[label] = -1;\n\t}\n\n\tprivate getDataList() {\n\t\treturn this.dataList;\n\t}\n\n\tpublic resetParser() {\n\t\tthis.lineIndex = 0;\n\t\tthis.indent = 0;\n\t\tthis.indentAdd = 0;\n\t\tSemantics.deleteAllItems(this.variables);\n\t\tthis.definedLabels.length = 0;\n\t\tSemantics.deleteAllItems(this.gosubLabels);\n\t\tthis.dataList.length = 0;\n\t\tthis.dataIndex = 0;\n\t\tSemantics.deleteAllItems(this.restoreMap);\n\t\tSemantics.deleteAllItems(this.instrMap);\n\t}\n\n\tpublic getSemantics() {\n\t\tconst semanticsHelper: SemanticsHelper = {\n\t\t\taddDataIndex: (count: number) => this.addDataIndex(count),\n\t\t\taddDefinedLabel: (label: string, line: number) => this.addDefinedLabel(label, line),\n\t\t\taddGosubLabel: (label: string) => this.addGosubLabel(label),\n\t\t\taddIndent: (num: number) => this.addIndent(num),\n\t\t\taddInstr: (name: string) => this.addInstr(name),\n\t\t\taddRestoreLabel: (label: string) => this.addRestoreLabel(label),\n\t\t\tapplyNextIndent: () => this.applyNextIndent(),\n\t\t\tgetDataIndex: () => this.getDataIndex(),\n\t\t\tgetDataList: () => this.getDataList(),\n\t\t\tgetDefinedLabels: () => this.getDefinedLabels(),\n\t\t\tgetGosubLabels: () => this.getGosubLabels(),\n\t\t\tgetIndent: () => this.getIndent(),\n\t\t\tgetIndentStr: () => this.getIndentStr(),\n\t\t\tgetInstrMap: () => this.getInstrMap(),\n\t\t\tgetRestoreMap: () => this.getRestoreMap(),\n\t\t\tgetVariable: (name: string) => this.getVariable(name),\n\t\t\tgetVariables: () => this.getVariables(),\n\t\t\tincrementLineIndex: () => this.incrementLineIndex(),\n\t\t\tnextIndentAdd: (num: number) => this.nextIndentAdd(num),\n\t\t\tsetIndent: (indent: number) => this.setIndent(indent)\n\t\t};\n\t\treturn getSemantics(semanticsHelper);\n\t}\n}\n","// core.ts\n\nimport type { ICore, ConfigType, ConfigEntryType, IVm } from \"./Interfaces\";\nimport { Parser } from \"./Parser\";\nimport { arithmetic } from \"./arithmetic\";\nimport { Semantics } from \"./Semantics\";\n\nconst vm = {\n\t_output: \"\",\n\t_fnOnCls: (() => undefined) as () => void,\n\t_fnOnPrint: ((_msg: string) => undefined) as (msg: string) => void, // eslint-disable-line @typescript-eslint/no-unused-vars\n\t_fnOnPrompt: ((_msg: string) => \"\") as (msg: string) => string, // eslint-disable-line @typescript-eslint/no-unused-vars\n\tcls: () => {\n\t\tvm._output = \"\";\n\t\tvm._fnOnCls();\n\t},\n\tprint(...args: string[]) {\n\t\tthis._output += args.join('');\n\t\tif (this._output.endsWith(\"\\n\")) {\n\t\t\tthis._fnOnPrint(this._output);\n\t\t\tthis._output = \"\";\n\t\t}\n\t},\n\tprompt: (msg: string) => {\n\t\treturn vm._fnOnPrompt(msg);\n\t},\n\n\tgetOutput: () => vm._output,\n\tsetOutput: (str: string) => vm._output = str,\n\tsetOnCls: (fn: () => void) => vm._fnOnCls = fn,\n\tsetOnPrint: (fn: (msg: string) => void) => vm._fnOnPrint = fn,\n\tsetOnPrompt: (fn: (msg: string) => string) => vm._fnOnPrompt = fn\n};\n\n\nexport class Core implements ICore {\n\tprivate readonly startConfig: ConfigType = {\n\t\taction: \"compile,run\",\n\t\tdebug: 0,\n\t\texample: \"\",\n\t\tfileName: \"\",\n\t\tgrammar: \"basic\", // basic or strict\n\t\tinput: \"\",\n\t\tdebounceCompile: 800,\n\t\tdebounceExecute: 400\n\t};\n\n\tprivate readonly semantics = new Semantics();\n\n\tprivate readonly examples: Record<string, string> = {};\n\n\tprivate vm = vm;\n\n\tprivate onCheckSyntax = async (_s: string) => \"\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n\tpublic getConfigObject() {\n\t\treturn this.startConfig;\n\t}\n\n\tpublic getConfig<T extends ConfigEntryType>(name: string) {\n\t\treturn this.startConfig[name] as T;\n\t}\n\n\tpublic getExampleObject() {\n\t\treturn this.examples;\n\t}\n\n\tpublic setExample(name: string, script: string) {\n\t\tthis.examples[name] = script;\n\t}\n\n\tpublic getExample(name: string) {\n\t\treturn this.examples[name];\n\t}\n\n\tpublic setOnCls(fn: () => void) {\n\t\tvm.setOnCls(fn);\n\t}\n\n\tpublic setOnPrint(fn: (msg: string) => void) {\n\t\tvm.setOnPrint(fn);\n\t}\n\n\tpublic setOnPrompt(fn: (msg: string) => string) {\n\t\tvm.setOnPrompt(fn);\n\t}\n\n\tsetOnCheckSyntax(fn: (s: string) => Promise<string>) {\n\t\tthis.onCheckSyntax = fn;\n\t}\n\n\tprivate arithmeticParser: Parser | undefined;\n\n\tpublic compileScript(script: string) {\n\t\tif (!this.arithmeticParser) {\n\t\t\tconst semantics = this.semantics.getSemantics();\n\t\t\tif (this.getConfig<string>(\"grammar\") === \"strict\") {\n\t\t\t\tconst basicParser = new Parser(arithmetic.basicGrammar, semantics);\n\t\t\t\tthis.arithmeticParser = new Parser(arithmetic.strictGrammar, semantics, basicParser);\n\t\t\t} else {\n\t\t\t\tthis.arithmeticParser = new Parser(arithmetic.basicGrammar, semantics);\n\t\t\t}\n\t\t}\n\t\tthis.semantics.resetParser();\n\n\t\treturn this.arithmeticParser.parseAndEval(script);\n\t}\n\n\tasync executeScript(compiledScript: string) {\n\t\tthis.vm.setOutput(\"\");\n\n\t\tif (compiledScript.startsWith(\"ERROR\")) {\n\t\t\treturn \"ERROR\";\n\t\t}\n\n\t\tconst syntaxError = await this.onCheckSyntax(compiledScript);\n\t\tif (syntaxError) {\n\t\t\tvm.cls();\n\t\t\treturn \"ERROR: \" + syntaxError;\n\t\t}\n\n\t\ttry {\n\t\t\tconst fnScript = new Function(\"_o\", compiledScript);\n\t\t\tconst result = fnScript(this.vm as IVm) || \"\";\n\n\t\t\tlet output: string;\n\t\t\tif (result instanceof Promise) {\n\t\t\t\toutput = await result;\n\t\t\t\toutput = this.vm.getOutput() + output;\n\t\t\t} else {\n\t\t\t\toutput = this.vm.getOutput() + result;\n\t\t\t}\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlet errorMessage = \"ERROR: \";\n\t\t\tif (error instanceof Error) {\n\t\t\t\terrorMessage += this.vm.getOutput() + \"\\n\" + String(error);\n\n\t\t\t\tconst anyErr = error as unknown as Record<string, number>;\n\t\t\t\tconst lineNumber = anyErr.lineNumber; // only on FireFox\n\t\t\t\tconst columnNumber = anyErr.columnNumber; // only on FireFox\n\n\t\t\t\tif (lineNumber || columnNumber) {\n\t\t\t\t\tconst errLine = lineNumber - 2; // lineNumber -2 because of anonymous function added by new Function() constructor\n\t\t\t\t\terrorMessage += ` (Line ${errLine}, column ${columnNumber})`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terrorMessage += \"unknown\";\n\t\t\t}\n\t\t\treturn errorMessage;\n\t\t}\n\t}\n\n\tpublic putScriptInFrame(script: string) {\n\t\tconst result =\n`(function(_o) {\n\t${script}\n})({\n\t_output: \"\",\n\tcls: () => undefined,\n\tprint(...args: string[]) { this._output += args.join(''); },\n\tprompt: (msg) => { console.log(msg); return \"\"; }\n});`\n\t\treturn result;\n\t}\n}\n","// main.ts\n//\n// Usage:\n// node dist/locobasic.js [action='compile,run'] [input=<statements>] [example=<name>] [fileName=<file>] [grammar=<name>] [debug=0] [debounceCompile=800] [debounceExecute=400]\n//\n// - Examples for compile and run:\n// node dist/locobasic.js input='PRINT \"Hello!\"'\n// npx ts-node dist/locobasic.js input='PRINT \"Hello!\"'\n// node dist/locobasic.js input=\"?3 + 5 * (2 - 8)\"\n// node dist/locobasic.js example=euler\n// node dist/locobasic.js fileName=dist/examples/example.bas\n// node dist/locobasic.js grammar=\"strict\" input='a$=\"Bob\":PRINT \"Hello \";a$;\"!\"'\n//\n// - Example for compile only:\n// node dist/locobasic.js action='compile' input='print \"Hello!\";' > hello1.js\n//   [Windows: Use node.exe when redirecting into a file; or npx ts-node ...]\n// node hello1.js\n// [When using async functions like FRAME or INPUT, redirect to hello1.mjs]\n//\n\ndeclare const window: Record<string, any>;\n\nimport type { ConfigEntryType, ConfigType, ICore, IUI } from \"./Interfaces\";\nimport { Core } from \"./Core\";\n\nconst core: ICore = new Core();\n\nlet ui: IUI;\n\n\nfunction fnHereDoc(fn: () => void) {\n\treturn String(fn).\n\t\treplace(/^[^/]+\\/\\*\\S*/, \"\").\n\t\treplace(/\\*\\/[^/]+$/, \"\");\n}\n\nfunction addItem(key: string, input: string | (() => void)) {\n\tlet inputString = (typeof input !== \"string\") ? fnHereDoc(input) : input;\n\tinputString = inputString.replace(/^\\n/, \"\").replace(/\\n$/, \"\"); // remove preceding and trailing newlines\n\t// beware of data files ending with newlines! (do not use trimEnd)\n\n\tif (!key) { // maybe \"\"\n\t\tconst firstLine = inputString.slice(0, inputString.indexOf(\"\\n\"));\n\t\tconst matches = firstLine.match(/^\\s*\\d*\\s*(?:REM|rem|')\\s*(\\w+)/);\n\t\tkey = matches ? matches[1] : \"unknown\";\n\t}\n\n\tcore.setExample(key, inputString);\n}\n\n\ninterface NodeFs {\n\tpromises: {\n\t\treadFile(name: string, encoding: string): Promise<string>\n\t};\n}\n\nlet fs: NodeFs;\nlet modulePath: string;\n\ndeclare function require(name: string): NodeModule | NodeFs;\n\nasync function nodeReadFile(name: string): Promise<string> {\n\tif (!fs) {\n\t\tfs = require(\"fs\") as NodeFs;\n\t}\n\n\tif (!module) {\n\t\tmodule = require(\"module\") as NodeModule;\n\t\tmodulePath = module.path || \"\";\n\n\t\tif (!modulePath) {\n\t\t\tconsole.warn(\"nodeReadFile: Cannot determine module path\");\n\t\t}\n\t}\n\treturn fs.promises.readFile(name, \"utf8\");\n}\n\nfunction fnParseArgs(args: string[], config: ConfigType) {\n\tfor (let i = 0; i < args.length; i += 1) {\n\t\tconst [name, ...valueParts] = args[i].split(\"=\"),\n\t\t\tnameType = typeof config[name];\n\n\t\tlet value: ConfigEntryType = valueParts.join(\"=\");\n\t\tif (value !== undefined) {\n\t\t\tif (nameType === \"boolean\") {\n\t\t\t\tvalue = (value === \"true\");\n\t\t\t} else if (nameType === \"number\") {\n\t\t\t\tvalue = Number(value);\n\t\t\t}\n\t\t\tconfig[name] = value;\n\t\t}\n\t}\n\treturn config;\n}\n\nfunction keepRunning(fn: () => void, timeout: number) {\n\tconst timerId = setTimeout(() => { }, timeout);\n\treturn (async () => {\n\t\tfn();\n\t\tclearTimeout(timerId);\n\t})();\n}\n\nfunction start(input: string) {\n\tconst actionConfig = core.getConfig<string>(\"action\");\n\tif (input !== \"\") {\n\t\tconst compiledScript = actionConfig.includes(\"compile\") ? core.compileScript(input) : input;\n\n\t\tif (compiledScript.startsWith(\"ERROR:\")) {\n\t\t\tconsole.error(compiledScript);\n\t\t\treturn;\n\t\t}\n\n\t\tif (actionConfig.includes(\"run\")) {\n\t\t\tcore.setOnPrint((msg) => {\n\t\t\t\tconsole.log(msg.replace(/\\n$/, \"\"));\n\t\t\t});\n\n\t\t\treturn keepRunning(async () => {\n\t\t\t\tconst output = await core.executeScript(compiledScript);\n\t\t\t\tconsole.log(output.replace(/\\n$/, \"\"));\n\t\t\t}, 5000);\n\t\t} else {\n\t\t\tconst inFrame = core.putScriptInFrame(compiledScript);\n\t\t\tconsole.log(inFrame);\n\t\t}\n\t} else {\n\t\tconsole.log(\"No input\");\n\t}\n}\n\nfunction main(config: ConfigType) {\n\tlet input = (config.input as string) || \"\";\n\n\tif (config.fileName) {\n\t\treturn keepRunning(async () => {\n\t\t\tinput = await nodeReadFile(config.fileName as string);\n\t\t\tstart(input);\n\t\t}, 5000);\n\t} else {\n\t\tif (config.example) {\n\t\t\tconst examples = core.getExampleObject();\n\t\t\tif (!Object.keys(examples).length) {\n\t\t\t\treturn keepRunning(async () => {\n\t\t\t\t\tconst jsFile = await nodeReadFile(\"./dist/examples/examples.js\");\n\t\t\t\t\t// ?? require('./examples/examples.js');\n\t\t\t\t\tconst fnScript = new Function(\"cpcBasic\", jsFile);\n\t\t\t\t\tfnScript({\n\t\t\t\t\t\taddItem: addItem\n\t\t\t\t\t});\n\n\t\t\t\t\tinput = examples[config.example as string];\n\t\t\t\t\tstart(input);\n\t\t\t\t}, 5000);\n\t\t\t}\n\t\t\tinput += examples[config.example as string];\n\t\t}\n\t\tstart(input);\n\t}\n}\n\nconst config = core.getConfigObject();\n\nif (typeof window !== \"undefined\") {\n\twindow.cpcBasic = {\n\t\taddItem: addItem\n\t};\n\twindow.onload = () => {\n\t\tconst UI = window.locobasicUI.UI; \n\t\tui = new UI(core);\n\n\t\tconst args = ui.parseUri(window.location.search.substring(1), config);\n\t\tfnParseArgs(args, config);\n\n\t\tcore.setOnCls(() => ui.setOutputText(\"\"));\n\t\tcore.setOnPrint((msg) => ui.addOutputText(msg));\n\t\tcore.setOnPrompt((msg) => window.prompt(msg));\n\t\tcore.setOnCheckSyntax((s: string) => Promise.resolve(ui.checkSyntax(s)));\n\t\tui.onWindowLoad(new Event(\"onload\"));\n\t}\n\n} else {\n\tmain(fnParseArgs(global.process.argv.slice(2), config));\n}\n"],"names":["grammar"],"mappings":"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"}