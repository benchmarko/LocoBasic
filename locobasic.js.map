{"version":3,"file":"locobasic.js","sources":["../src/Parser.ts","../src/arithmetic.ts","../src/Semantics.ts","../src/Core.ts","../src/BasicVmCore.ts","../src/BasicVmNode.ts","../src/NodeParts.ts","../src/BasicVmBrowser.ts","../src/main.ts"],"sourcesContent":["import { type ActionDict, type Grammar, Matcher, type Namespace, type Semantics, grammar } from \"ohm-js\";\n\nexport class Parser {\n    private readonly ohmGrammar: Grammar;\n    private readonly ohmSemantics: Semantics;\n    private readonly matcher: Matcher;\n\n    constructor(grammarString: string, semanticsMap: ActionDict<string | string[]>, superParser?: Parser) {\n        if (superParser) {\n            const superGrammar = superParser.getOhmGrammar();\n            \n            const namespace: Namespace = {\n                basicGrammar: superGrammar\n            };\n            this.ohmGrammar = grammar(grammarString, namespace);\n        } else {\n            this.ohmGrammar = grammar(grammarString);\n        }\n\n        this.matcher = this.ohmGrammar.matcher();\n\n        this.ohmSemantics = this.ohmGrammar\n            .createSemantics()\n\t\t\t.addOperation<string | string[]>(\"eval\", semanticsMap);\n    }\n\n    public getOhmGrammar(): Grammar {\n        return this.ohmGrammar;\n    }\n\n    private diffPartsStart(oldInput: string, newInput: string) {\n        let common = 0;\n        while (common < oldInput.length && common < newInput.length && oldInput[common] === newInput[common]) {\n            common += 1;\n        }\n        return common;\n    }\n\n    private diffPartsEnd(oldInput: string, newInput: string, start: number) {\n        let common = newInput.length;\n        const oldIndexDiff = oldInput.length - newInput.length;\n        const minCommon = oldIndexDiff < 0 ? start - oldIndexDiff : start;\n        while (common > minCommon && oldInput[common - 1 + oldIndexDiff] === newInput[common - 1]) {\n            common -= 1;\n        }\n        return common;\n    }\n\n    // Function to parse and evaluate an expression\n    public parseAndEval(input: string): string {\n        const matcher = this.matcher;\n        const oldInput = matcher.getInput();\n        const start = this.diffPartsStart(oldInput, input);\n        const end = this.diffPartsEnd(oldInput, input, start);\n        const oldEnd = oldInput.length - (input.length - end);\n\n        try {\n            if (start > 0) {\n                //console.log(`DEBUG: parseAndEval: (${start}, ${oldEnd}) “${oldInput.substring(start, oldEnd)}\" => “${input.substring(start, end)}” (${start}, ${end})`);\n                matcher.replaceInputRange(start, oldEnd, input.substring(start, end));\n            } else {\n                matcher.setInput(input);\n            }\n\n            const matchResult = matcher.match();\n            if (matchResult.succeeded()) {\n                return this.ohmSemantics(matchResult).eval() as string;\n            } else {\n                return `ERROR: Parsing failed: ${matchResult.message}`;\n            }\n        } catch (error) {\n            return `ERROR: Parsing evaluator failed: ${error instanceof Error ? error.message : \"unknown\"}`;\n        }\n    }\n}\n","// arithmetics.ts\n//\nexport const arithmetic = {\n  basicGrammar:\n    `\n    Arithmetic {\n    Program\n      = Line*\n\n    Line\n      = Label? Statements Comment? (eol | end)\n\n    Label\n      = label\n\n    Statements\n      = Statement (\":\" Statement)*\n\n    Statement\n      = Comment\n      | Cls\n      | Data\n      | Def\n      | Deg\n      | Dim\n      | Draw\n      | Drawr\n      | End\n      | Erase\n      | Error\n      | For\n      | Frame\n      | Gosub\n      | GraphicsPen\n      | If\n      | Ink\n      | Input\n      | MidSAssign\n      | Mode\n      | Move\n      | Mover\n      | Next\n      | On\n      | Origin\n      | Paper\n      | Pen\n      | Plot\n      | Plotr\n      | Print\n      | Rad\n      | Read\n      | Rem\n      | Restore\n      | Return\n      | Stop\n      | Tag\n      | Tagoff\n      | While\n      | Wend\n      | ArrayAssign\n      | Assign\n\n    ArrayAssign\n      = ArrayIdent \"=\" NumExp\n      | StrArrayIdent \"=\" StrExp\n\n    Abs\n      = abs \"(\" NumExp \")\"\n\n    Asc\n      = asc \"(\" StrExp \")\"\n\n    Atn\n      = atn \"(\" NumExp \")\"\n\n    Assign\n      = ident \"=\" NumExp\n      | strIdent \"=\" StrExp\n\n    BinS\n      = binS \"(\" NumExp (\",\" NumExp)? \")\"\n\n    ChrS\n      = chrS \"(\" NumExp \")\"\n\n    Cint\n      = cint \"(\" NumExp \")\"\n\n    Cls\n      = cls\n\n    Comment\n      = \"\\\\'\" partToEol\n\n    Cos\n      = cos \"(\" NumExp \")\"\n\n    DataItem\n      = string | number | signedDecimal\n\n    Data\n      = data NonemptyListOf<DataItem, \",\">\n\n    DecS\n      = decS \"(\" NumExp \",\" StrExp \")\"\n\n    Def\n      = def fn DefAssign\n    \n    DefArgs\n      = \"(\" ListOf<SimpleIdent, \",\"> \")\"\n\n    DefAssign\n      = ident DefArgs? \"=\" NumExp\n      | strIdent DefArgs? \"=\" StrExp\n\n    Deg\n      = deg\n\n    Dim\n      = dim NonemptyListOf<DimArrayIdent, \",\">\n\n    Draw\n      = draw NumExp \",\" NumExp (\",\" NumExp)?\n\n    Drawr\n      = drawr NumExp \",\" NumExp (\",\" NumExp)?\n\n    End\n      = endLit\n\n    Erase\n      = erase NonemptyListOf<SimpleIdent, \",\">\n\n    Error\n      = error NumExp\n\n    Exp\n      = exp \"(\" NumExp \")\"\n\n    Fix\n      = fix \"(\" NumExp \")\"\n\n    For\n      = for variable \"=\" NumExp to NumExp (step NumExp)?\n\n    Frame\n      = frame\n\n    Gosub\n      = gosub label\n\n    GraphicsPen\n      = graphics pen NumExp\n\n    HexS\n      = hexS \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Ink\n      = ink NumExp \",\" NumExp (\",\" NumExp)?\n\n    InkeyS\n      = inkeyS\n\n    Input\n      = input (string (\";\" | \",\"))? AnyIdent  // or NonemptyListOf?\n\n    Instr\n      = instr \"(\" StrExp \",\" StrExp \")\" -- noLen\n      | instr \"(\" NumExp \",\" StrExp \",\" StrExp \")\" -- len\n\n    Int\n      = int \"(\" NumExp \")\"\n\n    LeftS\n      = leftS \"(\" StrExp \",\" NumExp \")\"\n\n    Len\n      = len \"(\" StrExp \")\"\n\n    Log\n      = log \"(\" NumExp \")\"\n\n    Log10\n      = log10 \"(\" NumExp \")\"\n\n    LowerS\n      = lowerS \"(\" StrExp \")\"\n\n    Max\n      = max \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    MidS\n      = midS \"(\" StrExp \",\" NumExp (\",\" NumExp)? \")\"\n\n    MidSAssign\n      = midS \"(\" strIdent \",\" NumExp (\",\" NumExp)? \")\" \"=\" StrExp\n\n    Min\n      = min \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    Mode\n      = mode NumExp\n\n    Move\n      = move NumExp \",\" NumExp (\",\" NumExp)?\n    \n    Mover\n      = mover NumExp \",\" NumExp (\",\" NumExp)?\n\n    Pi\n      = pi\n\n    Next\n      = next ListOf<variable, \",\">\n\n    On\n      = on NumExp gosub NonemptyListOf<label, \",\">\n\n    Origin\n      = origin NumExp \",\" NumExp\n\n    Paper\n      = paper NumExp\n\n    Pen\n      = pen NumExp\n\n    Plot\n      = plot NumExp \",\" NumExp (\",\" NumExp)?\n\n    Plotr\n      = plotr NumExp \",\" NumExp (\",\" NumExp)?\n\n    PrintArg\n      = &StrCmpExp NumExp -- strCmp\n      | StrExp\n      | NumExp\n      | using StrExp \";\" NonemptyListOf<NumExp, \";\"> -- usingNum\n\n    Print\n      = (print | \"?\") ListOf<PrintArg, \";\"> (\";\")?\n\n    Rad\n      = rad\n\n    Read\n      = read NonemptyListOf<AnyIdent, \",\">\n\n    Rem\n      = rem partToEol\n\n    Restore\n      = restore label?\n\n    Return\n      = return\n\n    RightS\n      = rightS \"(\" StrExp \",\" NumExp \")\"\n\n    Rnd\n      = rnd (\"(\" NumExp \")\")?\n    \n    Round\n      = round \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Sgn\n      = sgn \"(\" NumExp \")\"\n\n    Sin\n      = sin \"(\" NumExp \")\"\n\n    SpaceS\n      = spaceS \"(\" NumExp \")\"\n\n    Sqr\n      = sqr \"(\" NumExp \")\"\n\n    Stop\n      = stop\n\n    StrS\n      = strS \"(\" NumExp \")\"\n\n    StringS\n      = stringS \"(\" NumExp \",\" StrExp \")\" -- str\n      | stringS \"(\" NumExp \",\" NumExp \")\" -- num\n\n    Tag\n      = tag\n\n    Tagoff\n      = tagoff\n      \n    Tan\n      = tan \"(\" NumExp \")\"\n\n    Time\n      = time\n\n    UpperS\n      = upperS \"(\" StrExp \")\"\n\n    Val\n      = val \"(\" StrExp \")\"\n\n    Wend\n      = wend\n\n    While\n      = while NumExp\n\n    If\n      = if NumExp then Statements (else Statements)?\n\n    StrExp\n      = StrAddExp\n\n    StrAddExp\n      = StrAddExp \"+\" StrPriExp  -- plus\n      | StrPriExp\n\n    StrPriExp\n      = \"(\" StrExp \")\"  -- paren\n      | BinS\n      | ChrS\n      | DecS\n      | HexS\n      | InkeyS\n      | LeftS\n      | LowerS\n      | MidS\n      | RightS\n      | SpaceS\n      | StrS\n      | StringS\n      | UpperS\n      | StrFnIdent\n      | StrArrayIdent\n      | strIdent\n      | string\n\n\n    NumExp\n      = XorExp\n\n    XorExp\n      = OrExp xor XorExp  -- xor\n      | OrExp\n\n    OrExp\n      = AndExp or OrExp  -- or\n      | AndExp\n\n    AndExp\n      = NotExp and AndExp  -- and\n      | NotExp\n\n    NotExp\n      = not NotExp  -- not\n      | StrCmpExp\n      | CmpExp\n\n    StrCmpExp\n      = StrAddExp \"=\" StrAddExp  -- eq\n      | StrAddExp \"<>\" StrAddExp  -- ne\n      | StrAddExp \"<\" StrAddExp  -- lt\n      | StrAddExp \"<=\" StrAddExp  -- le\n      | StrAddExp \">\" StrAddExp  -- gt\n      | StrAddExp \">=\" StrAddExp  -- ge\n\n    CmpExp\n      = CmpExp \"=\" AddExp  -- eq\n      | CmpExp \"<>\" AddExp  -- ne\n      | CmpExp \"<\" AddExp  -- lt\n      | CmpExp \"<=\" AddExp  -- le\n      | CmpExp \">\" AddExp  -- gt\n      | CmpExp \">=\" AddExp  -- ge\n      | AddExp\n\n    AddExp\n      = AddExp \"+\" ModExp  -- plus\n      | AddExp \"-\" ModExp  -- minus\n      | ModExp\n\n    ModExp\n      = ModExp mod DivExp -- mod\n      | DivExp\n\n    DivExp\n      = DivExp \"\\\\\\\\\" MulExp -- div\n      | MulExp\n\n    MulExp\n      = MulExp \"*\" ExpExp  -- times\n      | MulExp \"/\" ExpExp  -- divide\n      | ExpExp\n\n    ExpExp\n      = PriExp \"^\" ExpExp  -- power\n      | PriExp\n\n    PriExp\n      = \"(\" NumExp \")\"  -- paren\n      | \"+\" PriExp   -- pos\n      | \"-\" PriExp   -- neg\n      | FnIdent\n      | ArrayIdent\n      | ident\n      | number\n      | Abs\n      | Asc\n      | Atn\n      | Cint\n      | Cos\n      | Exp\n      | Fix\n      | Instr\n      | Int\n      | Len\n      | Log\n      | Log10\n      | Max\n      | Min\n      | Pi\n      | Rnd\n      | Round\n      | Sgn\n      | Sin\n      | Sqr\n      | Tan\n      | Time\n      | Val\n\n    ArrayArgs\n      = NonemptyListOf<NumExp, \",\">\n\n    ArrayIdent\n      = ident \"(\" ArrayArgs \")\"\n\n    StrArrayIdent\n      = strIdent \"(\" ArrayArgs \")\"\n\n    DimArrayArgs\n      = NonemptyListOf<NumExp, \",\">\n\n    DimArrayIdent\n      = ident \"(\" DimArrayArgs \")\"\n      | strIdent \"(\" DimArrayArgs \")\"\n\n    SimpleIdent\n      = strIdent\n      | ident\n\n    AnyIdent\n      = StrArrayIdent\n      | ArrayIdent\n      | strIdent\n      | ident\n\n    FnIdent\n      = fnIdent AnyFnArgs?\n\n    StrFnIdent\n      = strFnIdent AnyFnArgs?\n\n    AnyFnArg\n      = StrExp\n      | NumExp\n\n    AnyFnArgs\n      = \"(\" ListOf<AnyFnArg, \",\"> \")\"\n\n\n    keyword\n      = abs | after | and | asc | atn | auto | binS | border | break\n      | call | cat | chain | chrS | cint | clear | clg | closein | closeout | cls | cont | copychrS | cos | creal | cursor\n      | data | decS | def | defint | defreal | defstr | deg | delete | derr | di | dim | draw | drawr\n      | edit | ei | else | endLit | ent | env | eof | erase | erl | err | error | every | exp | fill | fix | fn | for | frame | fre | gosub | goto | graphics\n      | hexS | himem | if | ink | inkey | inkeyS|  inp | input | instr | int | joy | key | leftS | len | let | line | list | load | locate | log | log10 | lowerS\n      | mask | max | memory | merge | midS | min | mod | mode | move | mover | new | next | not | on | openin | openout | or | origin | out\n      | paper | peek | pen | pi | plot | plotr | poke | pos | print\n      | rad | randomize | read | release | rem | remain | renum | restore | resume | return | rightS | rnd | round | run\n      | save | sgn | sin | sound | spaceS | spc | speed | sq | sqr | step | stop | strS | stringS | swap | symbol\n      | tab | tag | tagoff | tan | test | testr | then | time | to | troff | tron | unt | upperS | using\n      | val | vpos | wait | wend | while | width | window | write | xor | xpos | ypos | zone\n\n    abs\n      = (\"abs\" | \"ABS\") ~identPart\n    after\n      = (\"after\" | \"AFTER\") ~identPart\n    and\n      = (\"and\" | \"AND\") ~identPart\n    asc\n      = (\"asc\" | \"ASC\") ~identPart\n    atn\n      = (\"atn\" | \"ATN\") ~identPart\n    auto\n      = (\"auto\" | \"AUTO\") ~identPart\n    binS\n      = (\"bin$\" | \"BIN$\") ~identPart\n    border\n      = (\"border\" | \"BORDER\") ~identPart\n    break\n      = (\"break\" | \"BREAK\") ~identPart\n    call\n      = (\"call\" | \"CALL\") ~identPart\n    cat\n      = (\"cat\" | \"CAT\") ~identPart\n    chain\n      = (\"chain\" | \"CHAIN\") ~identPart\n    chrS\n      = (\"chr$\" | \"CHR$\") ~identPart\n    cint\n      = (\"cint\" | \"CINT\") ~identPart\n    clear\n      = (\"clear\" | \"CLEAR\") ~identPart\n    clg\n      = (\"clg\" | \"CLG\") ~identPart\n    closein\n      = (\"closein\" | \"CLOSEIN\") ~identPart\n    closeout\n      = (\"closeout\" | \"CLOSEOUT\") ~identPart\n    cls\n      = (\"cls\" | \"CLS\") ~identPart\n    cont\n      = (\"cont\" | \"CONT\") ~identPart\n    copychrS\n      = (\"copychr$\" | \"COPYCHR$\") ~identPart\n    cos\n      = (\"cos\" | \"COS\") ~identPart\n    creal\n      = (\"creal\" | \"CREAL\") ~identPart\n    cursor\n      = (\"cursor\" | \"CURSOR\") ~identPart\n    data\n      = (\"data\" | \"DATA\") ~identPart\n    decS\n      = (\"dec$\" | \"DEC$\") ~identPart\n    def\n      = (\"def\" | \"DEF\") ~identPart\n    defint\n      = (\"defint\" | \"DEFINT\") ~identPart\n    defreal\n      = (\"defreal\" | \"DEFREAL\") ~identPart\n    defstr\n      = (\"defstr\" | \"DEFSTR\") ~identPart\n    deg\n      = (\"deg\" | \"DEG\") ~identPart\n    delete\n      = (\"delete\" | \"DELETE\") ~identPart\n    derr\n      = (\"derr\" | \"DERR\") ~identPart\n    di\n      = (\"di\" | \"DI\") ~identPart\n    dim\n      = (\"dim\" | \"DIM\") ~identPart\n    draw\n      = (\"draw\" | \"DRAW\") ~identPart\n    drawr\n      = (\"drawr\" | \"DRAWR\") ~identPart\n    edit\n      = (\"edit\" | \"EDIT\") ~identPart\n    ei\n      = (\"ei\" | \"EI\") ~identPart\n    else\n      = (\"else\" | \"ELSE\") ~identPart\n    endLit\n      = (\"end\" | \"END\") ~identPart\n    ent\n      = (\"ent\" | \"ENT\") ~identPart\n    env\n      = (\"env\" | \"ENV\") ~identPart\n    eof\n      = (\"eof\" | \"EOF\") ~identPart\n    erase\n      = (\"erase\" | \"ERASE\") ~identPart\n    erl\n      = (\"erl\" | \"ERL\") ~identPart\n    err\n      = (\"err\" | \"ERR\") ~identPart\n    error\n      = (\"error\" | \"ERROR\") ~identPart\n    every\n      = (\"every\" | \"EVERY\") ~identPart\n    exp\n      = (\"exp\" | \"EXP\") ~identPart\n    fill\n      = (\"fill\" | \"FILL\") ~identPart\n    fix\n      = (\"fix\" | \"FIX\") ~identPart\n    fn\n      = (\"fn\" | \"FN\")  //~identPart\n    for\n      = (\"for\" | \"FOR\") ~identPart\n    frame\n      = (\"frame\" | \"FRAME\") ~identPart\n    fre\n      = (\"fre\" | \"FRE\") ~identPart\n    gosub\n      = (\"gosub\" | \"GOSUB\") ~identPart\n    goto\n      = (\"goto\" | \"GOTO\") ~identPart\n    graphics\n      = (\"graphics\" | \"GRAPHICS\") ~identPart\n    hexS\n      = (\"hex$\" | \"HEX$\") ~identPart\n    himem\n      = (\"himem\" | \"HIMEM\") ~identPart\n    if\n      = (\"if\" | \"IF\") ~identPart\n    ink\n      = (\"ink\" | \"INK\") ~identPart\n    inkey\n      = (\"inkey\" | \"INKEY\") ~identPart\n    inkeyS\n      = (\"inkey$\" | \"INKEY$\") ~identPart\n    inp\n      = (\"inp\" | \"INP\") ~identPart\n    input\n      = (\"input\" | \"INPUT\") ~identPart\n    instr\n      = (\"instr\" | \"INSTR\") ~identPart\n    int\n      = (\"int\" | \"INT\") ~identPart\n    joy\n      = (\"joy\" | \"JOY\") ~identPart\n    key\n      = (\"key\" | \"KEY\") ~identPart\n    leftS\n      = (\"left$\" | \"LEFT$\") ~identPart\n    len\n      = (\"len\" | \"LEN\") ~identPart\n    let\n      = (\"let\" | \"LET\") ~identPart\n    line\n      = (\"line\" | \"LINE\") ~identPart\n    list\n      = (\"list\" | \"LIST\") ~identPart\n    load\n      = (\"load\" | \"LOAD\") ~identPart\n    locate\n      = (\"locate\" | \"LOCATE\") ~identPart\n    log\n      = (\"log\" | \"LOG\") ~identPart\n    log10\n      = (\"log10\" | \"LOG10\") ~identPart\n    lowerS\n      = (\"lower$\" | \"LOWER$\") ~identPart\n    mask\n      = (\"mask\" | \"MASK\") ~identPart\n    max\n      = (\"max\" | \"MAX\") ~identPart\n    memory\n      = (\"memory\" | \"MEMORY\") ~identPart\n    merge\n      = (\"merge\" | \"MERGE\") ~identPart\n    midS\n      = (\"mid$\" | \"MID$\") ~identPart\n    min\n      = (\"min\" | \"MIN\") ~identPart\n    mod\n      = (\"mod\" | \"MOD\") ~identPart\n    mode\n      = (\"mode\" | \"MODE\") ~identPart\n    move\n      = (\"move\" | \"MOVE\") ~identPart\n    mover\n      = (\"mover\" | \"MOVER\") ~identPart\n    new\n      = (\"new\" | \"NEW\") ~identPart\n    next\n      = (\"next\" | \"NEXT\") ~identPart\n    not\n      = (\"not\" | \"NOT\") ~identPart\n    on\n      = (\"on\" | \"ON\") ~identPart\n    openin\n      = (\"openin\" | \"OPENIN\") ~identPart\n    openout\n      = (\"openout\" | \"OPENOUT\") ~identPart\n    or\n      = (\"or\" | \"OR\") ~identPart\n    origin\n      = (\"origin\" | \"ORIGIN\") ~identPart\n    out\n      = (\"out\" | \"OUT\") ~identPart\n    paper\n      = (\"paper\" | \"PAPER\") ~identPart\n    peek\n      = (\"peek\" | \"PEEK\") ~identPart\n    pen\n      = (\"pen\" | \"PEN\") ~identPart\n    pi\n      = (\"pi\" | \"PI\") ~identPart\n    plot\n      = (\"plot\" | \"PLOT\") ~identPart\n    plotr\n      = (\"plotr\" | \"PLOTR\") ~identPart\n    poke\n      = (\"poke\" | \"POKE\") ~identPart\n    pos\n      = (\"pos\" | \"POS\") ~identPart\n    print\n      = (\"print\" | \"PRINT\") ~identPart\n    rad\n      = (\"rad\" | \"RAD\") ~identPart\n    randomize\n      = (\"randomize\" | \"RANDOMIZE\") ~identPart\n    read\n      = (\"read\" | \"READ\") ~identPart\n    release\n      = (\"release\" | \"RELEASE\") ~identPart\n    rem\n      = (\"rem\" | \"REM\") ~identPart\n    remain\n      = (\"remain\" | \"REMAIN\") ~identPart\n    renum\n      = (\"renum\" | \"RENUM\") ~identPart\n    restore\n      = (\"restore\" | \"RESTORE\") ~identPart\n    resume\n      = (\"resume\" | \"RESUME\") ~identPart\n    return\n      = (\"return\" | \"RETURN\") ~identPart\n    rightS\n      = (\"right$\" | \"RIGHT$\") ~identPart\n    rnd\n      = (\"rnd\" | \"RND\") ~identPart\n    round\n      = (\"round\" | \"ROUND\") ~identPart\n    run\n      = (\"run\" | \"RUN\") ~identPart\n    save\n      = (\"save\" | \"SAVE\") ~identPart\n    sgn\n      = (\"sgn\" | \"SGN\") ~identPart\n    sin\n      = (\"sin\" | \"SIN\") ~identPart\n    sound\n      = (\"sound\" | \"SOUND\") ~identPart\n    spaceS\n      = (\"space$\" | \"SPACE$\") ~identPart\n    spc\n      = (\"spc\" | \"SPC\") ~identPart\n    speed\n      = (\"speed\" | \"SPEED\") ~identPart\n    sq\n      = (\"sq\" | \"SQ\") ~identPart\n    sqr\n      = (\"sqr\" | \"SQR\") ~identPart\n    step\n      = (\"step\" | \"STEP\") ~identPart\n    stop\n      = (\"stop\" | \"STOP\") ~identPart\n    strS\n      = (\"str$\" | \"STR$\") ~identPart\n    stringS\n      = (\"string$\" | \"STRING$\") ~identPart\n    swap\n      = (\"swap\" | \"SWAP\") ~identPart\n    symbol\n      = (\"symbol\" | \"SYMBOL\") ~identPart\n    tab\n      = (\"tab\" | \"TAB\") ~identPart\n    tag\n      = (\"tag\" | \"TAG\") ~identPart\n    tagoff\n      = (\"tagoff\" | \"TAGOFF\") ~identPart\n    tan\n      = (\"tan\" | \"TAN\") ~identPart\n    test\n      = (\"test\" | \"TEST\") ~identPart\n    testr\n      = (\"testr\" | \"TESTR\") ~identPart\n    then\n      = (\"then\" | \"THEN\") ~identPart\n    time\n      = (\"time\" | \"TIME\") ~identPart\n    to\n      = (\"to\" | \"TO\") ~identPart\n    troff\n      = (\"troff\" | \"TROFF\") ~identPart\n    tron\n      = (\"tron\" | \"TRON\") ~identPart\n    unt\n      = (\"unt\" | \"UNT\") ~identPart\n    upperS\n      = (\"upper$\" | \"UPPER$\") ~identPart\n    using\n      = (\"using\" | \"USING\") ~identPart\n    val\n      = (\"val\" | \"VAL\") ~identPart\n    vpos\n      = (\"vpos\" | \"VPOS\") ~identPart\n    wait\n      = (\"wait\" | \"WAIT\") ~identPart\n    wend\n      = (\"wend\" | \"WEND\") ~identPart\n    while\n      = (\"while\" | \"WHILE\") ~identPart\n    width\n      = (\"width\" | \"WIDTH\") ~identPart\n    window\n      = (\"window\" | \"WINDOW\") ~identPart\n    write\n      = (\"write\" | \"WRITE\") ~identPart\n    xor\n      = (\"xor\" | \"XOR\") ~identPart\n    xpos\n      = (\"xpos\" | \"XPOS\") ~identPart\n    ypos\n      = (\"ypos\" | \"YPOS\") ~identPart\n    zone\n      = (\"zone\" | \"ZONE\") ~identPart\n\n    ident (an identifier)\n      = ~keyword identName\n\n    fnIdent\n      = fn ~keyword identName\n\n    identName = identStart identPart*\n\n    identStart = letter\n\n    identPart = letter | digit\n\n    variable = ident\n\n    strIdent\n      = ~keyword identName \"$\"\n\n    strFnIdent\n      = fn ~keyword identName \"$\"\n\n    binaryDigit = \"0\"..\"1\"\n\n    exponentPart = (\"e\" | \"E\") signedDecimal\n\n    decimalValue  (decimal number)\n      = digit* \".\" digit+ exponentPart* -- fract\n      | digit+            exponentPart* -- whole\n\n    hexValue\n      = \"&\" hexDigit+\n\n    binaryValue\n      = caseInsensitive<\"&x\"> binaryDigit+\n\n    number  (a number)\n      = decimalValue\n      | hexValue\n      | binaryValue\n\n    signedDecimal\n      = (\"+\" | \"-\")? decimalValue\n\n    partToEol\n      = (~eol any)*\n\n    string = \"\\\\\"\" (\"\\\\\\\\\\\\\"\" | (~\"\\\\\"\" any))* \"\\\\\"\"\n\n    label = digit+\n\n    space := \" \" | \"\\t\"\n\n    eol (end of line)\n      = \"\\\\n\"\n    }\n  `,\n\n  strictGrammar:\n  `strictGrammar <: basicGrammar {\n    abs\n      := \"ABS\" ~identPart\n    after\n      := \"AFTER\" ~identPart\n    and\n      := \"AND\" ~identPart\n    asc\n      := \"ASC\" ~identPart\n    atn\n      := \"ATN\" ~identPart\n    auto\n      := \"AUTO\" ~identPart\n    binS\n      := \"BIN$\" ~identPart\n    border\n      := \"BORDER\" ~identPart\n    break\n      := \"BREAK\" ~identPart\n    call\n      := \"CALL\" ~identPart\n    cat\n      := \"CAT\" ~identPart\n    chain\n      := \"CHAIN\" ~identPart\n    chrS\n      := \"CHR$\" ~identPart\n    cint\n      := \"CINT\" ~identPart\n    clear\n      := \"CLEAR\" ~identPart\n    clg\n      := \"CLG\" ~identPart\n    closein\n      := \"CLOSEIN\" ~identPart\n    closeout\n      := \"CLOSEOUT\" ~identPart\n    cls\n      := \"CLS\" ~identPart\n    cont\n      := \"CONT\" ~identPart\n    copychrS\n      := \"COPYCHR$\" ~identPart\n    cos\n      := \"COS\" ~identPart\n    creal\n      := \"CREAL\" ~identPart\n    cursor\n      := \"CURSOR\" ~identPart\n    data\n      := \"DATA\" ~identPart\n    decS\n      := \"DEC$\" ~identPart\n    def\n      := \"DEF\" ~identPart\n    defint\n      := \"DEFINT\" ~identPart\n    defreal\n      := \"DEFREAL\" ~identPart\n    defstr\n      := \"DEFSTR\" ~identPart\n    deg\n      := \"DEG\" ~identPart\n    delete\n      := \"DELETE\" ~identPart\n    derr\n      := \"DERR\" ~identPart\n    di\n      := \"DI\" ~identPart\n    dim\n      := \"DIM\" ~identPart\n    draw\n      := \"DRAW\" ~identPart\n    drawr\n      := \"DRAWR\" ~identPart\n    edit\n      := \"EDIT\" ~identPart\n    ei\n      := \"EI\" ~identPart\n    else\n      := \"ELSE\" ~identPart\n    endLit\n      := \"END\" ~identPart\n    ent\n      := \"ENT\" ~identPart\n    env\n      := \"ENV\" ~identPart\n    eof\n      := \"EOF\" ~identPart\n    erase\n      := \"ERASE\" ~identPart\n    erl\n      := \"ERL\" ~identPart\n    err\n      := \"ERR\" ~identPart\n    error\n      := \"ERROR\" ~identPart\n    every\n      := \"EVERY\" ~identPart\n    exp\n      := \"EXP\" ~identPart\n    fill\n      := \"FILL\" ~identPart\n    fix\n      := \"FIX\" ~identPart\n    fn\n      := \"FN\"  //~identPart\n    for\n      := \"FOR\" ~identPart\n    frame\n      := \"FRAME\" ~identPart\n    fre\n      := \"FRE\" ~identPart\n    gosub\n      := \"GOSUB\" ~identPart\n    goto\n      := \"GOTO\" ~identPart\n    graphics\n      := \"GRAPHICS\" ~identPart\n    hexS\n      := \"HEX$\" ~identPart\n    himem\n      := \"HIMEM\" ~identPart\n    if\n      := \"IF\" ~identPart\n    ink\n      := \"INK\" ~identPart\n    inkey\n      := \"INKEY\" ~identPart\n    inkeyS\n      := \"INKEY$\" ~identPart\n    inp\n      := \"INP\" ~identPart\n    input\n      := \"INPUT\" ~identPart\n    instr\n      := \"INSTR\" ~identPart\n    int\n      := \"INT\" ~identPart\n    joy\n      := \"JOY\" ~identPart\n    key\n      := \"KEY\" ~identPart\n    leftS\n      := \"LEFT$\" ~identPart\n    len\n      := \"LEN\" ~identPart\n    let\n      := \"LET\" ~identPart\n    line\n      := \"LINE\" ~identPart\n    list\n      := \"LIST\" ~identPart\n    load\n      := \"LOAD\" ~identPart\n    locate\n      := \"LOCATE\" ~identPart\n    log\n      := \"LOG\" ~identPart\n    log10\n      := \"LOG10\" ~identPart\n    lowerS\n      := \"LOWER$\" ~identPart\n    mask\n      := \"MASK\" ~identPart\n    max\n      := \"MAX\" ~identPart\n    memory\n      := \"MEMORY\" ~identPart\n    merge\n      := \"MERGE\" ~identPart\n    midS\n      := \"MID$\" ~identPart\n    min\n      := \"MIN\" ~identPart\n    mod\n      := \"MOD\" ~identPart\n    mode\n      := \"MODE\" ~identPart\n    move\n      := \"MOVE\" ~identPart\n    mover\n      := \"MOVER\" ~identPart\n    new\n      := \"NEW\" ~identPart\n    next\n      := \"NEXT\" ~identPart\n    not\n      := \"NOT\" ~identPart\n    on\n      := \"ON\" ~identPart\n    openin\n      := \"OPENIN\" ~identPart\n    openout\n      := \"OPENOUT\" ~identPart\n    or\n      := \"OR\" ~identPart\n    origin\n      := \"ORIGIN\" ~identPart\n    out\n      := \"OUT\" ~identPart\n    paper\n      := \"PAPER\" ~identPart\n    peek\n      := \"PEEK\" ~identPart\n    pen\n      := \"PEN\" ~identPart\n    pi\n      := \"PI\" ~identPart\n    plot\n      := \"PLOT\" ~identPart\n    plotr\n      := \"PLOTR\" ~identPart\n    poke\n      := \"POKE\" ~identPart\n    pos\n      := \"POS\" ~identPart\n    print\n      := \"PRINT\" ~identPart\n    rad\n      := \"RAD\" ~identPart\n    randomize\n      := \"RANDOMIZE\" ~identPart\n    read\n      := \"READ\" ~identPart\n    release\n      := \"RELEASE\" ~identPart\n    rem\n      := \"REM\" ~identPart\n    remain\n      := \"REMAIN\" ~identPart\n    renum\n      := \"RENUM\" ~identPart\n    restore\n      := \"RESTORE\" ~identPart\n    resume\n      := \"RESUME\" ~identPart\n    return\n      := \"RETURN\" ~identPart\n    rightS\n      := \"RIGHT$\" ~identPart\n    rnd\n      := \"RND\" ~identPart\n    round\n      := \"ROUND\" ~identPart\n    run\n      := \"RUN\" ~identPart\n    save\n      := \"SAVE\" ~identPart\n    sgn\n      := \"SGN\" ~identPart\n    sin\n      := \"SIN\" ~identPart\n    sound\n      := \"SOUND\" ~identPart\n    spaceS\n      := \"SPACE$\" ~identPart\n    spc\n      := \"SPC\" ~identPart\n    speed\n      := \"SPEED\" ~identPart\n    sq\n      := \"SQ\" ~identPart\n    sqr\n      := \"SQR\" ~identPart\n    step\n      := \"STEP\" ~identPart\n    stop\n      := \"STOP\" ~identPart\n    strS\n      := \"STR$\" ~identPart\n    stringS\n      := \"STRING$\" ~identPart\n    swap\n      := \"SWAP\" ~identPart\n    symbol\n      := \"SYMBOL\" ~identPart\n    tab\n      := \"TAB\" ~identPart\n    tag\n      := \"TAG\" ~identPart\n    tagoff\n      := \"TAGOFF\" ~identPart\n    tan\n      := \"TAN\" ~identPart\n    test\n      := \"TEST\" ~identPart\n    testr\n      := \"TESTR\" ~identPart\n    then\n      := \"THEN\" ~identPart\n    time\n      := \"TIME\" ~identPart\n    to\n      := \"TO\" ~identPart\n    troff\n      := \"TROFF\" ~identPart\n    tron\n      := \"TRON\" ~identPart\n    unt\n      := \"UNT\" ~identPart\n    upperS\n      := \"UPPER$\" ~identPart\n    using\n      := \"USING\" ~identPart\n    val\n      := \"VAL\" ~identPart\n    vpos\n      := \"VPOS\" ~identPart\n    wait\n      := \"WAIT\" ~identPart\n    wend\n      := \"WEND\" ~identPart\n    while\n      := \"WHILE\" ~identPart\n    width\n      := \"WIDTH\" ~identPart\n    window\n      := \"WINDOW\" ~identPart\n    write\n      := \"WRITE\" ~identPart\n    xor\n      := \"XOR\" ~identPart\n    xpos\n      := \"XPOS\" ~identPart\n    ypos\n      := \"YPOS\" ~identPart\n    zone\n      := \"ZONE\" ~identPart\n\n    identStart := lower\n}\n  `\n};\n","import type { ActionDict, Node } from \"ohm-js\";\nimport type { IVm, DefinedLabelEntryType, GosubLabelEntryType, ISemanticsHelper } from \"./Interfaces\";\n\ntype RecursiveArray<T> = T | RecursiveArray<T>[];\n\nfunction getCodeSnippets() {\n    const _o = {} as IVm;\n    const _data: (string | number)[] = [];\n    let _dataPtr = 0;\n    const _restoreMap: Record<string, number> = {};\n\tconst _startTime = 0;\n\tconst frame = async () => {}; // dummy\n\n    const codeSnippets = {\n\t\tbin$: function bin$(num: number, pad: number = 0): string {\n            return num.toString(2).toUpperCase().padStart(pad, \"0\");\n        },\n        cls: function cls() {\n            _o.cls();\n        },\n        dec$: function dec$(num: number, format: string) {\n            const decimals = (format.split(\".\")[1] || \"\").length;\n            const str = num.toFixed(decimals);\n            const pad = \" \".repeat(Math.max(0, format.length - str.length));\n            return pad + str;\n        },\n        dim: function dim(dims: number[], initVal: string | number = 0) {\n            const createRecursiveArray = (depth: number): RecursiveArray<string | number> => {\n                const length = dims[depth] + 1; // +1 because of 0-based index\n                const array = Array.from({ length }, () =>\n                    depth + 1 < dims.length ? createRecursiveArray(depth + 1) : initVal\n                );\n                return array;\n            };\n            return createRecursiveArray(0);\n        },\n        draw: function draw(x: number, y: number) {\n            _o.drawMovePlot(\"L\", x, y);\n        },\n        drawr: function drawr(x: number, y: number) {\n            _o.drawMovePlot(\"l\", x, y);\n        },\n        end: function end() {\n            _o.flush();\n            return \"end\";\n        },\n        frame: async function frame() {\n            _o.flush();\n\t\t\tif (_o.getEscape()) {\n\t\t\t\tthrow new Error(\"INFO: Program stopped\");\n\t\t\t}\n            return new Promise<void>(resolve => setTimeout(() => resolve(), Date.now() % 50));\n        },\n        graphicsPen: function graphicsPen(num: number) {\n            _o.graphicsPen(num);\n        },\n        hex$: function hex$(num: number, pad?: number) {\n            return num.toString(16).toUpperCase().padStart(pad || 0, \"0\");\n        },\n\t\tink: function ink(num: number, col: number) {\n\t\t\t_o.ink(num, col);\n\t\t},\n\t\tinkey$: async function inkey$() {\n            await frame();\n\t\t\treturn await _o.inkey$();\n        },\n        input: async function input(msg: string, isNum: boolean) {\n\t\t\tawait frame();\n\t\t\tconst input = await _o.input(msg);\n\t\t\tif (input === null) {\n\t\t\t\tthrow new Error(\"INFO: Input canceled\");\n\t\t\t} else if (isNum && isNaN(Number(input))) {\n\t\t\t\tthrow new Error(\"Invalid number input\");\n\t\t\t} else {\n\t\t\t\treturn isNum ? Number(input) : input;\n\t\t\t}\n\t\t},\n        mid$Assign: function mid$Assign(s: string, start: number, newString: string, len?: number) {\n            start -= 1;\n            len = Math.min(len ?? newString.length, newString.length, s.length - start);\n            return s.substring(0, start) + newString.substring(0, len) + s.substring(start + len);\n        },\n        mode: function mode(num: number) {\n            _o.mode(num);\n        },\n        move: function move(x: number, y: number) {\n            _o.drawMovePlot(\"M\", x, y);\n        },\n        mover: function mover(x: number, y: number) {\n            _o.drawMovePlot(\"m\", x, y);\n        },\n\t\torigin: function origin(x: number, y: number) {\n            _o.origin(x, y);\n        },\n        paper: function paper(n: number) {\n            _o.paper(n);\n        },\n        pen: function pen(n: number) {\n            _o.pen(n);\n        },\n        plot: function plot(x: number, y: number) {\n            _o.drawMovePlot(\"P\", x, y);\n        },\n        plotr: function plotr(x: number, y: number) {\n            _o.drawMovePlot(\"p\", x, y);\n        },\n        print: function print(...args: (string | number)[]) {\n            const _printNumber = (arg: number) => (arg >= 0 ? ` ${arg} ` : `${arg} `);\n            const output = args.map((arg) => (typeof arg === \"number\") ? _printNumber(arg) : arg).join(\"\");\n            _o.print(output);\n        },\n        read: function read() {\n            return _data[_dataPtr++];\n        },\n        restore: function restore(label: string) {\n            _dataPtr = _restoreMap[label];\n        },\n        round: function round(num: number, dec: number) {\n            return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n        },\n        stop: function stop() {\n            _o.flush();\n            return \"stop\";\n        },\n        str$: function str$(num: number) {\n            return num >= 0 ? ` ${num}` : String(num);\n        },\n\t\ttag: function tag(active: boolean) {\n            _o.tag(active);\n        },\n        time: function time() {\n            return ((Date.now() - _startTime) * 3 / 10) | 0;\n        },\n        val: function val(str: string) {\n            return Number(str.replace(\"&x\", \"0b\").replace(\"&\", \"0x\"));\n        }\n    };\n    return codeSnippets;\n}\n\nfunction trimIndent(code: string): string {\n    const lines = code.split(\"\\n\");\n    const lastLine = lines[lines.length - 1];\n\n    const match = lastLine.match(/^(\\s+)}$/);\n    if (match) {\n        const indent = match[1];\n        const trimmedLines = lines.map((line) => line.startsWith(indent) ? line.slice(indent.length) : line);\n        return trimmedLines.join(\"\\n\");\n    }\n    return code;\n}\n\nfunction evalChildren(children: Node[]): string[] {\n    return children.map(child => child.eval());\n}\n\nfunction createComparisonExpression(a: Node, op: string, b: Node): string {\n\treturn `-(${a.eval()} ${op} ${b.eval()})`;\n}\n\nfunction getSemantics(semanticsHelper: ISemanticsHelper): ActionDict<string> {\n    const drawMovePlot = (lit: Node, x: Node, _comma1: Node, y: Node, _comma2: Node, e3: Node) => {\n        const command = lit.sourceString.toLowerCase();\n        semanticsHelper.addInstr(command);\n        const pen = e3.child(0)?.eval();\n        let penStr = \"\";\n        if (pen !== undefined) {\n            semanticsHelper.addInstr(\"graphicsPen\");\n            penStr = `graphicsPen(${pen}); `;\n        }\n        return penStr + `${command}(${x.eval()}, ${y.eval()})`;\n    };\n\n    const cosSinTan = (lit: Node, _open: Node, e: Node, _close: Node) => { // eslint-disable-line @typescript-eslint/no-unused-vars\n        const func = lit.sourceString.toLowerCase();\n        return semanticsHelper.getDeg() ? `Math.${func}((${e.eval()}) * Math.PI / 180)` : `Math.${func}(${e.eval()})`;\n    }\n\n    // Semantics to evaluate an arithmetic expression\n    const semantics: ActionDict<string> = {\n        Program(lines: Node) {\n            const lineList = evalChildren(lines.children);\n\n            const variableList = semanticsHelper.getVariables();\n            const variableDeclarations = variableList.length ? \"let \" + variableList.map((v) => v.endsWith(\"$\") ? `${v} = \"\"` : `${v} = 0`).join(\", \") + \";\" : \"\";\n\n            // find subroutines\n            const definedLabels = semanticsHelper.getDefinedLabels();\n            const gosubLabels = semanticsHelper.getGosubLabels();\n            const restoreMap = semanticsHelper.getRestoreMap();\n\n            const awaitLabels: string[] = [];\n            let subroutineStart: DefinedLabelEntryType | undefined;\n            for (const label of definedLabels) {\n                if (gosubLabels[label.label]) {\n                    subroutineStart = label;\n                }\n\n                if (subroutineStart && label.last >= 0) {\n                    const first = subroutineStart.first;\n                    const indent = lineList[first].search(/\\S|$/);\n                    const indentStr = \" \".repeat(indent);\n\n                    let hasAwait = false;\n                    for (let i = first; i <= label.last; i += 1) {\n                        if (lineList[i].includes(\"await \")) {\n                            hasAwait = true; // quick check\n                        }\n                        lineList[i] = \"  \" + lineList[i]; // indent\n                    }\n\n                    const asyncStr = hasAwait ? \"async \" : \"\";\n                    lineList[first] = `${indentStr}${asyncStr}function _${subroutineStart.label}() {${indentStr}\\n` + lineList[first];\n                    lineList[label.last] += `\\n${indentStr}}`;\n                    if (hasAwait) {\n                        awaitLabels.push(subroutineStart.label);\n                    }\n                    subroutineStart = undefined;\n                }\n\n                if (restoreMap[label.label] === -1) {\n                    restoreMap[label.label] = label.dataIndex;\n                }\n            }\n\n            const dataList = semanticsHelper.getDataList();\n            if (dataList.length) {\n                for (const key of Object.keys(restoreMap)) {\n                    let index = restoreMap[key];\n                    if (index < 0) {\n                        index = 0;\n                        restoreMap[key] = index;\n                    }\n                }\n                lineList.unshift(`const {_data, _restoreMap} = _defineData();\\nlet _dataPtr = 0;`);\n                lineList.push(`function _defineData() {\\n  const _data = [\\n${dataList.join(\",\\n\")}\\n  ];\\n  const _restoreMap = ${JSON.stringify(restoreMap)};\\n  return {_data, _restoreMap};\\n}`);\n            }\n\n            lineList.push(\"// library\");\n\n            const instrMap = semanticsHelper.getInstrMap();\n            const codeSnippets = getCodeSnippets();\n\n            let needsAsync = false;\n\t\t\tlet needsStartTime = false;\n            for (const key of Object.keys(codeSnippets)) {\n                if (instrMap[key]) {\n\t\t\t\t\tconst code = String((codeSnippets[key as keyof typeof codeSnippets]).toString());\n                    const adaptedCode = trimIndent(code);\n\t\t\t\t\tlineList.push(adaptedCode);\n                    if (adaptedCode.startsWith(\"async \")) {\n                        needsAsync = true;\n                    }\n\t\t\t\t\tif (adaptedCode.includes(\"_startTime\")) {\n\t\t\t\t\t\tneedsStartTime = true;\n\t\t\t\t\t}\n                }\n            }\n\n            if (variableDeclarations) {\n                lineList.unshift(variableDeclarations);\n            }\n\n\t\t\tif (needsStartTime) {\n\t\t\t\tlineList.unshift(`const _startTime = Date.now();`);\n\t\t\t}\n\n            if (needsAsync) {\n                lineList.unshift(`return async function() {`);\n                lineList.push('}();');\n            }\n\n            lineList.unshift(`\"use strict\"`);\n\n            let lineStr = lineList.filter((line) => line.trimEnd() !== \"\").join('\\n');\n            if (awaitLabels.length) {\n                for (const label of awaitLabels) {\n                    const regEx = new RegExp(`_${label}\\\\(\\\\);`, \"g\");\n                    lineStr = lineStr.replace(regEx, `await _${label}();`);\n                }\n            }\n            return lineStr;\n        },\n\n        Line(label: Node, stmts: Node, comment: Node, _eol: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            const labelString = label.sourceString;\n\n            const currentLineIndex = semanticsHelper.incrementLineIndex() - 1;\n\n            if (labelString) {\n                semanticsHelper.addDefinedLabel(labelString, currentLineIndex);\n            }\n\n            const lineStr = stmts.eval();\n\n            if (lineStr === \"return\") {\n                const definedLabels = semanticsHelper.getDefinedLabels();\n                if (definedLabels.length) {\n                    const lastLabelItem = definedLabels[definedLabels.length - 1];\n                    lastLabelItem.last = currentLineIndex;\n                }\n            }\n\n            const commentStr = comment.sourceString ? `; //${comment.sourceString.substring(1)}` : \"\";\n            const semi = lineStr === \"\" || lineStr.endsWith(\"{\") || lineStr.endsWith(\"}\") || lineStr.startsWith(\"//\") || commentStr ? \"\" : \";\";\n\n            const indentStr = semanticsHelper.getIndentStr();\n            semanticsHelper.applyNextIndent();\n\n            return indentStr + lineStr + commentStr + semi;\n        },\n\n        Statements(stmt: Node, _stmtSep: Node, stmts: Node) {\n            // separate statements, use \";\", if the last stmt does not end with \"{\"\n            const statements = [stmt.eval(), ...evalChildren(stmts.children)];\n            return statements.reduce((acc, current) => acc.endsWith(\"{\") ? `${acc} ${current}` : `${acc}; ${current}`);\n        },\n\n        ArrayAssign(ident: Node, _op: Node, e: Node): string {\n            return `${ident.eval()} = ${e.eval()}`;\n        },\n\n        Assign(ident: Node, _op: Node, e: Node): string {\n            const variableName = ident.sourceString;\n            const resolvedVariableName = semanticsHelper.getVariable(variableName);\n            const value = e.eval();\n            return `${resolvedVariableName} = ${value}`;\n        },\n\n        Abs(_absLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            return `Math.abs(${e.eval()})`;\n        },\n\n        Asc(_ascLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            return `(${e.eval()}).charCodeAt(0)`;\n        },\n\n        Atn(_atnLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            return semanticsHelper.getDeg() ? `(Math.atan(${e.eval()}) * 180 / Math.PI)` : `Math.atan(${e.eval()})`;\n        },\n\n        BinS(_binLit: Node, _open: Node, e: Node, _comma: Node, n: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            semanticsHelper.addInstr(\"bin$\");\n            const pad = n.child(0)?.eval();\n            return pad !== undefined ? `bin$(${e.eval()}, ${pad})` : `bin$(${e.eval()})`\n        },\n\n        ChrS(_chrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            return `String.fromCharCode(${e.eval()})`;\n        },\n\n        Comment(_commentLit: Node, remain: Node) {\n            return `//${remain.sourceString}`;\n        },\n\n        Cos: cosSinTan,\n\n        Cint(_cintLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            return `Math.round(${e.eval()})`;\n        },\n\n        Cls(_clsLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            semanticsHelper.addInstr(\"cls\");\n            return `cls()`;\n        },\n\n        Data(_datalit: Node, args: Node) {\n            const argList = evalChildren(args.asIteration().children);\n\n            const definedLabels = semanticsHelper.getDefinedLabels();\n\n            if (definedLabels.length) {\n                const currentLabel = definedLabels[definedLabels.length - 1];\n                if (currentLabel.dataIndex === -1) {\n                    const dataIndex = semanticsHelper.getDataIndex();\n                    currentLabel.dataIndex = dataIndex;\n                }\n            }\n\n            const dataList = semanticsHelper.getDataList();\n            dataList.push(argList.join(\", \"));\n            semanticsHelper.addDataIndex(argList.length);\n            return \"\";\n        },\n\n        DecS(_decLit: Node, _open: Node, num: Node, _comma: Node, format: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            semanticsHelper.addInstr(\"dec$\");\n            return `dec$(${num.eval()}, ${format.eval()})`;\n        },\n\n        Def(_defLit: Node, _fnLit: Node, assign: Node) {\n            return `${assign.eval()}`;\n        },\n\n        DefArgs(_open: Node, arrayIdents: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            const argList = evalChildren(arrayIdents.asIteration().children);\n\n            return `(${argList.join(\", \")})`;\n        },\n\n        DefAssign(ident: Node, args: Node, _equal: Node, e: Node) {\n            const fnIdent = semanticsHelper.getVariable(`fn${ident.sourceString}`);\n\n            semanticsHelper.setDefContext(true); // do not create global variables in this context\n            const argStr = evalChildren(args.children).join(\", \") || \"()\";\n\t\t\t\n            const defBody = e.eval();\n            semanticsHelper.setDefContext(false);\n\n            return `${fnIdent} = ${argStr} => ${defBody}`;\n        },\n\n        Deg(_degLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n            semanticsHelper.setDeg(true);\n            return `/* deg active */`;\n        },\n\n\t\tDim(_dimLit: Node, dimArgs: Node) {\n\t\t\tconst argumentList: string[] = evalChildren(dimArgs.asIteration().children);\n\t\t\tsemanticsHelper.addInstr(\"dim\");\n\t\t\treturn argumentList.join(\"; \");\n\t\t},\n\n\t\tDraw: drawMovePlot,\n\n\t\tDrawr: drawMovePlot,\n\n\t\tEnd(_endLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"end\");\n\t\t\treturn `return end()`;\n\t\t},\n\n\t\tErase(_eraseLit: Node, arrayIdents: Node) { // erase not really needed\n\t\t\tconst arrayIdentifiers: string[] = evalChildren(arrayIdents.asIteration().children);\n\t\t\tconst results: string[] = [];\n\n\t\t\tfor (const ident of arrayIdentifiers) {\n\t\t\t\tconst initValStr = ident.endsWith(\"$\") ? '\"\"' : '0';\n\t\t\t\tresults.push(`${ident} = ${initValStr}`);\n\t\t\t}\n\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tError(_errorLit: Node, e: Node) {\n\t\t\treturn `throw new Error(${e.eval()})`;\n\t\t},\n\n\t\tExp(_expLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.exp(${e.eval()})`;\n\t\t},\n\n\t\tFix(_fixLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.trunc(${e.eval()})`;\n\t\t},\n\n\t\tAnyFnArgs(_open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\treturn `(${argumentList.join(\", \")})`;\n\t\t},\n\n\n\t\tFnIdent(fnIdent: Node, args: Node) {\n\t\t\tconst argumentString = args.child(0)?.eval() || \"()\";\n\t\t\treturn `${fnIdent.eval()}${argumentString}`;\n\t\t},\n\n\t\tStrFnIdent(fnIdent: Node, args: Node) {\n\t\t\tconst argStr = args.child(0)?.eval() || \"()\";\n\t\t\treturn `${fnIdent.eval()}${argStr}`;\n\t\t},\n\n\t\tFor(_forLit: Node, variable: Node, _eqSign: Node, start: Node, _dirLit: Node, end: Node, _stepLit: Node, step: Node) {\n\t\t\tconst variableExpression = variable.eval();\n\t\t\tconst startExpression = start.eval();\n\t\t\tconst endExpression = end.eval();\n\t\t\tconst stepExpression = step.child(0)?.eval() || \"1\";\n\t\t\n\t\t\tconst stepAsNumber = Number(stepExpression);\n\t\t\n\t\t\tlet comparisonStatement = \"\";\n\t\t\tif (isNaN(stepAsNumber)) {\n\t\t\t\tcomparisonStatement = `${stepExpression} >= 0 ? ${variableExpression} <= ${endExpression} : ${variableExpression} >= ${endExpression}`;\n\t\t\t} else {\n\t\t\t\tcomparisonStatement = stepAsNumber >= 0 ? `${variableExpression} <= ${endExpression}` : `${variableExpression} >= ${endExpression}`;\n\t\t\t}\n\t\t\n\t\t\tsemanticsHelper.nextIndentAdd(2);\n\t\t\tconst result = `for (${variableExpression} = ${startExpression}; ${comparisonStatement}; ${variableExpression} += ${stepExpression}) {`;\n\t\t\n\t\t\treturn result;\n\t\t},\n\n\t\tFrame(_frameLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"frame\");\n\t\t\treturn `await frame()`;\n\t\t},\n\n\t\tGosub(_gosubLit: Node, e: Node) {\n\t\t\tconst labelString = e.sourceString;\n\t\t\tsemanticsHelper.addGosubLabel(labelString);\n\t\t\n\t\t\treturn `_${labelString}()`;\n\t\t},\n\n\t\tGraphicsPen(_graphicsLit: Node, _penLit: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"graphicsPen\");\n\t\t\treturn `graphicsPen(${e.eval()})`;\n\t\t},\n\n\t\tHexS(_hexLit: Node, _open: Node, e: Node, _comma: Node, n: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"hex$\");\n\t\t\tconst pad = n.child(0)?.eval();\n\t\t\treturn pad !== undefined ? `hex$(${e.eval()}, ${pad})` : `hex$(${e.eval()})`\n\t\t},\n\n\t\tIf(_iflit: Node, condExp: Node, _thenLit: Node, thenStat: Node, elseLit: Node, elseStat: Node) {\n\t\t\tconst initialIndent = semanticsHelper.getIndentStr();\n\t\t\tsemanticsHelper.addIndent(2);\n\t\t\tconst increasedIndent = semanticsHelper.getIndentStr();\n\t\t\n\t\t\tconst condition = condExp.eval();\n\t\t\tconst thenStatement = thenStat.eval();\n\t\t\n\t\t\tlet result = `if (${condition}) {\\n${increasedIndent}${thenStatement}\\n${initialIndent}}`; // put in newlines to also allow line comments\n\t\t\tif (elseLit.sourceString) {\n\t\t\t\tconst elseStatement = evalChildren(elseStat.children).join('; ');\n\t\t\t\tresult += ` else {\\n${increasedIndent}${elseStatement}\\n${initialIndent}}`;\n\t\t\t}\n\t\t\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn result;\n\t\t},\n\n\t\tInk(_inkLit: Node, num: Node, _comma: Node, col: Node, _comma2: Node, _col2: Node,) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"ink\");\n\t\t\treturn `ink(${num.eval()}, ${col.eval()})`;\n\t\t},\n\n\t\tInkeyS(_inkeySLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"inkey$\");\n\t\t\tsemanticsHelper.addInstr(\"frame\");\n\t\t\treturn `await inkey$()`;\n\t\t},\n\n\t\tInput(_inputLit: Node, message: Node, _semi: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"input\");\n\t\t\tsemanticsHelper.addInstr(\"frame\");\n\t\t\n\t\t\tconst messageString = message.sourceString.replace(/\\s*[;,]$/, \"\");\n\t\t\tconst identifier = e.eval();\n\t\t\tconst isNumberString = identifier.includes(\"$\") ? \"\" : \", true\";\n\t\t\n\t\t\treturn `${identifier} = await input(${messageString}${isNumberString})`;\n\t\t},\n\n\t\tInstr_noLen(_instrLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `((${e1.eval()}).indexOf(${e2.eval()}) + 1)`;\n\t\t},\n\n\t\tInstr_len(_instrLit: Node, _open: Node, len: Node, _comma1: Node, e1: Node, _comma2: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `((${e1.eval()}).indexOf(${e2.eval()}, ${len.eval()} - 1) + 1)`;\n\t\t},\n\n\t\tInt(_intLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.floor(${e.eval()})`;\n\t\t},\n\n\t\tLeftS(_leftLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e1.eval()}).slice(0, ${e2.eval()})`;\n\t\t},\n\n\t\tLen(_lenLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).length`;\n\t\t},\n\n\t\tLog(_logLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.log(${e.eval()})`;\n\t\t},\n\n\t\tLog10(_log10Lit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.log10(${e.eval()})`;\n\t\t},\n\n\t\tLowerS(_lowerLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).toLowerCase()`;\n\t\t},\n\n\t\tMax(_maxLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\treturn `Math.max(${argumentList})`;\n\t\t},\n\t\t\n\t\tMidS(_midLit: Node, _open: Node, e1: Node, _comma1: Node, e2: Node, _comma2: Node, e3: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst length = e3.child(0)?.eval();\n\t\t\tconst lengthString = length === undefined ? \"\" : `, ${length}`;\n\t\t\treturn `(${e1.eval()}).substr(${e2.eval()} - 1${lengthString})`;\n\t\t},\n\n\t\tMidSAssign(_midLit: Node, _open: Node, ident: Node, _comma1: Node, e2: Node, _comma2: Node, e3: Node, _close: Node, _op: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"mid$Assign\");\n\n\t\t\tconst variableName = ident.sourceString;\n\t\t\tconst resolvedVariableName = semanticsHelper.getVariable(variableName);\n\t\t\tconst start = e2.eval();\n\t\t\tconst newString = e.eval();\n\t\t\tconst length = e3.child(0)?.eval(); // also undefined possible\n\n\t\t\treturn `${resolvedVariableName} = mid$Assign(${resolvedVariableName}, ${start}, ${newString}, ${length})`;\n\t\t},\n\n\t\tMin(_minLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\treturn `Math.min(${argumentList})`;\n\t\t},\n\n\t\tMode(_modeLit: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"mode\");\n\t\t\treturn `mode(${e.eval()})`;\n\t\t},\n\n\t\tMove: drawMovePlot,\n\n\t\tMover: drawMovePlot,\n\n\t\tNext(_nextLit: Node, variables: Node) {\n\t\t\tconst argumentList = evalChildren(variables.asIteration().children);\n\t\t\tif (!argumentList.length) {\n\t\t\t\targumentList.push(\"_any\");\n\t\t\t}\n\t\t\tsemanticsHelper.addIndent(-2 * argumentList.length);\n\t\t\treturn '} '.repeat(argumentList.length).slice(0, -1);\n\t\t},\n\n\t\tOn(_onLit: Node, e1: Node, _gosubLit: Node, args: Node) {\n\t\t\tconst index = e1.eval();\n\t\t\tconst argumentList = args.asIteration().children.map(child => child.sourceString);\n\t\t\n\t\t\tfor (let i = 0; i < argumentList.length; i += 1) {\n\t\t\t\tsemanticsHelper.addGosubLabel(argumentList[i]);\n\t\t\t}\n\t\t\n\t\t\treturn `([${argumentList.map((label) => `_${label}`).join(\",\")}]?.[${index} - 1] || (() => undefined))()`; // 1-based index\n\t\t},\n\n\t\tOrigin(_originLit: Node, x: Node, _comma1: Node, y: Node) {\n\t\t\tsemanticsHelper.addInstr(\"origin\");\n\t\t\treturn `origin(${x.eval()}, ${y.eval()})`;\n\t\t},\n\n\t\tPaper(_paperLit: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"paper\");\n\t\t\treturn `paper(${e.eval()})`;\n\t\t},\n\n\t\tPen(_penLit: Node, e: Node) {\n\t\t\tsemanticsHelper.addInstr(\"pen\");\n\t\t\treturn `pen(${e.eval()})`;\n\t\t},\n\n\t\tPi(_piLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"Math.PI\";\n\t\t},\n\n\t\tPlot: drawMovePlot,\n\n\t\tPlotr: drawMovePlot,\n\n\t\tPrintArg_strCmp(_cmp: Node, args: Node) {\n\t\t\tconst parameterString = args.children[0].eval();\n\t\t\treturn parameterString;\n\t\t},\n\t\t\n\t\tPrintArg_usingNum(_printLit: Node, format: Node, _semi: Node, numArgs: Node) {\n\t\t\tsemanticsHelper.addInstr(\"dec$\");\n\t\t\tconst formatString = format.eval();\n\t\t\tconst argumentList = evalChildren(numArgs.asIteration().children);\n\t\t\tconst parameterString = argumentList.map((arg) => `dec$(${arg}, ${formatString})`).join(', ');\n\t\t\treturn parameterString;\n\t\t},\n\t\t\n\t\tPrint(_printLit: Node, args: Node, semi: Node) {\n\t\t\tsemanticsHelper.addInstr(\"print\");\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\tconst parameterString = argumentList.join(', ') || \"\";\n\t\t\n\t\t\tlet newlineString = \"\";\n\t\t\tif (!semi.sourceString) {\n\t\t\t\tnewlineString = parameterString ? `, \"\\\\n\"` : `\"\\\\n\"`;\n\t\t\t}\n\t\t\treturn `print(${parameterString}${newlineString})`;\n\t\t},\n\n\t\tRad(_radLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.setDeg(false);\n\t\t\treturn `/* rad active */`;\n\t\t},\n\n\t\tRead(_readlit: Node, args: Node) {\n\t\t\tsemanticsHelper.addInstr(\"read\");\n\t\t\tconst argumentList = evalChildren(args.asIteration().children);\n\t\t\tconst results = argumentList.map(identifier => `${identifier} = read()`);\n\t\t\treturn results.join(\"; \");\n\t\t},\n\n\t\tRem(_remLit: Node, remain: Node) {\n\t\t\treturn `// ${remain.sourceString}`;\n\t\t},\n\n\t\tRestore(_restoreLit: Node, e: Node) {\n\t\t\tconst labelString = e.sourceString || \"0\";\n\t\t\tsemanticsHelper.addRestoreLabel(labelString);\n\t\t\n\t\t\tsemanticsHelper.addInstr(\"restore\");\n\t\t\treturn `restore(${labelString})`;\n\t\t},\n\n\t\tReturn(_returnLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn \"return\";\n\t\t},\n\n\t\tRightS(_rightLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst string: string = e1.eval();\n\t\t\tconst length: string = e2.eval();\n\t\t\treturn `(${string}).substring((${string}).length - (${length}))`;\n\t\t},\n\n\t\tRnd(_rndLit: Node, _open: Node, _e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// args are ignored\n\t\t\treturn `Math.random()`;\n\t\t},\n\n\t\tRound(_roundLit: Node, _open: Node, value: Node, _comma: Node, decimals: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst decimalPlaces = decimals.child(0)?.eval();\n\t\t\tif (decimalPlaces) {\n\t\t\t\tsemanticsHelper.addInstr(\"round\");\n\t\t\t\treturn `round(${value.eval()}, ${decimalPlaces})`;\n\t\t\t}\n\t\t\treturn `Math.round(${value.eval()})`; // common round without decimals places\n\t\t\t// A better way to avoid rounding errors: https://www.jacklmoore.com/notes/rounding-in-javascript\n\t\t},\n\n\t\tSgn(_sgnLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sign(${e.eval()})`;\n\t\t},\n\n\t\tSin: cosSinTan,\n\n\t\tSpaceS(_stringLit: Node, _open: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\" \".repeat(${len.eval()})`;\n\t\t},\n\n\t\tSqr(_sqrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `Math.sqrt(${e.eval()})`;\n\t\t},\n\n\t\tStop(_stopLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"stop\");\n\t\t\treturn `return stop()`;\n\t\t},\n\n\t\tStrS(_strLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst argument = e.eval();\n\t\t\n\t\t\tif (isNaN(Number(argument))) {\n\t\t\t\tsemanticsHelper.addInstr(\"str$\");\n\t\t\t\treturn `str$(${argument})`;\n\t\t\t}\n\t\t\t// simplify if we know at compile time that arg is a positive number\n\t\t\treturn argument >= 0 ? `(\" \" + String(${argument}))` : `String(${argument})`;\n\t\t},\n\n\t\tStringS_str(_stringLit: Node, _open: Node, len: Node, _commaLit: Node, chr: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\t// Note: we do not use charAt(0) to get just one char\n\t\t\treturn `(${chr.eval()}).repeat(${len.eval()})`;\n\t\t},\n\n\t\tStringS_num(_stringLit: Node, _open: Node, len: Node, _commaLit: Node, num: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `String.fromCharCode(${num.eval()}).repeat(${len.eval()})`;\n\t\t},\n\n\t\tTag(_tagLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"tag\");\n\t\t\treturn `tag(true)`;\n\t\t},\n\n\t\tTagoff(_tagoffLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"tag\");\n\t\t\treturn `tag(false)`;\n\t\t},\n\n\t\tTan: cosSinTan,\n\n\t\tTime(_timeLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addInstr(\"time\");\n\t\t\treturn `time()`;\n\t\t},\n\n\t\tUpperS(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()}).toUpperCase()`;\n\t\t},\n\n\t\tVal(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst numPattern = /^\"[\\\\+\\\\-]?\\d*\\.?\\d+(?:[Ee][\\\\+\\\\-]?\\d+)?\"$/;\n\t\t\tconst numStr = String(e.eval());\n\n\t\t\tif (numPattern.test(numStr)) {\n\t\t\t\treturn `Number(${numStr})`; // for non-hex/bin number strings we can use this simple version\n\t\t\t}\n\t\t\tsemanticsHelper.addInstr(\"val\");\n\t\t\treturn `val(${numStr})`;\n\t\t},\n\n\t\tWend(_wendLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tsemanticsHelper.addIndent(-2);\n\t\t\treturn '}';\n\t\t},\n\n\t\tWhile(_whileLit: Node, e: Node) {\n\t\t\tconst cond = e.eval();\n\t\t\tsemanticsHelper.nextIndentAdd(2);\n\t\t\treturn `while (${cond}) {`;\n\t\t},\n\n\t\tXorExp_xor(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} ^ ${b.eval()}`;\n\t\t},\n\n\t\tOrExp_or(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} | ${b.eval()}`;\n\t\t},\n\n\t\tAndExp_and(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} & ${b.eval()}`;\n\t\t},\n\n\t\tNotExp_not(_op: Node, e: Node) {\n\t\t\treturn `~(${e.eval()})`;\n\t\t},\n\n\t\tCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"===\", b);\n\t\t},\n\t\tCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"!==\", b);\n\t\t},\n\t\tCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"<\", b);\n\t\t},\n\t\tCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \"<=\", b);\n\t\t},\n\t\tCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \">\", b);\n\t\t},\n\t\tCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\t\treturn createComparisonExpression(a, \">=\", b);\n\t\t},\n\n\t\tAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} + ${b.eval()}`;\n\t\t},\n\t\tAddExp_minus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} - ${b.eval()}`;\n\t\t},\n\n\t\tModExp_mod(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} % ${b.eval()}`;\n\t\t},\n\n\t\tDivExp_div(a: Node, _op: Node, b: Node) {\n\t\t\treturn `((${a.eval()} / ${b.eval()}) | 0)`;\n\t\t},\n\n\t\tMulExp_times(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} * ${b.eval()}`;\n\t\t},\n\t\tMulExp_divide(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} / ${b.eval()}`;\n\t\t},\n\n\t\tExpExp_power(a: Node, _: Node, b: Node) {\n\t\t\treturn `Math.pow(${a.eval()}, ${b.eval()})`;\n\t\t},\n\n\t\tPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()})`;\n\t\t},\n\t\tPriExp_pos(_op: Node, e: Node) {\n\t\t\treturn `+${e.eval()}`;\n\t\t},\n\t\tPriExp_neg(_op: Node, e: Node) {\n\t\t\treturn `-${e.eval()}`;\n\t\t},\n\n\t\tStrCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} === ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} !== ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} < ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} <= ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} > ${b.eval()})`;\n\t\t},\n\t\tStrCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\t\treturn `-(${a.eval()} >= ${b.eval()})`;\n\t\t},\n\n\t\tStrAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\t\treturn `${a.eval()} + ${b.eval()}`;\n\t\t},\n\n\t\tStrPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `(${e.eval()})`;\n\t\t},\n\n\t\tArrayArgs(args: Node) {\n\t\t\t//return args.asIteration().children.map(c => String(c.eval())).join(\"][\");\n\t\t\treturn evalChildren(args.asIteration().children).join(\"][\");\n\t\t},\n\n\t\tArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${ident.eval()}[${e.eval()}]`;\n\t\t},\n\n\t\tStrArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `${ident.eval()}[${e.eval()}]`;\n\t\t},\n\n\t\tDimArrayArgs(args: Node) {\n\t\t\t//return args.asIteration().children.map(c => String(c.eval())).join(\", \");\n\t\t\treturn evalChildren(args.asIteration().children).join(\", \");\n\t\t},\n\n\t\tDimArrayIdent(ident: Node, _open: Node, indices: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\tconst identStr = ident.eval();\n\t\t\tconst initValStr = identStr.endsWith(\"$\") ? ', \"\"' : '';\n\t\t\tsemanticsHelper.addInstr(\"dim\");\n\n\t\t\treturn `${identStr} = dim([${indices.eval()}]${initValStr})`;\n\t\t},\n\n\t\tdecimalValue(value: Node) {\n\t\t\treturn value.sourceString;\n\t\t},\n\n\t\thexValue(_prefix: Node, value: Node) {\n\t\t\treturn `0x${value.sourceString}`;\n\t\t},\n\n\t\tbinaryValue(_prefix: Node, value: Node) {\n\t\t\treturn `0b${value.sourceString}`;\n\t\t},\n\n\t\tsignedDecimal(sign: Node, value: Node) {\n\t\t\treturn `${sign.sourceString}${value.sourceString}`;\n\t\t},\n\n\t\tstring(_quote1: Node, e: Node, _quote2: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t\treturn `\"${e.sourceString}\"`;\n\t\t},\n\n\t\tident(ident: Node) {\n\t\t\tconst name = ident.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tfnIdent(fn: Node, ident: Node) {\n\t\t\tconst name = fn.sourceString + ident.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tstrIdent(ident: Node, typeSuffix: Node) {\n\t\t\tconst name = ident.sourceString + typeSuffix.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t},\n\n\t\tstrFnIdent(fn: Node, ident: Node, typeSuffix: Node) {\n\t\t\tconst name = fn.sourceString + ident.sourceString + typeSuffix.sourceString;\n\t\t\treturn semanticsHelper.getVariable(name);\n\t\t}\n\t};\n\treturn semantics;\n}\n\n\nexport class Semantics implements ISemanticsHelper {\n\tprivate lineIndex = 0;\n\n\tprivate indent = 0;\n\tprivate indentAdd = 0;\n\n\tprivate readonly variables: Record<string, number> = {};\n\n\tprivate readonly definedLabels: DefinedLabelEntryType[] = [];\n\tprivate readonly gosubLabels: Record<string, GosubLabelEntryType> = {};\n\n\tprivate readonly dataList: (string | number)[] = [];\n\tprivate dataIndex = 0;\n\tprivate readonly restoreMap: Record<string, number> = {};\n\n\tprivate static readonly reJsKeyword = /^(arguments|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/;\n\n\tprivate readonly instrMap: Record<string, number> = {};\n\n\tprivate isDeg = false;\n\tprivate isDefContext = false;\n\n\tpublic getDeg(): boolean {\n\t\treturn this.isDeg;\n\t}\n\n\tpublic setDeg(isDeg: boolean): void {\n\t\tthis.isDeg = isDeg;\n\t}\n\n\tpublic addIndent(num: number): number {\n\t\tif (num < 0) {\n\t\t\tthis.applyNextIndent();\n\t\t}\n\t\tthis.indent += num;\n\t\treturn this.indent;\n\t}\n\n\tpublic setIndent(indent: number): void {\n\t\tthis.indent = indent;\n\t}\n\n\tpublic getIndent(): number {\n\t\treturn this.indent;\n\t}\n\n\tpublic getIndentStr(): string {\n\t\tif (this.indent < 0) {\n\t\t\tconsole.error(\"getIndentStr: lineIndex=\", this.lineIndex, \", indent=\", this.indent);\n\t\t\treturn \"\";\n\t\t}\n\t\treturn \" \".repeat(this.indent);\n\t}\n\n\tpublic applyNextIndent(): void {\n\t\tthis.indent += this.indentAdd;\n\t\tthis.indentAdd = 0;\n\t}\n\n\tpublic nextIndentAdd(num: number): void {\n\t\tthis.indentAdd += num;\n\t}\n\n\tpublic addDataIndex(count: number): number {\n\t\treturn this.dataIndex += count;\n\t}\n\n\tpublic getDataIndex(): number {\n\t\treturn this.dataIndex;\n\t}\n\n\tpublic addDefinedLabel(label: string, line: number): void {\n\t\tthis.definedLabels.push({\n\t\t\tlabel,\n\t\t\tfirst: line,\n\t\t\tlast: -1,\n\t\t\tdataIndex: -1\n\t\t});\n\t}\n\n\tpublic getDefinedLabels(): DefinedLabelEntryType[] {\n\t\treturn this.definedLabels;\n\t}\n\n\tpublic addGosubLabel(label: string): void {\n\t\tthis.gosubLabels[label] = this.gosubLabels[label] || {\n\t\t\tcount: 0\n\t\t};\n\t\tthis.gosubLabels[label].count = (this.gosubLabels[label].count || 0) + 1;\n\t}\n\n\tpublic getGosubLabels(): Record<string, GosubLabelEntryType> {\n\t\treturn this.gosubLabels;\n\t}\n\n\tpublic getInstrMap(): Record<string, number> {\n\t\treturn this.instrMap;\n\t}\n\n\tpublic addInstr(name: string): number {\n\t\tthis.instrMap[name] = (this.instrMap[name] || 0) + 1;\n\t\treturn this.instrMap[name];\n\t}\n\n\tpublic getVariables(): string[] {\n\t\treturn Object.keys(this.variables);\n\t}\n\n\tpublic getVariable(name: string): string {\n\t\tname = name.toLowerCase();\n\t\tif (Semantics.reJsKeyword.test(name)) {\n\t\t\tname = `_${name}`;\n\t\t}\n\n\t\tif (!this.isDefContext) {\n\t\t\tthis.variables[name] = (this.variables[name] || 0) + 1;\n\t\t}\n\t\treturn name;\n\t}\n\n\tpublic setDefContext(isDef: boolean): void {\n\t\tthis.isDefContext = isDef;\n\t}\n\n\tprivate static deleteAllItems(items: Record<string, unknown>): void {\n\t\tfor (const name in items) {\n\t\t\tdelete items[name];\n\t\t}\n\t}\n\n\tpublic incrementLineIndex(): number {\n\t\tthis.lineIndex += 1;\n\t\treturn this.lineIndex;\n\t}\n\n\tpublic getRestoreMap(): Record<string, number> {\n\t\treturn this.restoreMap;\n\t}\n\n\tpublic addRestoreLabel(label: string): void {\n\t\tthis.restoreMap[label] = -1;\n\t}\n\n\tpublic getDataList(): (string | number)[] {\n\t\treturn this.dataList;\n\t}\n\n\tpublic resetParser(): void {\n\t\tthis.lineIndex = 0;\n\t\tthis.indent = 0;\n\t\tthis.indentAdd = 0;\n\t\tSemantics.deleteAllItems(this.variables);\n\t\tthis.definedLabels.length = 0;\n\t\tSemantics.deleteAllItems(this.gosubLabels);\n\t\tthis.dataList.length = 0;\n\t\tthis.dataIndex = 0;\n\t\tSemantics.deleteAllItems(this.restoreMap);\n\t\tSemantics.deleteAllItems(this.instrMap);\n\t\tthis.isDeg = false;\n\t\tthis.isDefContext = false;\n\t}\n\n\tpublic getSemantics(): ActionDict<string> {\n\t\treturn getSemantics(this);\n\t}\n}\n","import type { ConfigEntryType, ConfigType, DatabaseMapType, DatabaseType, ExampleMapType, ExampleType, ICore, IVm, IVmAdmin } from \"./Interfaces\";\nimport { Parser } from \"./Parser\";\nimport { arithmetic } from \"./arithmetic\";\nimport { Semantics } from \"./Semantics\";\n\nfunction fnHereDoc(fn: () => void) {\n    return String(fn).replace(/^[^/]+\\/\\*\\S*/, \"\").replace(/\\*\\/[^/]+$/, \"\");\n}\n\nexport class Core implements ICore {\n    private readonly defaultConfig: ConfigType;\n    private readonly config: ConfigType;\n    private readonly semantics = new Semantics();\n    private readonly databaseMap: DatabaseMapType = {};\n    private arithmeticParser: Parser | undefined;\n\n    constructor(defaultConfig: ConfigType) {\n        this.defaultConfig = defaultConfig;\n        this.config = {...defaultConfig};\n    }\n\n    private onCheckSyntax = async (_s: string) => \"\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    public getDefaultConfigMap(): ConfigType {\n        return this.defaultConfig;\n    }\n\n    public getConfigMap(): ConfigType {\n        return this.config;\n    }\n\n    public initDatabaseMap(): DatabaseMapType {\n        const databaseDirs = this.config.databaseDirs.split(\",\");\n\n        for (const source of databaseDirs) {\n            const parts = source.split(\"/\");\n            const key = parts[parts.length - 1];\n\n            this.databaseMap[key] = {\n                key,\n\t\t\t\tsource,\n                exampleMap: undefined\n\t\t\t};\n\t\t}\n        return this.databaseMap;\n    }\n\n    public getDatabaseMap(): DatabaseMapType {\n        return this.databaseMap;\n    }\n\n    public getDatabase(): DatabaseType {\n        return this.databaseMap[this.config.database];\n    }\n\n    public getExampleMap(): ExampleMapType {\n        const exampleMap = this.databaseMap[this.config.database].exampleMap;\n        if (!exampleMap) {\n            console.error(\"getExampleMap: Undefined exampleMap for database\", this.config.database);\n            return {};\n        }\n        return exampleMap;\n    }\n\n    public setExampleMap(exampleMap: ExampleMapType): void {\n        this.databaseMap[this.config.database].exampleMap = exampleMap;\n    }\n\n    public getExample(name: string): ExampleType {\n        const exampleMap = this.getExampleMap();\n        return exampleMap[name];\n    }\n\n    public setOnCheckSyntax(fn: (s: string) => Promise<string>): void {\n        this.onCheckSyntax = fn;\n    }\n\n    public compileScript(script: string): string {\n        if (!this.arithmeticParser) {\n            const semantics = this.semantics.getSemantics();\n            if (this.config.grammar === \"strict\") {\n                const basicParser = new Parser(arithmetic.basicGrammar, semantics);\n                this.arithmeticParser = new Parser(arithmetic.strictGrammar, semantics, basicParser);\n            } else {\n                this.arithmeticParser = new Parser(arithmetic.basicGrammar, semantics);\n            }\n        }\n        this.semantics.resetParser();\n        return this.arithmeticParser.parseAndEval(script);\n    }\n\n    public async executeScript(compiledScript: string, vm: IVmAdmin): Promise<string> {\n        vm.setOutput(\"\");\n\n        if (compiledScript.startsWith(\"ERROR:\")) {\n            return \"ERROR\";\n        }\n\n        const syntaxError = await this.onCheckSyntax(compiledScript);\n        if (syntaxError) {\n            vm.cls();\n            return \"ERROR: \" + syntaxError;\n        }\n\n        let output = \"\";\n        try {\n            const fnScript = new Function(\"_o\", compiledScript);\n            const result = fnScript(vm as IVm) || \"\";\n\n            if (result instanceof Promise) {\n                await result;\n            }\n            vm.flush();\n            output = vm.getOutput() || \"\";\n        } catch (error) {\n            output = vm.getOutput() || \"\";\n            if (output) {\n                output += \"\\n\";\n            }\n            output += String(error).replace(\"Error: INFO: \", \"INFO: \");\n            if (error instanceof Error) {\n                const anyErr = error as unknown as Record<string, number>;\n                const lineNumber = anyErr.lineNumber; // only on FireFox\n                const columnNumber = anyErr.columnNumber; // only on FireFox\n\n                if (lineNumber || columnNumber) {\n                    const errLine = lineNumber - 2; // lineNumber -2 because of anonymous function added by new Function() constructor\n                    output += ` (Line ${errLine}, column ${columnNumber})`;\n                }\n            }\n        }\n        return output;\n    }\n\n    public addIndex = (dir: string, input: Record<string, ExampleType[]> | (() => void)): void => { // need property function because we need bound \"this\"\n\t\tif (typeof input === \"function\") {\n\t\t\tinput = {\n\t\t\t\t[dir]: JSON.parse(fnHereDoc(input).trim())\n\t\t\t};\n        }\n\n        const exampleMap: ExampleMapType = {};\n        for (const value in input) {\n            const item = input[value] as ExampleType[];\n\n            for (let i = 0; i < item.length; i += 1) {\n                exampleMap[item[i].key] = item[i];\n            }\n        }\n        this.setExampleMap(exampleMap);\n\t};\n\n    public addItem = (key: string, input: string | (() => void)): void => { // need property function because we need bound \"this\"\n        let inputString = typeof input !== \"string\" ? fnHereDoc(input) : input;\n        inputString = inputString.replace(/^\\n/, \"\").replace(/\\n$/, \"\"); // remove preceding and trailing newlines\n\n        if (!key) { // maybe \"\"\n            console.warn(\"addItem: no key!\");\n            key = \"unknown\";\n        }\n\n        const example = this.getExample(key);\n        if (example) {\n            example.script = inputString;\n        }\n    };\n\n    public parseArgs(args: string[], config: Record<string, ConfigEntryType>): Record<string, ConfigEntryType> {\n        for (const arg of args) {\n            const [name, ...valueParts] = arg.split(\"=\");\n            const nameType = typeof config[name];\n\n            let value: ConfigEntryType = valueParts.join(\"=\");\n            if (value !== undefined) {\n                if (nameType === \"boolean\") {\n                    value = value === \"true\";\n                } else if (nameType === \"number\") {\n                    value = Number(value);\n                }\n                config[name] = value;\n            }\n        }\n        return config;\n    }\n}\n","import type { IVmAdmin } from \"./Interfaces\";\n\nconst strokeWidthForMode: number[] = [4, 2, 1, 1];\n\nexport class BasicVmCore implements IVmAdmin {\n    private output: string = \"\";\n    private currPaper: number = -1;\n    private currPen: number = -1;\n    private currMode: number = 2;\n    private readonly graphicsBuffer: string[] = [];\n    private readonly graphicsPathBuffer: string[] = [];\n    private currGraphicsPen: number = -1;\n    private originX: number = 0;\n    private originY: number = 0;\n    private graphicsX: number = 0;\n    private graphicsY: number = 399;\n    protected colorsForPens: number[] = [];\n    private backgroundColor = \"\";\n    private isTag: boolean = false; // text at graphics\n\n    protected readonly cpcColors = [\n        \"#000000\", //  0 Black\n        \"#000080\", //  1 Blue\n        \"#0000FF\", //  2 Bright Blue\n        \"#800000\", //  3 Red\n        \"#800080\", //  4 Magenta\n        \"#8000FF\", //  5 Mauve\n        \"#FF0000\", //  6 Bright Red\n        \"#FF0080\", //  7 Purple\n        \"#FF00FF\", //  8 Bright Magenta\n        \"#008000\", //  9 Green\n        \"#008080\", // 10 Cyan\n        \"#0080FF\", // 11 Sky Blue\n        \"#808000\", // 12 Yellow\n        \"#808080\", // 13 White\n        \"#8080FF\", // 14 Pastel Blue\n        \"#FF8000\", // 15 Orange\n        \"#FF8080\", // 16 Pink\n        \"#FF80FF\", // 17 Pastel Magenta\n        \"#00FF00\", // 18 Bright Green\n        \"#00FF80\", // 19 Sea Green\n        \"#00FFFF\", // 20 Bright Cyan\n        \"#80FF00\", // 21 Lime\n        \"#80FF80\", // 22 Pastel Green\n        \"#80FFFF\", // 23 Pastel Cyan\n        \"#FFFF00\", // 24 Bright Yellow\n        \"#FFFF80\", // 25 Pastel Yellow\n        \"#FFFFFF\", // 26 Bright White\n        \"#808080\", // 27 White (same as 13)\n        \"#FF00FF\", // 28 Bright Magenta (same as 8)\n        \"#FFFF80\", // 29 Pastel Yellow (same as 25)\n        \"#000080\", // 30 Blue (same as 1)\n        \"#00FF80\" //  31 Sea Green (same as 19)\n    ];\n\n    protected readonly defaultColorsForPens: number[] = [\n        1, 24, 20, 6, 26, 0, 2, 8, 10, 12, 14, 16, 18, 22, 1, 16, 1\n    ];\n\n    public constructor() {\n        this.resetColors();\n    }\n\n    protected fnOnCls(): void {\n        // override\n    }\n\n    protected async fnOnInput(_msg: string): Promise<string | null> { // eslint-disable-line @typescript-eslint/no-unused-vars\n        // override\n        return \"\";\n    }\n\n    protected fnOnPrint(_msg: string): void { // eslint-disable-line @typescript-eslint/no-unused-vars\n        // override\n    }\n\n    protected fnGetPenColor(_num: number): string { // eslint-disable-line @typescript-eslint/no-unused-vars\n        // override\n        return \"\";\n    }\n\n    protected fnGetPaperColor(_num: number): string { // eslint-disable-line @typescript-eslint/no-unused-vars\n        // override\n        return \"\";\n    }\n\n    private resetColors(): void {\n        this.colorsForPens = [...this.defaultColorsForPens];\n        this.backgroundColor = \"\";\n        this.originX = 0;\n        this.originY = 0;\n    }\n\n    public cls(): void {\n        this.output = \"\";\n        this.isTag = false;\n        this.currPaper = -1;\n        this.currPen = -1;\n        this.graphicsBuffer.length = 0;\n        this.graphicsPathBuffer.length = 0;\n        this.currGraphicsPen = -1;\n        this.graphicsX = 0;\n        this.graphicsY = 399;\n        this.fnOnCls();\n    }\n\n    public drawMovePlot(type: string, x: number, y: number): void {\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const isAbsolute = type === type.toUpperCase();\n        x = isAbsolute ? x + this.originX : x;\n        y = isAbsolute ? 399 - y - this.originY : -y;\n\n        const isPlot = type.toLowerCase() === \"p\";\n        const svgPathCmd = isPlot\n            ? `${isAbsolute ? \"M\" : \"m\"}${x} ${y}h1v1h-1v-1`\n            : `${type}${x} ${y}`;\n\n        if (!this.graphicsPathBuffer.length && svgPathCmd[0] !== \"M\") { // path must start with a absolute move\n            this.graphicsPathBuffer.push(`M${this.graphicsX} ${this.graphicsY}`);\n        }\n        this.graphicsPathBuffer.push(svgPathCmd);\n\n        if (isAbsolute) {\n            this.graphicsX = x;\n            this.graphicsY = y;\n        } else {\n            this.graphicsX += x;\n            this.graphicsY += y;\n        }\n    }\n\n    private flushGraphicsPath(): void {\n        if (this.graphicsPathBuffer.length) {\n            let strokeStr = \"\";\n            if (this.currGraphicsPen > 0) {\n                const color = this.cpcColors[this.colorsForPens[this.currGraphicsPen]];\n                strokeStr = `stroke=\"${color}\" `;\n            }\n            this.graphicsBuffer.push(`<path ${strokeStr}d=\"${this.graphicsPathBuffer.join(\"\")}\" />`);\n            this.graphicsPathBuffer.length = 0;\n        }\n    }\n\n    public flush(): void {\n        this.flushGraphicsPath();\n        if (this.output) {\n            this.fnOnPrint(this.output);\n            this.output = \"\";\n        }\n        if (this.graphicsBuffer.length) {\n            // separate print for svg graphics (we are checking for output starting with svg to enable expor SVG button)ays 0\n            const backgroundColorStr = this.backgroundColor !== \"\" ? ` style=\"background-color:${this.backgroundColor}\"` : '';\n            this.fnOnPrint(`<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 640 400\" stroke-width=\"${strokeWidthForMode[this.currMode]}px\" stroke=\"currentColor\"${backgroundColorStr}>\\n${this.graphicsBuffer.join(\"\\n\")}\"\\n</svg>\\n`);\n            this.graphicsBuffer.length = 0;\n        }\n    }\n\n    public graphicsPen(num: number): void {\n        if (num === this.currGraphicsPen) {\n            return;\n        }\n        this.flushGraphicsPath();\n        this.currGraphicsPen = num;\n    }\n\n    public ink(num: number, col: number): void {\n        this.colorsForPens[num] = col;\n        // we modify inks, so set default pens and papers\n        if (this.currGraphicsPen < 0) {\n            this.graphicsPen(1);\n        }\n\n        if (this.currPen < 0) {\n            this.pen(1);\n        } else if (num === this.currPen) {\n            this.currPen = -1;\n            this.pen(num);\n        }\n\n        if (this.currPaper < 0) {\n            this.paper(0);\n        } else if (num === this.currPaper) {\n            this.currPaper = -1;\n            this.paper(num);\n        }\n\n        if (num === 0) {\n            this.backgroundColor = this.cpcColors[this.colorsForPens[0]];\n        }\n    }\n\n    public inkey$(): Promise<string> {\n        return Promise.resolve(\"\");\n    }\n\n    public input(msg: string): Promise<string | null> {\n        this.flush();\n        return this.fnOnInput(msg);\n    }\n\n    public mode(num: number): void {\n        this.currMode = num;\n        this.cls();\n    }\n\n    public origin(x: number, y: number): void {\n        this.originX = x;\n        this.originY = y;\n    }\n\n    public paper(n: number): void {\n        if (n !== this.currPaper) {\n            this.output += this.fnGetPaperColor(this.colorsForPens[n]);\n            this.currPaper = n;\n        }\n    }\n\n    public pen(n: number): void {\n        if (n !== this.currPen) {\n            this.output += this.fnGetPenColor(this.colorsForPens[n]);\n            this.currPen = n;\n        }\n    }\n\n    private printGraphicsText(text: string): void {\n        const yOffset = 16;\n        let styleStr = \"\";\n        if (this.currGraphicsPen >= 0) { // TTT or >?\n            const color = this.cpcColors[this.colorsForPens[this.currGraphicsPen]];\n            styleStr = ` style=\"color: ${color}\"`;\n        }\n        this.graphicsBuffer.push(`<text x=\"${this.graphicsX + this.originX}\" y=\"${this.graphicsY + this.originY + yOffset}\"${styleStr}>${text}</text>`);\n    }\n\n    public print(...args: string[]): void {\n        const text = args.join('');\n        if (this.isTag) {\n            this.printGraphicsText(text);\n        } else {\n            this.output += text;\n        }\n    }\n\n    public tag(active: boolean): void {\n        this.isTag = active;\n    }\n\n    public getEscape(): boolean {\n        return false;\n    }\n\n    public getOutput(): string {\n        this.resetColors();\n        return this.output;\n    }\n    public setOutput(str: string): void {\n        this.output = str;\n    }\n}\n","import { INodeParts } from \"./Interfaces\";\nimport { BasicVmCore } from \"./BasicVmCore\";\n\nfunction getAnsiColors(background: boolean): string[] {\n    const colorCodes = [\n        30, //  0 Black\n        34, //  1 Blue \n        94, //  2 Bright Blue\n        31, //  3 Red\n        35, //  4 Magenta (Purple?)\n        35, //  5 Mauve ???\n        91, //  6 Bright Red\n        35, //  7 Purple\n        95, //  8 Bright Magenta ?\n        32, //  9 Green\n        36, // 10 Cyan\n        94, // 11 Sky Blue ?\n        33, // 12 Yellow\n        37, // 13 White\n        94, // 14 Pastel Blue ?\n        91, // 15 Orange ?\n        95, // 16 Pink (Bright Magenta?)\n        95, // 17 Pastel Magenta?\n        92, // 18 Bright Green\n        92, // 19 Sea Green\n        96, // 20 Bright Cyan\n        96, // 21 Lime ?\n        92, // 22 Pastel Green (Bright Green)\n        96, // 23 Pastel Cyan ?\n        93, // 24 Bright Yellow\n        93, // 25 Pastel Yellow\n        37, // 26 Bright White\n        37, // 27 White (same as 13)\n        95, // 28 Bright Magenta (same as 8)\n        93, // 29 Pastel Yellow (same as 25)\n        34, // 30 Blue (same as 1)\n        92 //  31 Sea Green (same as 19)\n    ];\n    const add = background ? 10 : 0;\n\n    return colorCodes.map((code: number) => `\\x1b[${code + add}m`); // e.g. Navy: pen: \"\\x1b[34m\" or paper: \"\\x1b[44m\"\n}\n\nexport class BasicVmNode extends BasicVmCore {\n    private readonly penColors: string[] = getAnsiColors(false);\n    private readonly paperColors: string[] = getAnsiColors(true);\n    private readonly nodeParts: INodeParts;\n\n    constructor(nodeParts: INodeParts) {\n        super();\n        this.nodeParts = nodeParts;\n    }\n\n    public fnOnCls(): void {\n        console.clear();\n    }\n\n    public fnOnPrint(msg: string): void {\n        console.log(msg.replace(/\\n$/, \"\"));\n    }\n\n    public async fnOnInput(msg: string): Promise<string> {\n        console.log(msg);\n        return Promise.resolve(\"\");\n    }\n\n    public fnGetPenColor(num: number): string {\n        if (num < 0 || num >= this.penColors.length) {\n            throw new Error(\"Invalid pen color index\");\n        }\n        return this.penColors[num];\n    }\n\n    public fnGetPaperColor(num: number): string {\n        if (num < 0 || num >= this.paperColors.length) {\n            throw new Error(\"Invalid paper color index\");\n        }\n        return this.paperColors[num];\n    }\n\n    public inkey$(): Promise<string> {\n        const key = this.nodeParts.getKeyFromBuffer();\n        return Promise.resolve(key);\n    }\n\n    public getEscape(): boolean {\n        return this.nodeParts.getEscape();\n    }\n}\n","import { DatabaseType, ExampleType, ICore, IVm, IVmAdmin } from \"./Interfaces\";\nimport { BasicVmNode } from \"./BasicVmNode\";\n\ninterface NodePath {\n    dirname: (dirname: string) => string;\n    resolve: (dirname: string, name: string) => string;\n}\n\ninterface NodeFs {\n    promises: {\n        readFile(name: string, encoding: string): Promise<string>\n    };\n}\n\ntype nodeIncomingMessage = { on: (type: string, fn: (s: string) => void) => void};\n\ninterface NodeHttps {\n    get: (url: string, fn: (res: nodeIncomingMessage) => void) => {\n        on: (type: string, fn: (err: Error) => void) => NodeHttps;\n    }\n}\n\ninterface NodeReadline {\n    emitKeypressEvents(stream: typeof process.stdin): void;\n}\n\ninterface NodeVm {\n    runInNewContext: (code: string) => string;\n}\n\ntype NodeKeyPressType = {\n    sequence: string;\n    name: string;\n    ctrl: boolean;\n    meta: boolean;\n    shift: boolean;\n}\n\ndeclare function require(name: string): NodeFs | NodeHttps | NodeModule | NodePath | NodeReadline | NodeVm;\n\ninterface DummyVm extends IVm {\n    _output: string;\n    debug(...args: (string | number | boolean)[]): void;\n}\n\n// The functions from dummyVm will be stringified in the putScriptInFrame function\nconst dummyVm: DummyVm = {\n    _output: \"\",\n    debug(..._args: (string | number)[]) { /* console.debug(...args); */ }, // eslint-disable-line @typescript-eslint/no-unused-vars\n    cls() {},\n    drawMovePlot(type: string, x: number, y: number) { this.debug(\"drawMovePlot:\", type, x, y); },\n    flush() { if (this._output) { console.log(this._output); this._output = \"\"; } },\n    graphicsPen(num: number) { this.debug(\"graphicsPen:\", num); },\n    ink(num: number, col: number) { this.debug(\"ink:\", num, col); },\n    async inkey$() { return Promise.resolve(\"\"); },\n    async input(msg: string) { console.log(msg); return \"\"; },\n    mode(num: number) { this.debug(\"mode:\", num); },\n    origin(x: number, y: number) { this.debug(\"origin:\", x, y); },\n    paper(num: number) { this.debug(\"paper:\", num); },\n    pen(num: number) { this.debug(\"pen:\", num); },\n    print(...args: (string | number)[]) { this._output += args.join(''); },\n    tag(active: boolean) { this.debug(\"tag:\", active); },\n    getEscape() { return false; }\n};\n\nfunction isUrl(s: string) {\n    return s.startsWith(\"http\"); // http or https\n}\n\nexport class NodeParts {\n    private nodePath?: NodePath;\n    private nodeFs?: NodeFs;\n    private nodeHttps?: NodeHttps;\n    private modulePath = \"\";\n    private nodeVm?: NodeVm;\n    private nodeReadline?: NodeReadline;\n    private readonly keyBuffer: string[] = []; // buffered pressed keys\n    private escape = false;\n    private fnOnKeyPressHandler?: (chunk: string, key: NodeKeyPressType) => void;\n\n    private nodeGetAbsolutePath(name: string) {\n        if (!this.nodePath) {\n            this.nodePath = require(\"path\") as NodePath;\n        }\n        const path = this.nodePath;\n    \n        // https://stackoverflow.com/questions/8817423/why-is-dirname-not-defined-in-node-repl\n        const dirname = __dirname || path.dirname(__filename);\n        const absolutePath = path.resolve(dirname, name);\n    \n        return absolutePath;\n    }\n\n    private async nodeReadFile(name: string): Promise<string> {\n        if (!this.nodeFs) {\n            this.nodeFs = require(\"fs\") as NodeFs;\n        }\n\n        if (!module) { //TTT\n            const module = require(\"module\") as NodeModule;\n            this.modulePath = module.path || \"\";\n\n            if (!this.modulePath) {\n                console.warn(\"nodeReadFile: Cannot determine module path\");\n            }\n        }\n        try {\n            return await this.nodeFs.promises.readFile(name, \"utf8\");\n        } catch (error) {\n            console.error(`Error reading file ${name}:`, String(error));\n            throw error;\n        }\n    }\n\n    private async nodeReadUrl(url: string): Promise<string> {\n        if (!this.nodeHttps) {\n            this.nodeHttps = require(\"https\") as NodeHttps;\n        }\n        const nodeHttps = this.nodeHttps;\n\n        return new Promise((resolve, reject) => {\n            nodeHttps.get(url, (resp) => {\n                let data = \"\";\n\n                resp.on(\"data\", (chunk: string) => {\n                    data += chunk;\n                });\n\n                resp.on(\"end\", () => {\n                    resolve(data);\n                });\n            }).on(\"error\", (err: Error) => {\n                console.error(\"Error: \" + err.message);\n                reject(err);\n            });\n        });\n    }\n\n    private loadScript(fileOrUrl: string): Promise<string> {\n        if (isUrl(fileOrUrl)) {\n            return this.nodeReadUrl(fileOrUrl);\n        } else {\n            return this.nodeReadFile(fileOrUrl);\n        }\n    };\n\n    private keepRunning(fn: () => void, timeout: number): Promise<void> {\n        const timerId = setTimeout(() => { }, timeout);\n        return (async () => {\n            fn();\n            clearTimeout(timerId);\n        })();\n    }\n\n    private putScriptInFrame(script: string): string {\n        const dummyFunctions = Object.values(dummyVm).filter((value) => value).map((value) => `${value}`).join(\",\\n  \");\n        const result =\n            `(function(_o) {\n                ${script}\n            })({\n                _output: \"\",\n                ${dummyFunctions}\n            });`\n        return result;\n    }\n\n    private nodeCheckSyntax(script: string): string {\n        if (!this.nodeVm) {\n            this.nodeVm = require(\"vm\") as NodeVm;\n        }\n\n        const describeError = (stack: string): string => {\n            const match = stack.match(/^\\D+(\\d+)\\n(.+\\n( *)\\^+)\\n\\n(SyntaxError.+)/);\n            if (!match) {\n                return \"\"; // parse successful?\n            }\n            const [, linenoPlusOne, caretString, colSpaces, message] = match;\n            const lineno = Number(linenoPlusOne) - 1;\n            const colno = colSpaces.length + 1;\n            return `Syntax error thrown at: Line ${lineno}, col: ${colno}\\n${caretString}\\n${message}`;\n        };\n        let output = \"\";\n\n        try {\n            const scriptInFrame = this.putScriptInFrame(script);\n            this.nodeVm.runInNewContext(`throw new Error();\\n${scriptInFrame}`);\n        } catch (err) { // Error-like object\n            const stack = (err as Error).stack;\n            if (stack) {\n                output = describeError(stack);\n            }\n        }\n        return output;\n    }\n\n    private putKeyInBuffer(key: string): void {\n\t\tthis.keyBuffer.push(key);\n    }\n\n    private fnOnKeypress(_chunk: string, key: NodeKeyPressType) {\n        if (key) {\n            const keySequenceCode = key.sequence.charCodeAt(0);\n            if (key.name === 'c' && key.ctrl === true) {\n            // key: '<char>' { sequence: '\\x03', name: 'c', ctrl: true, meta: false, shift: false }\n            process.exit();\n            } else if (key.name === \"escape\") {\n                this.escape = true;\n            } else if (keySequenceCode === 0x0d || (keySequenceCode >= 32 && keySequenceCode <= 128)) {\n                this.putKeyInBuffer(key.sequence);\n            }\n        }\n    }\n\n    private initKeyboardInput(): void {\n        this.nodeReadline = require('readline') as NodeReadline;\n    \n        if (process.stdin.isTTY) {\n            this.nodeReadline.emitKeypressEvents(process.stdin);\n            process.stdin.setRawMode(true);\n    \n            this.fnOnKeyPressHandler = this.fnOnKeypress.bind(this);\n            process.stdin.on('keypress', this.fnOnKeyPressHandler);\n        } else {\n            console.warn(\"initKeyboardInput: not a TTY\", process.stdin);\n        }\n    }\n\n    public getKeyFromBuffer(): string {\n        if (!this.nodeReadline) {\n            this.initKeyboardInput();\n        }\n\t\tconst key = this.keyBuffer.length ? this.keyBuffer.shift() as string : \"\";\n\t\treturn key;\n\t}\n\n    public getEscape() {\n        return this.escape;\n    }\n\n    private start(core: ICore, vm: IVmAdmin, input: string): Promise<void> | undefined {\n        const actionConfig = core.getConfigMap().action;\n        if (input !== \"\") {\n            core.setOnCheckSyntax((s: string) => Promise.resolve(this.nodeCheckSyntax(s)));\n\n            const compiledScript = actionConfig.includes(\"compile\") ? core.compileScript(input) : input;\n\n            if (compiledScript.startsWith(\"ERROR:\")) {\n                console.error(compiledScript);\n                return;\n            }\n\n            if (actionConfig.includes(\"run\")) {\n                return this.keepRunning(async () => {\n                    const output = await core.executeScript(compiledScript, vm);\n                    console.log(output.replace(/\\n$/, \"\"));\n                    if (this.fnOnKeyPressHandler) {\n                        process.stdin.off('keypress', this.fnOnKeyPressHandler);\n                        process.stdin.setRawMode(false);\n                        process.exit(0); // hmm, not so nice\n                    }\n                }, 5000);\n            } else {\n                const inFrame = this.putScriptInFrame(compiledScript);\n                console.log(inFrame);\n            }\n        } else {\n            console.log(\"No input\");\n            console.log(NodeParts.getHelpString());\n        }\n    }\n\n    private async getExampleMap(databaseItem: DatabaseType, core: ICore) {\n        if (databaseItem.exampleMap) {\n            return databaseItem.exampleMap;\n        }\n        databaseItem.exampleMap = {};\n        const scriptName = databaseItem.source + \"/0index.js\";\n        try {\n            const jsFile = await this.loadScript(scriptName);\n            const fnScript = new Function(\"cpcBasic\", jsFile);\n            fnScript({\n                addIndex: core.addIndex\n            });\n        } catch (error) {\n            console.error(\"Load Example Map \", scriptName, error);\n        }\n        return databaseItem.exampleMap;\n    }\n\n    private async getExampleScript(example: ExampleType, core: ICore) {\n        if (example.script !== undefined) {\n            return example.script;\n        }\n        const database = core.getDatabase();\n        const scriptName = database.source + \"/\" + example.key + \".js\";\n        try {\n            const jsFile = await this.loadScript(scriptName);\n            const fnScript = new Function(\"cpcBasic\", jsFile);\n            fnScript({\n                addItem: (key: string, input: string | (() => void)) => {\n                    if (!key) { // maybe \"\"\n                        key = example.key;\n                    }\n                    core.addItem(key, input);\n                }\n            });\n        } catch (error) {\n            console.error(\"Load Example\", scriptName, error);\n        }\n        return example.script || \"\"; //TTT\n\n    }\n\n    public async nodeMain(core: ICore): Promise<void> {\n        const vm = new BasicVmNode(this);\n        const config = core.getConfigMap();\n        core.parseArgs(global.process.argv.slice(2), config);\n\n        if (config.input) {\n            return this.keepRunning(async () => {\n                this.start(core, vm, config.input);\n            }, 5000);\n        }\n\n        if (config.fileName) {\n            return this.keepRunning(async () => {\n                const inputFromFile = await this.nodeReadFile(config.fileName);\n                this.start(core, vm, inputFromFile);\n            }, 5000);\n        }\n\n        if (config.example) {\n            const databaseMap = core.initDatabaseMap();\n            const database = config.database;\n            const databaseItem = databaseMap[database];\n\n            if (!databaseItem) {\n                console.error(`Error: Database ${database} not found in ${config.databaseDirs}`);\n                return;\n            }\n        \n            return this.keepRunning(async () => {\n                if (!isUrl(databaseItem.source)) {\n                    databaseItem.source = this.nodeGetAbsolutePath(databaseItem.source);\n                }\n\n                await this.getExampleMap(databaseItem, core);\n                const exampleName = config.example;\n                const example = core.getExample(exampleName);\n                const script = await this.getExampleScript(example, core);\n                this.start(core, vm, script);\n            }, 5000);\n        }\n    }\n\n    private static getHelpString(): string {\nreturn `\nUsage:\nnode dist/locobasic.js [<option=<value(s)>] [<option=<value(s)>]\n\n- Options:\naction=compile,run\ndatabaseDirs=examples,...\ndatabase=examples\ndebounceCompile=800\ndebounceExecute=400\ndebug=0\nexample=euler\nfileName=<file>\ngrammar=<name>\ninput=<statements>\n\n- Examples for compile and run:\nnode dist/locobasic.js input='PRINT \"Hello!\"'\nnpx ts-node dist/locobasic.js input='PRINT \"Hello!\"'\nnode dist/locobasic.js input='?3 + 5 * (2 - 8)' example=''\nnode dist/locobasic.js example=euler\nnode dist/locobasic.js fileName=dist/examples/example.bas\nnode dist/locobasic.js grammar='strict' input='a$=\"Bob\":PRINT \"Hello \";a$;\"!\"'\n\n- Example for compile only:\nnode dist/locobasic.js action='compile' input='PRINT \"Hello!\"' > hello1.js\n[Windows: Use node.exe when redirecting into a file; or npx ts-node ...]\nnode hello1.js\n[When using async functions like FRAME or INPUT, redirect to hello1.mjs]\n`;\n    }\n}\n","import { IUI } from \"./Interfaces\";\nimport { BasicVmCore } from \"./BasicVmCore\";\n\nexport class BasicVmBrowser extends BasicVmCore {\n    private readonly ui: IUI;\n    private readonly penColors: string[] = [];\n    private readonly paperColors: string[] = [];\n\n    constructor(ui: IUI) {\n        super();\n        this.ui = ui;\n        this.penColors = this.cpcColors.map((color) => ui.getColor(color, false));\n        this.paperColors = this.cpcColors.map((color) => ui.getColor(color, true));\n    }\n\n    /**\n     * Clears the output text.\n     */\n    public fnOnCls(): void {\n        this.ui.setOutputText(\"\");\n    }\n\n    /**\n     * Prompts the user with a message and returns the input.\n     * @param msg - The message to prompt.\n     * @returns A promise that resolves to the user input or null if canceled.\n     */\n    public async fnOnInput(msg: string): Promise<string | null> {\n        const input = this.ui.prompt(msg);\n        return Promise.resolve(input);\n    }\n\n    /**\n     * Adds a message to the output text.\n     * @param msg - The message to print.\n     */\n    public fnOnPrint(msg: string): void {\n        this.ui.addOutputText(msg);\n    }\n\n    /**\n     * Gets the pen color by index.\n     * @param num - The index of the pen color.\n     * @returns The pen color.\n     * @throws Will throw an error if the index is out of bounds.\n     */\n    public fnGetPenColor(num: number): string {\n        if (num < 0 || num >= this.penColors.length) {\n            throw new Error(\"Pen color index out of bounds\");\n        }\n        return this.penColors[num];\n    }\n\n    /**\n     * Gets the paper color by index.\n     * @param num - The index of the paper color.\n     * @returns The paper color.\n     * @throws Will throw an error if the index is out of bounds.\n     */\n    public fnGetPaperColor(num: number): string {\n        if (num < 0 || num >= this.paperColors.length) {\n            throw new Error(\"Paper color index out of bounds\");\n        }\n        return this.paperColors[num];\n    }\n\n    public inkey$(): Promise<string> {\n        const key = this.ui.getKeyFromBuffer();\n        return Promise.resolve(key);\n    }\n\n    public getEscape(): boolean {\n        return this.ui.getEscape();\n    }\n}\n","import type { ExampleType, ICore, IUI } from \"./Interfaces\";\nimport { Core } from \"./Core\";\nimport { NodeParts } from \"./NodeParts\";\nimport { BasicVmBrowser } from \"./BasicVmBrowser\";\n\ninterface WindowProperties {\n    cpcBasic: {\n        addIndex: (dir: string, input: Record<string, ExampleType[]> | (() => void)) => void,\n        addItem: (key: string, input: string | (() => void)) => void\n    };\n    locobasicUI: {\n        UI: {\n            new(): IUI\n        }\n    };\n    onload: (event: Event) => void;\n}\n\ndeclare const window: WindowProperties | undefined;\n\nconst core: ICore = new Core({\n    action: \"compile,run\",\n    autoCompile: true,\n    autoExecute: true,\n    databaseDirs: \"examples,https://benchmarko.github.io/CPCBasicApps/rosetta\", // example base directories (comma separated)\n\tdatabase: \"examples\", // examples, apps, saved\n    debounceCompile: 800,\n    debounceExecute: 400,\n    debug: 0,\n    example: \"locobas\",\n    fileName: \"\",\n    grammar: \"basic\", // basic or strict\n    input: \"\",\n    showBasic: true,\n    showCompiled: false,\n    showOutput: true\n});\n\nif (typeof window !== \"undefined\") {\n    window.onload = () => {\n        const UI = window.locobasicUI.UI; // we expect that it is already loaded in the HTML page\n        const ui = new UI();\n        window.cpcBasic = {\n            addIndex: core.addIndex,\n            addItem: (key: string, input: string | (() => void)) => {\n                if (!key) { // maybe \"\"\n                    key = ui.getCurrentDataKey();\n                }\n                core.addItem(key, input);\n            }\n        };\n        ui.onWindowLoadContinue(core, new BasicVmBrowser(ui));\n    };\n} else { // node.js\n    new NodeParts().nodeMain(core);\n}\n"],"names":["grammar"],"mappings":";;;;;;UAEa,MAAM,CAAA;IAKf,IAAA,WAAA,CAAY,aAAqB,EAAE,YAA2C,EAAE,WAAoB,EAAA;YAChG,IAAI,WAAW,EAAE;IACb,YAAA,MAAM,YAAY,GAAG,WAAW,CAAC,aAAa,EAAE;IAEhD,YAAA,MAAM,SAAS,GAAc;IACzB,gBAAA,YAAY,EAAE;iBACjB;gBACD,IAAI,CAAC,UAAU,GAAGA,aAAO,CAAC,aAAa,EAAE,SAAS,CAAC;;iBAChD;IACH,YAAA,IAAI,CAAC,UAAU,GAAGA,aAAO,CAAC,aAAa,CAAC;;YAG5C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;IAExC,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACpB,aAAA,eAAe;IACxB,aAAA,YAAY,CAAoB,MAAM,EAAE,YAAY,CAAC;;QAG9C,aAAa,GAAA;YAChB,OAAO,IAAI,CAAC,UAAU;;QAGlB,cAAc,CAAC,QAAgB,EAAE,QAAgB,EAAA;YACrD,IAAI,MAAM,GAAG,CAAC;YACd,OAAO,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAClG,MAAM,IAAI,CAAC;;IAEf,QAAA,OAAO,MAAM;;IAGT,IAAA,YAAY,CAAC,QAAgB,EAAE,QAAgB,EAAE,KAAa,EAAA;IAClE,QAAA,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM;YAC5B,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM;IACtD,QAAA,MAAM,SAAS,GAAG,YAAY,GAAG,CAAC,GAAG,KAAK,GAAG,YAAY,GAAG,KAAK;YACjE,OAAO,MAAM,GAAG,SAAS,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;gBACvF,MAAM,IAAI,CAAC;;IAEf,QAAA,OAAO,MAAM;;;IAIV,IAAA,YAAY,CAAC,KAAa,EAAA;IAC7B,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO;IAC5B,QAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE;YACnC,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC;IAClD,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;IACrD,QAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;IAErD,QAAA,IAAI;IACA,YAAA,IAAI,KAAK,GAAG,CAAC,EAAE;;IAEX,gBAAA,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;qBAClE;IACH,gBAAA,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;;IAG3B,YAAA,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,EAAE;IACnC,YAAA,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE;oBACzB,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,EAAY;;qBACnD;IACH,gBAAA,OAAO,CAA0B,uBAAA,EAAA,WAAW,CAAC,OAAO,EAAE;;;YAE5D,OAAO,KAAK,EAAE;IACZ,YAAA,OAAO,CAAoC,iCAAA,EAAA,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG,SAAS,EAAE;;;IAG1G;;IC1ED;IACA;IACO,MAAM,UAAU,GAAG;IACxm2BD,EAAA,CAAA;IAED,IAAA,aAAa,EACb,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4UC,EAAA;KACF;;IClrCD,SAAS,eAAe,GAAA;QACpB,MAAM,EAAE,GAAG,EAAS;QACpB,MAAM,KAAK,GAAwB,EAAE;QACrC,IAAI,QAAQ,GAAG,CAAC;QAChB,MAAM,WAAW,GAA2B,EAAE;QACjD,MAAM,UAAU,GAAG,CAAC;QACpB,MAAM,KAAK,GAAG,YAAa,GAAC,CAAC;IAE1B,IAAA,MAAM,YAAY,GAAG;IACvB,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,GAAW,EAAE,MAAc,CAAC,EAAA;IACtC,YAAA,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC;aAC1D;YACD,GAAG,EAAE,SAAS,GAAG,GAAA;gBACb,EAAE,CAAC,GAAG,EAAE;aACX;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,GAAW,EAAE,MAAc,EAAA;IAC3C,YAAA,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,MAAM;gBACpD,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACjC,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC/D,OAAO,GAAG,GAAG,GAAG;aACnB;IACD,QAAA,GAAG,EAAE,SAAS,GAAG,CAAC,IAAc,EAAE,UAA2B,CAAC,EAAA;IAC1D,YAAA,MAAM,oBAAoB,GAAG,CAAC,KAAa,KAAqC;oBAC5E,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/B,gBAAA,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MACjC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,oBAAoB,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,OAAO,CACtE;IACD,gBAAA,OAAO,KAAK;IAChB,aAAC;IACD,YAAA,OAAO,oBAAoB,CAAC,CAAC,CAAC;aACjC;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,CAAS,EAAE,CAAS,EAAA;gBACpC,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;aAC7B;IACD,QAAA,KAAK,EAAE,SAAS,KAAK,CAAC,CAAS,EAAE,CAAS,EAAA;gBACtC,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;aAC7B;YACD,GAAG,EAAE,SAAS,GAAG,GAAA;gBACb,EAAE,CAAC,KAAK,EAAE;IACV,YAAA,OAAO,KAAK;aACf;YACD,KAAK,EAAE,eAAe,KAAK,GAAA;gBACvB,EAAE,CAAC,KAAK,EAAE;IACnB,YAAA,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE;IACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC;;gBAEhC,OAAO,IAAI,OAAO,CAAO,OAAO,IAAI,UAAU,CAAC,MAAM,OAAO,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;aACpF;IACD,QAAA,WAAW,EAAE,SAAS,WAAW,CAAC,GAAW,EAAA;IACzC,YAAA,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC;aACtB;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,GAAW,EAAE,GAAY,EAAA;IACzC,YAAA,OAAO,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC;aAChE;IACP,QAAA,GAAG,EAAE,SAAS,GAAG,CAAC,GAAW,EAAE,GAAW,EAAA;IACzC,YAAA,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;aAChB;YACD,MAAM,EAAE,eAAe,MAAM,GAAA;gBACnB,MAAM,KAAK,EAAE;IACtB,YAAA,OAAO,MAAM,EAAE,CAAC,MAAM,EAAE;aAClB;IACD,QAAA,KAAK,EAAE,eAAe,KAAK,CAAC,GAAW,EAAE,KAAc,EAAA;gBAC5D,MAAM,KAAK,EAAE;gBACb,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;IACjC,YAAA,IAAI,KAAK,KAAK,IAAI,EAAE;IACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC;;qBACjC,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;IACzC,gBAAA,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC;;qBACjC;IACN,gBAAA,OAAO,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK;;aAErC;YACK,UAAU,EAAE,SAAS,UAAU,CAAC,CAAS,EAAE,KAAa,EAAE,SAAiB,EAAE,GAAY,EAAA;gBACrF,KAAK,IAAI,CAAC;gBACV,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,KAAH,IAAA,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,GAAG,GAAI,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;gBAC3E,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,GAAG,GAAG,CAAC;aACxF;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,GAAW,EAAA;IAC3B,YAAA,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;aACf;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,CAAS,EAAE,CAAS,EAAA;gBACpC,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;aAC7B;IACD,QAAA,KAAK,EAAE,SAAS,KAAK,CAAC,CAAS,EAAE,CAAS,EAAA;gBACtC,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;aAC7B;IACP,QAAA,MAAM,EAAE,SAAS,MAAM,CAAC,CAAS,EAAE,CAAS,EAAA;IAClC,YAAA,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;aAClB;IACD,QAAA,KAAK,EAAE,SAAS,KAAK,CAAC,CAAS,EAAA;IAC3B,YAAA,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;aACd;IACD,QAAA,GAAG,EAAE,SAAS,GAAG,CAAC,CAAS,EAAA;IACvB,YAAA,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;aACZ;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,CAAS,EAAE,CAAS,EAAA;gBACpC,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;aAC7B;IACD,QAAA,KAAK,EAAE,SAAS,KAAK,CAAC,CAAS,EAAE,CAAS,EAAA;gBACtC,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;aAC7B;IACD,QAAA,KAAK,EAAE,SAAS,KAAK,CAAC,GAAG,IAAyB,EAAA;gBAC9C,MAAM,YAAY,GAAG,CAAC,GAAW,MAAM,GAAG,IAAI,CAAC,GAAG,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,CAAG,GAAG,CAAG,EAAA,GAAG,CAAG,CAAA,CAAA,CAAC;IACzE,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,YAAY,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;IAC9F,YAAA,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC;aACnB;YACD,IAAI,EAAE,SAAS,IAAI,GAAA;IACf,YAAA,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;aAC3B;IACD,QAAA,OAAO,EAAE,SAAS,OAAO,CAAC,KAAa,EAAA;IACnC,YAAA,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC;aAChC;IACD,QAAA,KAAK,EAAE,SAAS,KAAK,CAAC,GAAW,EAAE,GAAW,EAAA;gBAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC;aACjE;YACD,IAAI,EAAE,SAAS,IAAI,GAAA;gBACf,EAAE,CAAC,KAAK,EAAE;IACV,YAAA,OAAO,MAAM;aAChB;IACD,QAAA,IAAI,EAAE,SAAS,IAAI,CAAC,GAAW,EAAA;IAC3B,YAAA,OAAO,GAAG,IAAI,CAAC,GAAG,CAAI,CAAA,EAAA,GAAG,CAAE,CAAA,GAAG,MAAM,CAAC,GAAG,CAAC;aAC5C;IACP,QAAA,GAAG,EAAE,SAAS,GAAG,CAAC,MAAe,EAAA;IACvB,YAAA,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC;aACjB;YACD,IAAI,EAAE,SAAS,IAAI,GAAA;IACf,YAAA,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,UAAU,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC;aAClD;IACD,QAAA,GAAG,EAAE,SAAS,GAAG,CAAC,GAAW,EAAA;IACzB,YAAA,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;SAEhE;IACD,IAAA,OAAO,YAAY;IACvB;IAEA,SAAS,UAAU,CAAC,IAAY,EAAA;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC9B,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAExC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;QACxC,IAAI,KAAK,EAAE;IACP,QAAA,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;IACvB,QAAA,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;IACpG,QAAA,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;;IAElC,IAAA,OAAO,IAAI;IACf;IAEA,SAAS,YAAY,CAAC,QAAgB,EAAA;IAClC,IAAA,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;IAC9C;IAEA,SAAS,0BAA0B,CAAC,CAAO,EAAE,EAAU,EAAE,CAAO,EAAA;IAC/D,IAAA,OAAO,CAAK,EAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,EAAI,EAAE,CAAA,CAAA,EAAI,CAAC,CAAC,IAAI,EAAE,GAAG;IAC1C;IAEA,SAAS,YAAY,CAAC,eAAiC,EAAA;IACnD,IAAA,MAAM,YAAY,GAAG,CAAC,GAAS,EAAE,CAAO,EAAE,OAAa,EAAE,CAAO,EAAE,OAAa,EAAE,EAAQ,KAAI;;YACzF,MAAM,OAAO,GAAG,GAAG,CAAC,YAAY,CAAC,WAAW,EAAE;IAC9C,QAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;IACjC,QAAA,MAAM,GAAG,GAAG,CAAA,EAAA,GAAA,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;YAC/B,IAAI,MAAM,GAAG,EAAE;IACf,QAAA,IAAI,GAAG,KAAK,SAAS,EAAE;IACnB,YAAA,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC;IACvC,YAAA,MAAM,GAAG,CAAA,YAAA,EAAe,GAAG,CAAA,GAAA,CAAK;;IAEpC,QAAA,OAAO,MAAM,GAAG,CAAG,EAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,GAAG;IAC1D,KAAC;QAED,MAAM,SAAS,GAAG,CAAC,GAAS,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,KAAI;YAChE,MAAM,IAAI,GAAG,GAAG,CAAC,YAAY,CAAC,WAAW,EAAE;YAC3C,OAAO,eAAe,CAAC,MAAM,EAAE,GAAG,CAAQ,KAAA,EAAA,IAAI,CAAK,EAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAoB,kBAAA,CAAA,GAAG,CAAQ,KAAA,EAAA,IAAI,CAAI,CAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;IACjH,KAAC;;IAGD,IAAA,MAAM,SAAS,GAAuB;IAClC,QAAA,OAAO,CAAC,KAAW,EAAA;gBACf,MAAM,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC;IAE7C,YAAA,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,EAAE;gBACnD,MAAM,oBAAoB,GAAG,YAAY,CAAC,MAAM,GAAG,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAG,EAAA,CAAC,OAAO,GAAG,CAAA,EAAG,CAAC,CAAA,IAAA,CAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE;;IAGrJ,YAAA,MAAM,aAAa,GAAG,eAAe,CAAC,gBAAgB,EAAE;IACxD,YAAA,MAAM,WAAW,GAAG,eAAe,CAAC,cAAc,EAAE;IACpD,YAAA,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,EAAE;gBAElD,MAAM,WAAW,GAAa,EAAE;IAChC,YAAA,IAAI,eAAkD;IACtD,YAAA,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE;IAC/B,gBAAA,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;wBAC1B,eAAe,GAAG,KAAK;;oBAG3B,IAAI,eAAe,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,EAAE;IACpC,oBAAA,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK;wBACnC,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;wBAC7C,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;wBAEpC,IAAI,QAAQ,GAAG,KAAK;IACpB,oBAAA,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE;4BACzC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAChC,4BAAA,QAAQ,GAAG,IAAI,CAAC;;IAEpB,wBAAA,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;wBAGrC,MAAM,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,EAAE;wBACzC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,SAAS,CAAA,EAAG,QAAQ,CAAa,UAAA,EAAA,eAAe,CAAC,KAAK,CAAA,IAAA,EAAO,SAAS,CAAI,EAAA,CAAA,GAAG,QAAQ,CAAC,KAAK,CAAC;wBACjH,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAA,EAAA,EAAK,SAAS,CAAA,CAAA,CAAG;wBACzC,IAAI,QAAQ,EAAE;IACV,wBAAA,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;;wBAE3C,eAAe,GAAG,SAAS;;oBAG/B,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;wBAChC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,SAAS;;;IAIjD,YAAA,MAAM,QAAQ,GAAG,eAAe,CAAC,WAAW,EAAE;IAC9C,YAAA,IAAI,QAAQ,CAAC,MAAM,EAAE;oBACjB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;IACvC,oBAAA,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC;IAC3B,oBAAA,IAAI,KAAK,GAAG,CAAC,EAAE;4BACX,KAAK,GAAG,CAAC;IACT,wBAAA,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK;;;IAG/B,gBAAA,QAAQ,CAAC,OAAO,CAAC,CAAA,8DAAA,CAAgE,CAAC;IAClF,gBAAA,QAAQ,CAAC,IAAI,CAAC,gDAAgD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAiC,8BAAA,EAAA,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA,oCAAA,CAAsC,CAAC;;IAGxL,YAAA,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;IAE3B,YAAA,MAAM,QAAQ,GAAG,eAAe,CAAC,WAAW,EAAE;IAC9C,YAAA,MAAM,YAAY,GAAG,eAAe,EAAE;gBAEtC,IAAI,UAAU,GAAG,KAAK;gBAC/B,IAAI,cAAc,GAAG,KAAK;gBACjB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;IACzC,gBAAA,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC9B,oBAAA,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,YAAY,CAAC,GAAgC,CAAC,EAAE,QAAQ,EAAE,CAAC;IACjE,oBAAA,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC;IACnD,oBAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;IACX,oBAAA,IAAI,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;4BAClC,UAAU,GAAG,IAAI;;IAEpC,oBAAA,IAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;4BACvC,cAAc,GAAG,IAAI;;;;gBAKf,IAAI,oBAAoB,EAAE;IACtB,gBAAA,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC;;gBAGnD,IAAI,cAAc,EAAE;IACnB,gBAAA,QAAQ,CAAC,OAAO,CAAC,CAAA,8BAAA,CAAgC,CAAC;;gBAG1C,IAAI,UAAU,EAAE;IACZ,gBAAA,QAAQ,CAAC,OAAO,CAAC,CAAA,yBAAA,CAA2B,CAAC;IAC7C,gBAAA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;;IAGzB,YAAA,QAAQ,CAAC,OAAO,CAAC,CAAA,YAAA,CAAc,CAAC;gBAEhC,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACzE,YAAA,IAAI,WAAW,CAAC,MAAM,EAAE;IACpB,gBAAA,KAAK,MAAM,KAAK,IAAI,WAAW,EAAE;wBAC7B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,CAAI,CAAA,EAAA,KAAK,CAAS,OAAA,CAAA,EAAE,GAAG,CAAC;wBACjD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAU,OAAA,EAAA,KAAK,CAAK,GAAA,CAAA,CAAC;;;IAG9D,YAAA,OAAO,OAAO;aACjB;IAED,QAAA,IAAI,CAAC,KAAW,EAAE,KAAW,EAAE,OAAa,EAAE,IAAU,EAAA;IACpD,YAAA,MAAM,WAAW,GAAG,KAAK,CAAC,YAAY;gBAEtC,MAAM,gBAAgB,GAAG,eAAe,CAAC,kBAAkB,EAAE,GAAG,CAAC;gBAEjE,IAAI,WAAW,EAAE;IACb,gBAAA,eAAe,CAAC,eAAe,CAAC,WAAW,EAAE,gBAAgB,CAAC;;IAGlE,YAAA,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE;IAE5B,YAAA,IAAI,OAAO,KAAK,QAAQ,EAAE;IACtB,gBAAA,MAAM,aAAa,GAAG,eAAe,CAAC,gBAAgB,EAAE;IACxD,gBAAA,IAAI,aAAa,CAAC,MAAM,EAAE;wBACtB,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7D,oBAAA,aAAa,CAAC,IAAI,GAAG,gBAAgB;;;gBAI7C,MAAM,UAAU,GAAG,OAAO,CAAC,YAAY,GAAG,CAAA,IAAA,EAAO,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE;IACzF,YAAA,MAAM,IAAI,GAAG,OAAO,KAAK,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,UAAU,GAAG,EAAE,GAAG,GAAG;IAElI,YAAA,MAAM,SAAS,GAAG,eAAe,CAAC,YAAY,EAAE;gBAChD,eAAe,CAAC,eAAe,EAAE;IAEjC,YAAA,OAAO,SAAS,GAAG,OAAO,GAAG,UAAU,GAAG,IAAI;aACjD;IAED,QAAA,UAAU,CAAC,IAAU,EAAE,QAAc,EAAE,KAAW,EAAA;;IAE9C,YAAA,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACjE,YAAA,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,KAAK,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAA,EAAG,GAAG,CAAA,CAAA,EAAI,OAAO,CAAE,CAAA,GAAG,GAAG,GAAG,CAAA,EAAA,EAAK,OAAO,CAAA,CAAE,CAAC;aAC7G;IAED,QAAA,WAAW,CAAC,KAAW,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAG,KAAK,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aACzC;IAED,QAAA,MAAM,CAAC,KAAW,EAAE,GAAS,EAAE,CAAO,EAAA;IAClC,YAAA,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY;gBACvC,MAAM,oBAAoB,GAAG,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC;IACtE,YAAA,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE;IACtB,YAAA,OAAO,CAAG,EAAA,oBAAoB,CAAM,GAAA,EAAA,KAAK,EAAE;aAC9C;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACjD,YAAA,OAAO,YAAY,CAAC,CAAC,IAAI,EAAE,GAAG;aACjC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACjD,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,iBAAiB;aACvC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;gBACjD,OAAO,eAAe,CAAC,MAAM,EAAE,GAAG,CAAc,WAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAoB,kBAAA,CAAA,GAAG,CAAA,UAAA,EAAa,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC1G;YAED,IAAI,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAE,CAAO,EAAE,MAAY,EAAA;;IACzE,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,YAAA,MAAM,GAAG,GAAG,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;gBAC9B,OAAO,GAAG,KAAK,SAAS,GAAG,CAAA,KAAA,EAAQ,CAAC,CAAC,IAAI,EAAE,KAAK,GAAG,CAAA,CAAA,CAAG,GAAG,CAAA,KAAA,EAAQ,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC/E;IAED,QAAA,IAAI,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IAClD,YAAA,OAAO,uBAAuB,CAAC,CAAC,IAAI,EAAE,GAAG;aAC5C;YAED,OAAO,CAAC,WAAiB,EAAE,MAAY,EAAA;IACnC,YAAA,OAAO,CAAK,EAAA,EAAA,MAAM,CAAC,YAAY,EAAE;aACpC;IAED,QAAA,GAAG,EAAE,SAAS;IAEd,QAAA,IAAI,CAAC,QAAc,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACnD,YAAA,OAAO,cAAc,CAAC,CAAC,IAAI,EAAE,GAAG;aACnC;IAED,QAAA,GAAG,CAAC,OAAa,EAAA;IACb,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/B,YAAA,OAAO,OAAO;aACjB;YAED,IAAI,CAAC,QAAc,EAAE,IAAU,EAAA;gBAC3B,MAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;IAEzD,YAAA,MAAM,aAAa,GAAG,eAAe,CAAC,gBAAgB,EAAE;IAExD,YAAA,IAAI,aAAa,CAAC,MAAM,EAAE;oBACtB,MAAM,YAAY,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5D,gBAAA,IAAI,YAAY,CAAC,SAAS,KAAK,CAAC,CAAC,EAAE;IAC/B,oBAAA,MAAM,SAAS,GAAG,eAAe,CAAC,YAAY,EAAE;IAChD,oBAAA,YAAY,CAAC,SAAS,GAAG,SAAS;;;IAI1C,YAAA,MAAM,QAAQ,GAAG,eAAe,CAAC,WAAW,EAAE;gBAC9C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,YAAA,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;IAC5C,YAAA,OAAO,EAAE;aACZ;YAED,IAAI,CAAC,OAAa,EAAE,KAAW,EAAE,GAAS,EAAE,MAAY,EAAE,MAAY,EAAE,MAAY,EAAA;IAChF,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAChC,OAAO,CAAA,KAAA,EAAQ,GAAG,CAAC,IAAI,EAAE,CAAK,EAAA,EAAA,MAAM,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACjD;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,MAAY,EAAE,MAAY,EAAA;IACzC,YAAA,OAAO,GAAG,MAAM,CAAC,IAAI,EAAE,EAAE;aAC5B;IAED,QAAA,OAAO,CAAC,KAAW,EAAE,WAAiB,EAAE,MAAY,EAAA;gBAChD,MAAM,OAAO,GAAG,YAAY,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBAEhE,OAAO,CAAA,CAAA,EAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;aACnC;IAED,QAAA,SAAS,CAAC,KAAW,EAAE,IAAU,EAAE,MAAY,EAAE,CAAO,EAAA;IACpD,YAAA,MAAM,OAAO,GAAG,eAAe,CAAC,WAAW,CAAC,CAAK,EAAA,EAAA,KAAK,CAAC,YAAY,CAAE,CAAA,CAAC;IAEtE,YAAA,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACpC,YAAA,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IAE7D,YAAA,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,EAAE;IACxB,YAAA,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC;IAEpC,YAAA,OAAO,GAAG,OAAO,CAAA,GAAA,EAAM,MAAM,CAAO,IAAA,EAAA,OAAO,EAAE;aAChD;IAED,QAAA,GAAG,CAAC,OAAa,EAAA;IACb,YAAA,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC;IAC5B,YAAA,OAAO,kBAAkB;aAC5B;YAEP,GAAG,CAAC,OAAa,EAAE,OAAa,EAAA;gBAC/B,MAAM,YAAY,GAAa,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;IAC3E,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/B,YAAA,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;aAC9B;IAED,QAAA,IAAI,EAAE,YAAY;IAElB,QAAA,KAAK,EAAE,YAAY;IAEnB,QAAA,GAAG,CAAC,OAAa,EAAA;IAChB,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/B,YAAA,OAAO,cAAc;aACrB;YAED,KAAK,CAAC,SAAe,EAAE,WAAiB,EAAA;gBACvC,MAAM,gBAAgB,GAAa,YAAY,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBACnF,MAAM,OAAO,GAAa,EAAE;IAE5B,YAAA,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE;IACrC,gBAAA,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG;oBACnD,OAAO,CAAC,IAAI,CAAC,CAAA,EAAG,KAAK,CAAM,GAAA,EAAA,UAAU,CAAE,CAAA,CAAC;;IAGzC,YAAA,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;aACzB;YAED,KAAK,CAAC,SAAe,EAAE,CAAO,EAAA;IAC7B,YAAA,OAAO,mBAAmB,CAAC,CAAC,IAAI,EAAE,GAAG;aACrC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,YAAY,CAAC,CAAC,IAAI,EAAE,GAAG;aAC9B;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,cAAc,CAAC,CAAC,IAAI,EAAE,GAAG;aAChC;IAED,QAAA,SAAS,CAAC,KAAW,EAAE,IAAU,EAAE,MAAY,EAAA;gBAC9C,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBAC9D,OAAO,CAAA,CAAA,EAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;aACrC;YAGD,OAAO,CAAC,OAAa,EAAE,IAAU,EAAA;;IAChC,YAAA,MAAM,cAAc,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,EAAE,KAAI,IAAI;gBACpD,OAAO,CAAA,EAAG,OAAO,CAAC,IAAI,EAAE,CAAG,EAAA,cAAc,EAAE;aAC3C;YAED,UAAU,CAAC,OAAa,EAAE,IAAU,EAAA;;IACnC,YAAA,MAAM,MAAM,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,EAAE,KAAI,IAAI;gBAC5C,OAAO,CAAA,EAAG,OAAO,CAAC,IAAI,EAAE,CAAG,EAAA,MAAM,EAAE;aACnC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,QAAc,EAAE,OAAa,EAAE,KAAW,EAAE,OAAa,EAAE,GAAS,EAAE,QAAc,EAAE,IAAU,EAAA;;IAClH,YAAA,MAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,EAAE;IAC1C,YAAA,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,EAAE;IACpC,YAAA,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,EAAE;IAChC,YAAA,MAAM,cAAc,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,EAAE,KAAI,GAAG;IAEnD,YAAA,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC;gBAE3C,IAAI,mBAAmB,GAAG,EAAE;IAC5B,YAAA,IAAI,KAAK,CAAC,YAAY,CAAC,EAAE;IACxB,gBAAA,mBAAmB,GAAG,CAAA,EAAG,cAAc,CAAA,QAAA,EAAW,kBAAkB,CAAA,IAAA,EAAO,aAAa,CAAA,GAAA,EAAM,kBAAkB,CAAA,IAAA,EAAO,aAAa,CAAA,CAAE;;qBAChI;oBACN,mBAAmB,GAAG,YAAY,IAAI,CAAC,GAAG,GAAG,kBAAkB,CAAA,IAAA,EAAO,aAAa,CAAE,CAAA,GAAG,CAAA,EAAG,kBAAkB,CAAO,IAAA,EAAA,aAAa,EAAE;;IAGpI,YAAA,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;IAChC,YAAA,MAAM,MAAM,GAAG,CAAQ,KAAA,EAAA,kBAAkB,CAAM,GAAA,EAAA,eAAe,CAAK,EAAA,EAAA,mBAAmB,CAAK,EAAA,EAAA,kBAAkB,CAAO,IAAA,EAAA,cAAc,KAAK;IAEvI,YAAA,OAAO,MAAM;aACb;IAED,QAAA,KAAK,CAAC,SAAe,EAAA;IACpB,YAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;IACjC,YAAA,OAAO,eAAe;aACtB;YAED,KAAK,CAAC,SAAe,EAAE,CAAO,EAAA;IAC7B,YAAA,MAAM,WAAW,GAAG,CAAC,CAAC,YAAY;IAClC,YAAA,eAAe,CAAC,aAAa,CAAC,WAAW,CAAC;gBAE1C,OAAO,CAAA,CAAA,EAAI,WAAW,CAAA,EAAA,CAAI;aAC1B;IAED,QAAA,WAAW,CAAC,YAAkB,EAAE,OAAa,EAAE,CAAO,EAAA;IACrD,YAAA,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC;IACvC,YAAA,OAAO,eAAe,CAAC,CAAC,IAAI,EAAE,GAAG;aACjC;YAED,IAAI,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAE,CAAO,EAAE,MAAY,EAAA;;IAC5E,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,YAAA,MAAM,GAAG,GAAG,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;gBAC9B,OAAO,GAAG,KAAK,SAAS,GAAG,CAAA,KAAA,EAAQ,CAAC,CAAC,IAAI,EAAE,KAAK,GAAG,CAAA,CAAA,CAAG,GAAG,CAAA,KAAA,EAAQ,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC5E;YAED,EAAE,CAAC,MAAY,EAAE,OAAa,EAAE,QAAc,EAAE,QAAc,EAAE,OAAa,EAAE,QAAc,EAAA;IAC5F,YAAA,MAAM,aAAa,GAAG,eAAe,CAAC,YAAY,EAAE;IACpD,YAAA,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5B,YAAA,MAAM,eAAe,GAAG,eAAe,CAAC,YAAY,EAAE;IAEtD,YAAA,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,EAAE;IAChC,YAAA,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,EAAE;IAErC,YAAA,IAAI,MAAM,GAAG,CAAO,IAAA,EAAA,SAAS,CAAQ,KAAA,EAAA,eAAe,CAAG,EAAA,aAAa,CAAK,EAAA,EAAA,aAAa,CAAG,CAAA,CAAA,CAAC;IAC1F,YAAA,IAAI,OAAO,CAAC,YAAY,EAAE;IACzB,gBAAA,MAAM,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oBAChE,MAAM,IAAI,YAAY,eAAe,CAAA,EAAG,aAAa,CAAK,EAAA,EAAA,aAAa,GAAG;;IAG3E,YAAA,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7B,YAAA,OAAO,MAAM;aACb;YAED,GAAG,CAAC,OAAa,EAAE,GAAS,EAAE,MAAY,EAAE,GAAS,EAAE,OAAa,EAAE,KAAW,EAAA;IAChF,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAC/B,OAAO,CAAA,IAAA,EAAO,GAAG,CAAC,IAAI,EAAE,CAAK,EAAA,EAAA,GAAG,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC1C;IAED,QAAA,MAAM,CAAC,UAAgB,EAAA;IACtB,YAAA,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAClC,YAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;IACjC,YAAA,OAAO,gBAAgB;aACvB;IAED,QAAA,KAAK,CAAC,SAAe,EAAE,OAAa,EAAE,KAAW,EAAE,CAAO,EAAA;IACzD,YAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;IACjC,YAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;IAEjC,YAAA,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAClE,YAAA,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,EAAE;IAC3B,YAAA,MAAM,cAAc,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,QAAQ;IAE/D,YAAA,OAAO,GAAG,UAAU,CAAA,eAAA,EAAkB,aAAa,CAAG,EAAA,cAAc,GAAG;aACvE;YAED,WAAW,CAAC,SAAe,EAAE,KAAW,EAAE,EAAQ,EAAE,MAAY,EAAE,EAAQ,EAAE,MAAY,EAAA;gBACvF,OAAO,CAAA,EAAA,EAAK,EAAE,CAAC,IAAI,EAAE,CAAa,UAAA,EAAA,EAAE,CAAC,IAAI,EAAE,CAAA,MAAA,CAAQ;aACnD;IAED,QAAA,SAAS,CAAC,SAAe,EAAE,KAAW,EAAE,GAAS,EAAE,OAAa,EAAE,EAAQ,EAAE,OAAa,EAAE,EAAQ,EAAE,MAAY,EAAA;IAChH,YAAA,OAAO,KAAK,EAAE,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,IAAI,EAAE,YAAY;aACtE;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,cAAc,CAAC,CAAC,IAAI,EAAE,GAAG;aAChC;YAED,KAAK,CAAC,QAAc,EAAE,KAAW,EAAE,EAAQ,EAAE,MAAY,EAAE,EAAQ,EAAE,MAAY,EAAA;gBAChF,OAAO,CAAA,CAAA,EAAI,EAAE,CAAC,IAAI,EAAE,CAAc,WAAA,EAAA,EAAE,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC9C;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,UAAU;aAC7B;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,YAAY,CAAC,CAAC,IAAI,EAAE,GAAG;aAC9B;IAED,QAAA,KAAK,CAAC,SAAe,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACxD,YAAA,OAAO,cAAc,CAAC,CAAC,IAAI,EAAE,GAAG;aAChC;IAED,QAAA,MAAM,CAAC,SAAe,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACzD,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,iBAAiB;aACpC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,IAAU,EAAE,MAAY,EAAA;gBACvD,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBAC9D,OAAO,CAAA,SAAA,EAAY,YAAY,CAAA,CAAA,CAAG;aAClC;IAED,QAAA,IAAI,CAAC,OAAa,EAAE,KAAW,EAAE,EAAQ,EAAE,OAAa,EAAE,EAAQ,EAAE,OAAa,EAAE,EAAQ,EAAE,MAAY,EAAA;;IACxG,YAAA,MAAM,MAAM,GAAG,CAAA,EAAA,GAAA,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;IAClC,YAAA,MAAM,YAAY,GAAG,MAAM,KAAK,SAAS,GAAG,EAAE,GAAG,CAAK,EAAA,EAAA,MAAM,EAAE;IAC9D,YAAA,OAAO,CAAI,CAAA,EAAA,EAAE,CAAC,IAAI,EAAE,CAAA,SAAA,EAAY,EAAE,CAAC,IAAI,EAAE,CAAO,IAAA,EAAA,YAAY,GAAG;aAC/D;IAED,QAAA,UAAU,CAAC,OAAa,EAAE,KAAW,EAAE,KAAW,EAAE,OAAa,EAAE,EAAQ,EAAE,OAAa,EAAE,EAAQ,EAAE,MAAY,EAAE,GAAS,EAAE,CAAO,EAAA;;IACrI,YAAA,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC;IAEtC,YAAA,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY;gBACvC,MAAM,oBAAoB,GAAG,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC;IACtE,YAAA,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,EAAE;IACvB,YAAA,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,EAAE;IAC1B,YAAA,MAAM,MAAM,GAAG,CAAA,EAAA,GAAA,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,EAAE,CAAC;gBAEnC,OAAO,CAAA,EAAG,oBAAoB,CAAA,cAAA,EAAiB,oBAAoB,CAAA,EAAA,EAAK,KAAK,CAAA,EAAA,EAAK,SAAS,CAAA,EAAA,EAAK,MAAM,CAAA,CAAA,CAAG;aACzG;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,IAAU,EAAE,MAAY,EAAA;gBACvD,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBAC9D,OAAO,CAAA,SAAA,EAAY,YAAY,CAAA,CAAA,CAAG;aAClC;YAED,IAAI,CAAC,QAAc,EAAE,CAAO,EAAA;IAC3B,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,YAAA,OAAO,QAAQ,CAAC,CAAC,IAAI,EAAE,GAAG;aAC1B;IAED,QAAA,IAAI,EAAE,YAAY;IAElB,QAAA,KAAK,EAAE,YAAY;YAEnB,IAAI,CAAC,QAAc,EAAE,SAAe,EAAA;gBACnC,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;IACnE,YAAA,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;IACzB,gBAAA,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC;;gBAE1B,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC;IACnD,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACpD;IAED,QAAA,EAAE,CAAC,MAAY,EAAE,EAAQ,EAAE,SAAe,EAAE,IAAU,EAAA;IACrD,YAAA,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,EAAE;IACvB,YAAA,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC;IAEjF,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;oBAChD,eAAe,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;gBAG/C,OAAO,CAAA,EAAA,EAAK,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,CAAI,CAAA,EAAA,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,KAAK,CAAA,6BAAA,CAA+B,CAAC;aAC1G;IAED,QAAA,MAAM,CAAC,UAAgB,EAAE,CAAO,EAAE,OAAa,EAAE,CAAO,EAAA;IACvD,YAAA,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAClC,OAAO,CAAA,OAAA,EAAU,CAAC,CAAC,IAAI,EAAE,CAAK,EAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACzC;YAED,KAAK,CAAC,SAAe,EAAE,CAAO,EAAA;IAC7B,YAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;IACjC,YAAA,OAAO,SAAS,CAAC,CAAC,IAAI,EAAE,GAAG;aAC3B;YAED,GAAG,CAAC,OAAa,EAAE,CAAO,EAAA;IACzB,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/B,YAAA,OAAO,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG;aACzB;IAED,QAAA,EAAE,CAAC,MAAY,EAAA;IACd,YAAA,OAAO,SAAS;aAChB;IAED,QAAA,IAAI,EAAE,YAAY;IAElB,QAAA,KAAK,EAAE,YAAY;YAEnB,eAAe,CAAC,IAAU,EAAE,IAAU,EAAA;gBACrC,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IAC/C,YAAA,OAAO,eAAe;aACtB;IAED,QAAA,iBAAiB,CAAC,SAAe,EAAE,MAAY,EAAE,KAAW,EAAE,OAAa,EAAA;IAC1E,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,YAAA,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,EAAE;gBAClC,MAAM,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBACjE,MAAM,eAAe,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,QAAQ,GAAG,CAAA,EAAA,EAAK,YAAY,CAAG,CAAA,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAC7F,YAAA,OAAO,eAAe;aACtB;IAED,QAAA,KAAK,CAAC,SAAe,EAAE,IAAU,EAAE,IAAU,EAAA;IAC5C,YAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;gBACjC,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;gBAC9D,MAAM,eAAe,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBAErD,IAAI,aAAa,GAAG,EAAE;IACtB,YAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;oBACvB,aAAa,GAAG,eAAe,GAAG,SAAS,GAAG,CAAA,KAAA,CAAO;;IAEtD,YAAA,OAAO,CAAS,MAAA,EAAA,eAAe,CAAG,EAAA,aAAa,GAAG;aAClD;IAED,QAAA,GAAG,CAAC,OAAa,EAAA;IAChB,YAAA,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,YAAA,OAAO,kBAAkB;aACzB;YAED,IAAI,CAAC,QAAc,EAAE,IAAU,EAAA;IAC9B,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAChC,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;IAC9D,YAAA,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,UAAU,IAAI,CAAA,EAAG,UAAU,CAAA,SAAA,CAAW,CAAC;IACxE,YAAA,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;aACzB;YAED,GAAG,CAAC,OAAa,EAAE,MAAY,EAAA;IAC9B,YAAA,OAAO,CAAM,GAAA,EAAA,MAAM,CAAC,YAAY,EAAE;aAClC;YAED,OAAO,CAAC,WAAiB,EAAE,CAAO,EAAA;IACjC,YAAA,MAAM,WAAW,GAAG,CAAC,CAAC,YAAY,IAAI,GAAG;IACzC,YAAA,eAAe,CAAC,eAAe,CAAC,WAAW,CAAC;IAE5C,YAAA,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC;gBACnC,OAAO,CAAA,QAAA,EAAW,WAAW,CAAA,CAAA,CAAG;aAChC;IAED,QAAA,MAAM,CAAC,UAAgB,EAAA;IACtB,YAAA,OAAO,QAAQ;aACf;YAED,MAAM,CAAC,SAAe,EAAE,KAAW,EAAE,EAAQ,EAAE,MAAY,EAAE,EAAQ,EAAE,MAAY,EAAA;IAClF,YAAA,MAAM,MAAM,GAAW,EAAE,CAAC,IAAI,EAAE;IAChC,YAAA,MAAM,MAAM,GAAW,EAAE,CAAC,IAAI,EAAE;IAChC,YAAA,OAAO,IAAI,MAAM,CAAA,aAAA,EAAgB,MAAM,CAAe,YAAA,EAAA,MAAM,IAAI;aAChE;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,EAAQ,EAAE,MAAY,EAAA;;IAErD,YAAA,OAAO,eAAe;aACtB;YAED,KAAK,CAAC,SAAe,EAAE,KAAW,EAAE,KAAW,EAAE,MAAY,EAAE,QAAc,EAAE,MAAY,EAAA;;IAC1F,YAAA,MAAM,aAAa,GAAG,CAAA,EAAA,GAAA,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,EAAE;gBAC/C,IAAI,aAAa,EAAE;IAClB,gBAAA,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC;oBACjC,OAAO,CAAA,MAAA,EAAS,KAAK,CAAC,IAAI,EAAE,CAAK,EAAA,EAAA,aAAa,GAAG;;gBAElD,OAAO,CAAA,WAAA,EAAc,KAAK,CAAC,IAAI,EAAE,CAAG,CAAA,CAAA,CAAC;;aAErC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,aAAa,CAAC,CAAC,IAAI,EAAE,GAAG;aAC/B;IAED,QAAA,GAAG,EAAE,SAAS;IAEd,QAAA,MAAM,CAAC,UAAgB,EAAE,KAAW,EAAE,GAAS,EAAE,MAAY,EAAA;IAC5D,YAAA,OAAO,cAAc,GAAG,CAAC,IAAI,EAAE,GAAG;aAClC;IAED,QAAA,GAAG,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACpD,YAAA,OAAO,aAAa,CAAC,CAAC,IAAI,EAAE,GAAG;aAC/B;IAED,QAAA,IAAI,CAAC,QAAc,EAAA;IAClB,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,YAAA,OAAO,eAAe;aACtB;IAED,QAAA,IAAI,CAAC,OAAa,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACrD,YAAA,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,EAAE;gBAEzB,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE;IAC5B,gBAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAChC,OAAO,CAAA,KAAA,EAAQ,QAAQ,CAAA,CAAA,CAAG;;;IAG3B,YAAA,OAAO,QAAQ,IAAI,CAAC,GAAG,CAAA,cAAA,EAAiB,QAAQ,CAAA,EAAA,CAAI,GAAG,CAAU,OAAA,EAAA,QAAQ,GAAG;aAC5E;YAED,WAAW,CAAC,UAAgB,EAAE,KAAW,EAAE,GAAS,EAAE,SAAe,EAAE,GAAS,EAAE,MAAY,EAAA;;gBAE7F,OAAO,CAAA,CAAA,EAAI,GAAG,CAAC,IAAI,EAAE,CAAY,SAAA,EAAA,GAAG,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC9C;YAED,WAAW,CAAC,UAAgB,EAAE,KAAW,EAAE,GAAS,EAAE,SAAe,EAAE,GAAS,EAAE,MAAY,EAAA;gBAC7F,OAAO,CAAA,oBAAA,EAAuB,GAAG,CAAC,IAAI,EAAE,CAAY,SAAA,EAAA,GAAG,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACjE;IAED,QAAA,GAAG,CAAC,OAAa,EAAA;IAChB,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/B,YAAA,OAAO,WAAW;aAClB;IAED,QAAA,MAAM,CAAC,UAAgB,EAAA;IACtB,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/B,YAAA,OAAO,YAAY;aACnB;IAED,QAAA,GAAG,EAAE,SAAS;IAEd,QAAA,IAAI,CAAC,QAAc,EAAA;IAClB,YAAA,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;IAChC,YAAA,OAAO,QAAQ;aACf;IAED,QAAA,MAAM,CAAC,SAAe,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACzD,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,iBAAiB;aACpC;IAED,QAAA,GAAG,CAAC,SAAe,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;gBACtD,MAAM,UAAU,GAAG,6CAA6C;gBAChE,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAE/B,YAAA,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;IAC5B,gBAAA,OAAO,CAAU,OAAA,EAAA,MAAM,CAAG,CAAA,CAAA,CAAC;;IAE5B,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAC/B,OAAO,CAAA,IAAA,EAAO,MAAM,CAAA,CAAA,CAAG;aACvB;IAED,QAAA,IAAI,CAAC,QAAc,EAAA;IAClB,YAAA,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7B,YAAA,OAAO,GAAG;aACV;YAED,KAAK,CAAC,SAAe,EAAE,CAAO,EAAA;IAC7B,YAAA,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;IACrB,YAAA,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAA,OAAA,EAAU,IAAI,CAAA,GAAA,CAAK;aAC1B;IAED,QAAA,UAAU,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACrC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IAED,QAAA,QAAQ,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACnC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IAED,QAAA,UAAU,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACrC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;YAED,UAAU,CAAC,GAAS,EAAE,CAAO,EAAA;IAC5B,YAAA,OAAO,KAAK,CAAC,CAAC,IAAI,EAAE,GAAG;aACvB;IAED,QAAA,SAAS,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACpC,OAAO,0BAA0B,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;aAC9C;IACD,QAAA,SAAS,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACpC,OAAO,0BAA0B,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;aAC9C;IACD,QAAA,SAAS,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACpC,OAAO,0BAA0B,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;aAC5C;IACD,QAAA,SAAS,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACpC,OAAO,0BAA0B,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;aAC7C;IACD,QAAA,SAAS,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACpC,OAAO,0BAA0B,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;aAC5C;IACD,QAAA,SAAS,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACpC,OAAO,0BAA0B,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;aAC7C;IAED,QAAA,WAAW,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACtC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IACD,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IAED,QAAA,UAAU,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACrC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IAED,QAAA,UAAU,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACrC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,MAAA,CAAQ;aAC1C;IAED,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IACD,QAAA,aAAa,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACxC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IAED,QAAA,YAAY,CAAC,CAAO,EAAE,CAAO,EAAE,CAAO,EAAA;gBACrC,OAAO,CAAA,SAAA,EAAY,CAAC,CAAC,IAAI,EAAE,CAAK,EAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aAC3C;IAED,QAAA,YAAY,CAAC,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IAC9C,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,GAAG;aACtB;YACD,UAAU,CAAC,GAAS,EAAE,CAAO,EAAA;IAC5B,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;aACrB;YACD,UAAU,CAAC,GAAS,EAAE,CAAO,EAAA;IAC5B,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;aACrB;IAED,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAQ,KAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACvC;IACD,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAQ,KAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACvC;IACD,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACrC;IACD,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAO,IAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACtC;IACD,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACrC;IACD,QAAA,YAAY,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACvC,OAAO,CAAA,EAAA,EAAK,CAAC,CAAC,IAAI,EAAE,CAAO,IAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACtC;IAED,QAAA,cAAc,CAAC,CAAO,EAAE,GAAS,EAAE,CAAO,EAAA;gBACzC,OAAO,CAAA,EAAG,CAAC,CAAC,IAAI,EAAE,CAAM,GAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE;aAClC;IAED,QAAA,eAAe,CAAC,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;IACjD,YAAA,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,GAAG;aACtB;IAED,QAAA,SAAS,CAAC,IAAU,EAAA;;IAEnB,YAAA,OAAO,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;aAC3D;IAED,QAAA,UAAU,CAAC,KAAW,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;gBACzD,OAAO,CAAA,EAAG,KAAK,CAAC,IAAI,EAAE,CAAI,CAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACrC;IAED,QAAA,aAAa,CAAC,KAAW,EAAE,KAAW,EAAE,CAAO,EAAE,MAAY,EAAA;gBAC5D,OAAO,CAAA,EAAG,KAAK,CAAC,IAAI,EAAE,CAAI,CAAA,EAAA,CAAC,CAAC,IAAI,EAAE,CAAA,CAAA,CAAG;aACrC;IAED,QAAA,YAAY,CAAC,IAAU,EAAA;;IAEtB,YAAA,OAAO,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;aAC3D;IAED,QAAA,aAAa,CAAC,KAAW,EAAE,KAAW,EAAE,OAAa,EAAE,MAAY,EAAA;IAClE,YAAA,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,EAAE;IAC7B,YAAA,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE;IACvD,YAAA,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAE/B,OAAO,CAAA,EAAG,QAAQ,CAAA,QAAA,EAAW,OAAO,CAAC,IAAI,EAAE,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG;aAC5D;IAED,QAAA,YAAY,CAAC,KAAW,EAAA;gBACvB,OAAO,KAAK,CAAC,YAAY;aACzB;YAED,QAAQ,CAAC,OAAa,EAAE,KAAW,EAAA;IAClC,YAAA,OAAO,CAAK,EAAA,EAAA,KAAK,CAAC,YAAY,EAAE;aAChC;YAED,WAAW,CAAC,OAAa,EAAE,KAAW,EAAA;IACrC,YAAA,OAAO,CAAK,EAAA,EAAA,KAAK,CAAC,YAAY,EAAE;aAChC;YAED,aAAa,CAAC,IAAU,EAAE,KAAW,EAAA;gBACpC,OAAO,CAAA,EAAG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAA,CAAE;aAClD;IAED,QAAA,MAAM,CAAC,OAAa,EAAE,CAAO,EAAE,OAAa,EAAA;IAC3C,YAAA,OAAO,CAAI,CAAA,EAAA,CAAC,CAAC,YAAY,GAAG;aAC5B;IAED,QAAA,KAAK,CAAC,KAAW,EAAA;IAChB,YAAA,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY;IAC/B,YAAA,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC;aACxC;YAED,OAAO,CAAC,EAAQ,EAAE,KAAW,EAAA;gBAC5B,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY;IACjD,YAAA,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC;aACxC;YAED,QAAQ,CAAC,KAAW,EAAE,UAAgB,EAAA;gBACrC,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY;IACzD,YAAA,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC;aACxC;IAED,QAAA,UAAU,CAAC,EAAQ,EAAE,KAAW,EAAE,UAAgB,EAAA;IACjD,YAAA,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY;IAC3E,YAAA,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC;;SAEzC;IACD,IAAA,OAAO,SAAS;IACjB;UAGa,SAAS,CAAA;IAAtB,IAAA,WAAA,GAAA;YACS,IAAS,CAAA,SAAA,GAAG,CAAC;YAEb,IAAM,CAAA,MAAA,GAAG,CAAC;YACV,IAAS,CAAA,SAAA,GAAG,CAAC;YAEJ,IAAS,CAAA,SAAA,GAA2B,EAAE;YAEtC,IAAa,CAAA,aAAA,GAA4B,EAAE;YAC3C,IAAW,CAAA,WAAA,GAAwC,EAAE;YAErD,IAAQ,CAAA,QAAA,GAAwB,EAAE;YAC3C,IAAS,CAAA,SAAA,GAAG,CAAC;YACJ,IAAU,CAAA,UAAA,GAA2B,EAAE;YAIvC,IAAQ,CAAA,QAAA,GAA2B,EAAE;YAE9C,IAAK,CAAA,KAAA,GAAG,KAAK;YACb,IAAY,CAAA,YAAA,GAAG,KAAK;;QAErB,MAAM,GAAA;YACZ,OAAO,IAAI,CAAC,KAAK;;IAGX,IAAA,MAAM,CAAC,KAAc,EAAA;IAC3B,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK;;IAGZ,IAAA,SAAS,CAAC,GAAW,EAAA;IAC3B,QAAA,IAAI,GAAG,GAAG,CAAC,EAAE;gBACZ,IAAI,CAAC,eAAe,EAAE;;IAEvB,QAAA,IAAI,CAAC,MAAM,IAAI,GAAG;YAClB,OAAO,IAAI,CAAC,MAAM;;IAGZ,IAAA,SAAS,CAAC,MAAc,EAAA;IAC9B,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;;QAGd,SAAS,GAAA;YACf,OAAO,IAAI,CAAC,MAAM;;QAGZ,YAAY,GAAA;IAClB,QAAA,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;IACpB,YAAA,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC;IACnF,YAAA,OAAO,EAAE;;YAEV,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;;QAGxB,eAAe,GAAA;IACrB,QAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS;IAC7B,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC;;IAGZ,IAAA,aAAa,CAAC,GAAW,EAAA;IAC/B,QAAA,IAAI,CAAC,SAAS,IAAI,GAAG;;IAGf,IAAA,YAAY,CAAC,KAAa,EAAA;IAChC,QAAA,OAAO,IAAI,CAAC,SAAS,IAAI,KAAK;;QAGxB,YAAY,GAAA;YAClB,OAAO,IAAI,CAAC,SAAS;;QAGf,eAAe,CAAC,KAAa,EAAE,IAAY,EAAA;IACjD,QAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACvB,KAAK;IACL,YAAA,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,CAAC,CAAC;gBACR,SAAS,EAAE,CAAC;IACZ,SAAA,CAAC;;QAGI,gBAAgB,GAAA;YACtB,OAAO,IAAI,CAAC,aAAa;;IAGnB,IAAA,aAAa,CAAC,KAAa,EAAA;IACjC,QAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI;IACpD,YAAA,KAAK,EAAE;aACP;YACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC;;QAGlE,cAAc,GAAA;YACpB,OAAO,IAAI,CAAC,WAAW;;QAGjB,WAAW,GAAA;YACjB,OAAO,IAAI,CAAC,QAAQ;;IAGd,IAAA,QAAQ,CAAC,IAAY,EAAA;IAC3B,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IACpD,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;;QAGpB,YAAY,GAAA;YAClB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;;IAG5B,IAAA,WAAW,CAAC,IAAY,EAAA;IAC9B,QAAA,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;YACzB,IAAI,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IACrC,YAAA,IAAI,GAAG,CAAA,CAAA,EAAI,IAAI,CAAA,CAAE;;IAGlB,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;IACvB,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;IAEvD,QAAA,OAAO,IAAI;;IAGL,IAAA,aAAa,CAAC,KAAc,EAAA;IAClC,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK;;QAGlB,OAAO,cAAc,CAAC,KAA8B,EAAA;IAC3D,QAAA,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;IACzB,YAAA,OAAO,KAAK,CAAC,IAAI,CAAC;;;QAIb,kBAAkB,GAAA;IACxB,QAAA,IAAI,CAAC,SAAS,IAAI,CAAC;YACnB,OAAO,IAAI,CAAC,SAAS;;QAGf,aAAa,GAAA;YACnB,OAAO,IAAI,CAAC,UAAU;;IAGhB,IAAA,eAAe,CAAC,KAAa,EAAA;YACnC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QAGrB,WAAW,GAAA;YACjB,OAAO,IAAI,CAAC,QAAQ;;QAGd,WAAW,GAAA;IACjB,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC;IAClB,QAAA,IAAI,CAAC,MAAM,GAAG,CAAC;IACf,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC;IAClB,QAAA,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC;IACxC,QAAA,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC;IAC7B,QAAA,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1C,QAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;IACxB,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC;IAClB,QAAA,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC;IACzC,QAAA,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvC,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK;IAClB,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK;;QAGnB,YAAY,GAAA;IAClB,QAAA,OAAO,YAAY,CAAC,IAAI,CAAC;;;IApJF,SAAW,CAAA,WAAA,GAAG,0TAAH;;IC3+BpC,SAAS,SAAS,CAAC,EAAc,EAAA;IAC7B,IAAA,OAAO,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;IAC5E;UAEa,IAAI,CAAA;IAOb,IAAA,WAAA,CAAY,aAAyB,EAAA;IAJpB,QAAA,IAAA,CAAA,SAAS,GAAG,IAAI,SAAS,EAAE;YAC3B,IAAW,CAAA,WAAA,GAAoB,EAAE;YAQ1C,IAAa,CAAA,aAAA,GAAG,OAAO,EAAU,KAAK,EAAE,CAAC;IAiH1C,QAAA,IAAA,CAAA,QAAQ,GAAG,CAAC,GAAW,EAAE,KAAmD,KAAU;IAC/F,YAAA,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;IAChC,gBAAA,KAAK,GAAG;IACP,oBAAA,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE;qBACzC;;gBAGI,MAAM,UAAU,GAAmB,EAAE;IACrC,YAAA,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;IACvB,gBAAA,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAkB;IAE1C,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACrC,oBAAA,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;;;IAGzC,YAAA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;IACrC,SAAC;IAES,QAAA,IAAA,CAAA,OAAO,GAAG,CAAC,GAAW,EAAE,KAA4B,KAAU;IACjE,YAAA,IAAI,WAAW,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK;IACtE,YAAA,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAEhE,YAAA,IAAI,CAAC,GAAG,EAAE;IACN,gBAAA,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC;oBAChC,GAAG,GAAG,SAAS;;gBAGnB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;gBACpC,IAAI,OAAO,EAAE;IACT,gBAAA,OAAO,CAAC,MAAM,GAAG,WAAW;;IAEpC,SAAC;IApJG,QAAA,IAAI,CAAC,aAAa,GAAG,aAAa;IAClC,QAAA,IAAI,CAAC,MAAM,GAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAa,CAAC;;QAK7B,mBAAmB,GAAA;YACtB,OAAO,IAAI,CAAC,aAAa;;QAGtB,YAAY,GAAA;YACf,OAAO,IAAI,CAAC,MAAM;;QAGf,eAAe,GAAA;IAClB,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC;IAExD,QAAA,KAAK,MAAM,MAAM,IAAI,YAAY,EAAE;gBAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC/B,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAEnC,YAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG;oBACpB,GAAG;oBACf,MAAM;IACM,gBAAA,UAAU,EAAE;iBACxB;;YAEI,OAAO,IAAI,CAAC,WAAW;;QAGpB,cAAc,GAAA;YACjB,OAAO,IAAI,CAAC,WAAW;;QAGpB,WAAW,GAAA;YACd,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;;QAG1C,aAAa,GAAA;IAChB,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU;YACpE,IAAI,CAAC,UAAU,EAAE;gBACb,OAAO,CAAC,KAAK,CAAC,kDAAkD,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IACvF,YAAA,OAAO,EAAE;;IAEb,QAAA,OAAO,UAAU;;IAGd,IAAA,aAAa,CAAC,UAA0B,EAAA;IAC3C,QAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,GAAG,UAAU;;IAG3D,IAAA,UAAU,CAAC,IAAY,EAAA;IAC1B,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE;IACvC,QAAA,OAAO,UAAU,CAAC,IAAI,CAAC;;IAGpB,IAAA,gBAAgB,CAAC,EAAkC,EAAA;IACtD,QAAA,IAAI,CAAC,aAAa,GAAG,EAAE;;IAGpB,IAAA,aAAa,CAAC,MAAc,EAAA;IAC/B,QAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBACxB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;gBAC/C,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;oBAClC,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC;IAClE,gBAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,SAAS,EAAE,WAAW,CAAC;;qBACjF;IACH,gBAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC;;;IAG9E,QAAA,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;YAC5B,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC;;IAG9C,IAAA,MAAM,aAAa,CAAC,cAAsB,EAAE,EAAY,EAAA;IAC3D,QAAA,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC;IAEhB,QAAA,IAAI,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;IACrC,YAAA,OAAO,OAAO;;YAGlB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC;YAC5D,IAAI,WAAW,EAAE;gBACb,EAAE,CAAC,GAAG,EAAE;gBACR,OAAO,SAAS,GAAG,WAAW;;YAGlC,IAAI,MAAM,GAAG,EAAE;IACf,QAAA,IAAI;gBACA,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC;gBACnD,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAS,CAAC,IAAI,EAAE;IAExC,YAAA,IAAI,MAAM,YAAY,OAAO,EAAE;IAC3B,gBAAA,MAAM,MAAM;;gBAEhB,EAAE,CAAC,KAAK,EAAE;IACV,YAAA,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,IAAI,EAAE;;YAC/B,OAAO,KAAK,EAAE;IACZ,YAAA,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,IAAI,EAAE;gBAC7B,IAAI,MAAM,EAAE;oBACR,MAAM,IAAI,IAAI;;IAElB,YAAA,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC;IAC1D,YAAA,IAAI,KAAK,YAAY,KAAK,EAAE;oBACxB,MAAM,MAAM,GAAG,KAA0C;IACzD,gBAAA,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;IACrC,gBAAA,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;IAEzC,gBAAA,IAAI,UAAU,IAAI,YAAY,EAAE;IAC5B,oBAAA,MAAM,OAAO,GAAG,UAAU,GAAG,CAAC,CAAC;IAC/B,oBAAA,MAAM,IAAI,CAAU,OAAA,EAAA,OAAO,CAAY,SAAA,EAAA,YAAY,GAAG;;;;IAIlE,QAAA,OAAO,MAAM;;QAoCV,SAAS,CAAC,IAAc,EAAE,MAAuC,EAAA;IACpE,QAAA,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;IACpB,YAAA,MAAM,CAAC,IAAI,EAAE,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;IAC5C,YAAA,MAAM,QAAQ,GAAG,OAAO,MAAM,CAAC,IAAI,CAAC;gBAEpC,IAAI,KAAK,GAAoB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;IACjD,YAAA,IAAI,KAAK,KAAK,SAAS,EAAE;IACrB,gBAAA,IAAI,QAAQ,KAAK,SAAS,EAAE;IACxB,oBAAA,KAAK,GAAG,KAAK,KAAK,MAAM;;IACrB,qBAAA,IAAI,QAAQ,KAAK,QAAQ,EAAE;IAC9B,oBAAA,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;;IAEzB,gBAAA,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK;;;IAG5B,QAAA,OAAO,MAAM;;IAEpB;;ICtLD,MAAM,kBAAkB,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAEpC,WAAW,CAAA;IAuDpB,IAAA,WAAA,GAAA;YAtDQ,IAAM,CAAA,MAAA,GAAW,EAAE;YACnB,IAAS,CAAA,SAAA,GAAW,CAAC,CAAC;YACtB,IAAO,CAAA,OAAA,GAAW,CAAC,CAAC;YACpB,IAAQ,CAAA,QAAA,GAAW,CAAC;YACX,IAAc,CAAA,cAAA,GAAa,EAAE;YAC7B,IAAkB,CAAA,kBAAA,GAAa,EAAE;YAC1C,IAAe,CAAA,eAAA,GAAW,CAAC,CAAC;YAC5B,IAAO,CAAA,OAAA,GAAW,CAAC;YACnB,IAAO,CAAA,OAAA,GAAW,CAAC;YACnB,IAAS,CAAA,SAAA,GAAW,CAAC;YACrB,IAAS,CAAA,SAAA,GAAW,GAAG;YACrB,IAAa,CAAA,aAAA,GAAa,EAAE;YAC9B,IAAe,CAAA,eAAA,GAAG,EAAE;IACpaACZ;IAEkB,QAAA,IAAA,CAAA,oBAAoB,GAAa;IAChD,YAAA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;aAC7D;YAGG,IAAI,CAAC,WAAW,EAAE;;QAGZ,OAAO,GAAA;;;QAIP,MAAM,SAAS,CAAC,IAAY,EAAA;;IAElC,QAAA,OAAO,EAAE;;IAGH,IAAA,SAAS,CAAC,IAAY,EAAA;;;IAItB,IAAA,aAAa,CAAC,IAAY,EAAA;;IAEhC,QAAA,OAAO,EAAE;;IAGH,IAAA,eAAe,CAAC,IAAY,EAAA;;IAElC,QAAA,OAAO,EAAE;;QAGL,WAAW,GAAA;YACf,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC;IACnD,QAAA,IAAI,CAAC,eAAe,GAAG,EAAE;IACzB,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC;IAChB,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC;;QAGb,GAAG,GAAA;IACN,QAAA,IAAI,CAAC,MAAM,GAAG,EAAE;IAChB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK;IAClB,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACnB,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACjB,QAAA,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC;IAC9B,QAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC;IAClC,QAAA,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;IACzB,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC;IAClB,QAAA,IAAI,CAAC,SAAS,GAAG,GAAG;YACpB,IAAI,CAAC,OAAO,EAAE;;IAGX,IAAA,YAAY,CAAC,IAAY,EAAE,CAAS,EAAE,CAAS,EAAA;IAClD,QAAA,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACjB,QAAA,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAEjB,MAAM,UAAU,GAAG,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE;IAC9C,QAAA,CAAC,GAAG,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC;IACrC,QAAA,CAAC,GAAG,UAAU,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG;YACzC,MAAM,UAAU,GAAG;IACf,cAAE,CAAA,EAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAA,EAAG,CAAC,CAAA,CAAA,EAAI,CAAC,CAAY,UAAA;kBAC9C,GAAG,IAAI,CAAA,EAAG,CAAC,CAAI,CAAA,EAAA,CAAC,EAAE;IAExB,QAAA,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC1D,YAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAI,CAAA,EAAA,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAA,CAAE,CAAC;;IAExE,QAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC;YAExC,IAAI,UAAU,EAAE;IACZ,YAAA,IAAI,CAAC,SAAS,GAAG,CAAC;IAClB,YAAA,IAAI,CAAC,SAAS,GAAG,CAAC;;iBACf;IACH,YAAA,IAAI,CAAC,SAAS,IAAI,CAAC;IACnB,YAAA,IAAI,CAAC,SAAS,IAAI,CAAC;;;QAInB,iBAAiB,GAAA;IACrB,QAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;gBAChC,IAAI,SAAS,GAAG,EAAE;IAClB,YAAA,IAAI,IAAI,CAAC,eAAe,GAAG,CAAC,EAAE;IAC1B,gBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACtE,gBAAA,SAAS,GAAG,CAAA,QAAA,EAAW,KAAK,CAAA,EAAA,CAAI;;IAEpC,YAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,MAAA,EAAS,SAAS,CAAM,GAAA,EAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA,IAAA,CAAM,CAAC;IACxF,YAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC;;;QAInC,KAAK,GAAA;YACR,IAAI,CAAC,iBAAiB,EAAE;IACxB,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE;IACb,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;IAC3B,YAAA,IAAI,CAAC,MAAM,GAAG,EAAE;;IAEpB,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;;IAE5B,YAAA,MAAM,kBAAkB,GAAG,IAAI,CAAC,eAAe,KAAK,EAAE,GAAG,CAA4B,yBAAA,EAAA,IAAI,CAAC,eAAe,CAAA,CAAA,CAAG,GAAG,EAAE;gBACjH,IAAI,CAAC,SAAS,CAAC,CAAA,wFAAA,EAA2F,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,yBAAA,EAA4B,kBAAkB,CAAM,GAAA,EAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAa,WAAA,CAAA,CAAC;IAC3O,YAAA,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC;;;IAI/B,IAAA,WAAW,CAAC,GAAW,EAAA;IAC1B,QAAA,IAAI,GAAG,KAAK,IAAI,CAAC,eAAe,EAAE;gBAC9B;;YAEJ,IAAI,CAAC,iBAAiB,EAAE;IACxB,QAAA,IAAI,CAAC,eAAe,GAAG,GAAG;;QAGvB,GAAG,CAAC,GAAW,EAAE,GAAW,EAAA;IAC/B,QAAA,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,GAAG;;IAE7B,QAAA,IAAI,IAAI,CAAC,eAAe,GAAG,CAAC,EAAE;IAC1B,YAAA,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;IAGvB,QAAA,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;IAClB,YAAA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;IACR,aAAA,IAAI,GAAG,KAAK,IAAI,CAAC,OAAO,EAAE;IAC7B,YAAA,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACjB,YAAA,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;;IAGjB,QAAA,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;IACpB,YAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;IACV,aAAA,IAAI,GAAG,KAAK,IAAI,CAAC,SAAS,EAAE;IAC/B,YAAA,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACnB,YAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;;IAGnB,QAAA,IAAI,GAAG,KAAK,CAAC,EAAE;IACX,YAAA,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;;QAI7D,MAAM,GAAA;IACT,QAAA,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;;IAGvB,IAAA,KAAK,CAAC,GAAW,EAAA;YACpB,IAAI,CAAC,KAAK,EAAE;IACZ,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;;IAGvB,IAAA,IAAI,CAAC,GAAW,EAAA;IACnB,QAAA,IAAI,CAAC,QAAQ,GAAG,GAAG;YACnB,IAAI,CAAC,GAAG,EAAE;;QAGP,MAAM,CAAC,CAAS,EAAE,CAAS,EAAA;IAC9B,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC;IAChB,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC;;IAGb,IAAA,KAAK,CAAC,CAAS,EAAA;IAClB,QAAA,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,EAAE;IACtB,YAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1D,YAAA,IAAI,CAAC,SAAS,GAAG,CAAC;;;IAInB,IAAA,GAAG,CAAC,CAAS,EAAA;IAChB,QAAA,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;IACpB,YAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACxD,YAAA,IAAI,CAAC,OAAO,GAAG,CAAC;;;IAIhB,IAAA,iBAAiB,CAAC,IAAY,EAAA;YAClC,MAAM,OAAO,GAAG,EAAE;YAClB,IAAI,QAAQ,GAAG,EAAE;YACjB,IAAI,IAAI,CAAC,eAAe,IAAI,CAAC,EAAE;IAC3B,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACtE,YAAA,QAAQ,GAAG,CAAA,eAAA,EAAkB,KAAK,CAAA,CAAA,CAAG;;IAEzC,QAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,SAAA,EAAY,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAA,KAAA,EAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA,CAAA,EAAI,QAAQ,CAAA,CAAA,EAAI,IAAI,CAAA,OAAA,CAAS,CAAC;;QAG5I,KAAK,CAAC,GAAG,IAAc,EAAA;YAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC1B,QAAA,IAAI,IAAI,CAAC,KAAK,EAAE;IACZ,YAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;;iBACzB;IACH,YAAA,IAAI,CAAC,MAAM,IAAI,IAAI;;;IAIpB,IAAA,GAAG,CAAC,MAAe,EAAA;IACtB,QAAA,IAAI,CAAC,KAAK,GAAG,MAAM;;QAGhB,SAAS,GAAA;IACZ,QAAA,OAAO,KAAK;;QAGT,SAAS,GAAA;YACZ,IAAI,CAAC,WAAW,EAAE;YAClB,OAAO,IAAI,CAAC,MAAM;;IAEf,IAAA,SAAS,CAAC,GAAW,EAAA;IACxB,QAAA,IAAI,CAAC,MAAM,GAAG,GAAG;;IAExB;;ICjQD,SAAS,aAAa,CAAC,UAAmB,EAAA;IACtC,IAAA,MAAM,UAAU,GAAG;IACfnE;IAEM,MAAO,WAAY,SAAQ,WAAW,CAAA;IAKxC,IAAA,WAAA,CAAY,SAAqB,EAAA;IAC7B,QAAA,KAAK,EAAE;IALM,QAAA,IAAA,CAAA,SAAS,GAAa,aAAa,CAAC,KAAK,CAAC;IAC1C,QAAA,IAAA,CAAA,WAAW,GAAa,aAAa,CAAC,IAAI,CAAC;IAKxD,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS;;QAGvB,OAAO,GAAA;YACV,OAAO,CAAC,KAAK,EAAE;;IAGZ,IAAA,SAAS,CAAC,GAAW,EAAA;IACxB,QAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;;QAGhC,MAAM,SAAS,CAAC,GAAW,EAAA;IAC9B,QAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;IAChB,QAAA,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;;IAGvB,IAAA,aAAa,CAAC,GAAW,EAAA;IAC5B,QAAA,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;IACzC,YAAA,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;;IAE9C,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;;IAGvB,IAAA,eAAe,CAAC,GAAW,EAAA;IAC9B,QAAA,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;IAC3C,YAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC;;IAEhD,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;;QAGzB,MAAM,GAAA;YACT,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;IAC7C,QAAA,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;;QAGxB,SAAS,GAAA;IACZ,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;;IAExC;;IC3CD;IACA,MAAM,OAAO,GAAY;IACrB,IAAA,OAAO,EAAE,EAAE;IACX,IAAA,KAAK,CAAC,GAAG,KAA0B,EAAkC,GAAC;IACtE,IAAA,GAAG,MAAK;QACR,YAAY,CAAC,IAAY,EAAE,CAAS,EAAE,CAAS,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC7F,IAAA,KAAK,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;IAAE,QAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAAE,QAAA,IAAI,CAAC,OAAO,GAAG,EAAE;IAAE,KAAC,EAAE;IAC/E,IAAA,WAAW,CAAC,GAAW,EAAI,EAAA,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,EAAE;IAC7D,IAAA,GAAG,CAAC,GAAW,EAAE,GAAW,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE;IAC/D,IAAA,MAAM,MAAM,GAAK,EAAA,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE;IAC9C,IAAA,MAAM,KAAK,CAAC,GAAW,EAAA,EAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE;IACzD,IAAA,IAAI,CAAC,GAAW,EAAI,EAAA,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,EAAE;IAC/C,IAAA,MAAM,CAAC,CAAS,EAAE,CAAS,EAAA,EAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC7D,IAAA,KAAK,CAAC,GAAW,EAAI,EAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,EAAE;IACjD,IAAA,GAAG,CAAC,GAAW,EAAI,EAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE;IAC7C,IAAA,KAAK,CAAC,GAAG,IAAyB,EAAI,EAAA,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE;IACtE,IAAA,GAAG,CAAC,MAAe,EAAI,EAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAE;IACpD,IAAA,SAAS,GAAK,EAAA,OAAO,KAAK,CAAC;KAC9B;IAED,SAAS,KAAK,CAAC,CAAS,EAAA;QACpB,OAAO,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAChC;UAEa,SAAS,CAAA;IAAtB,IAAA,WAAA,GAAA;YAIY,IAAU,CAAA,UAAA,GAAG,EAAE;IAGN,QAAA,IAAA,CAAA,SAAS,GAAa,EAAE,CAAC;YAClC,IAAM,CAAA,MAAA,GAAG,KAAK;;IAGd,IAAA,mBAAmB,CAAC,IAAY,EAAA;IACpC,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;IAChB,YAAA,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAa;;IAE/C,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ;;YAG1B,MAAM,OAAO,GAAG,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YACrD,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;IAEhD,QAAA,OAAO,YAAY;;QAGf,MAAM,YAAY,CAAC,IAAY,EAAA;IACnC,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IACd,YAAA,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAW;;IAGzC,QAAA,IAAI,CAAC,MAAM,EAAE;IACT,YAAA,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAe;gBAC9C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE;IAEnC,YAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;IAClB,gBAAA,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC;;;IAGlE,QAAA,IAAI;IACA,YAAA,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;;YAC1D,OAAO,KAAK,EAAE;IACZ,YAAA,OAAO,CAAC,KAAK,CAAC,CAAA,mBAAA,EAAsB,IAAI,CAAA,CAAA,CAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3D,YAAA,MAAM,KAAK;;;QAIX,MAAM,WAAW,CAAC,GAAW,EAAA;IACjC,QAAA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;IACjB,YAAA,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,OAAO,CAAc;;IAElD,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS;YAEhC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;gBACnC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,KAAI;oBACxB,IAAI,IAAI,GAAG,EAAE;oBAEb,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAa,KAAI;wBAC9B,IAAI,IAAI,KAAK;IACjB,iBAAC,CAAC;IAEF,gBAAA,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,MAAK;wBAChB,OAAO,CAAC,IAAI,CAAC;IACjB,iBAAC,CAAC;iBACL,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,KAAI;oBAC1B,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC;oBACtC,MAAM,CAAC,GAAG,CAAC;IACf,aAAC,CAAC;IACN,SAAC,CAAC;;IAGE,IAAA,UAAU,CAAC,SAAiB,EAAA;IAChC,QAAA,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE;IAClB,YAAA,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;;iBAC/B;IACH,YAAA,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;;;;QAInC,WAAW,CAAC,EAAc,EAAE,OAAe,EAAA;YAC/C,MAAM,OAAO,GAAG,UAAU,CAAC,MAAK,GAAI,EAAE,OAAO,CAAC;YAC9C,OAAO,CAAC,YAAW;IACf,YAAA,EAAE,EAAE;gBACJ,YAAY,CAAC,OAAO,CAAC;aACxB,GAAG;;IAGA,IAAA,gBAAgB,CAAC,MAAc,EAAA;IACnC,QAAA,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,CAAA,EAAG,KAAK,CAAA,CAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/G,QAAA,MAAM,MAAM,GACR,CAAA;kBACM,MAAM;;;kBAGN,cAAc;gBAChB;IACR,QAAA,OAAO,MAAM;;IAGT,IAAA,eAAe,CAAC,MAAc,EAAA;IAClC,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IACd,YAAA,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAW;;IAGzC,QAAA,MAAM,aAAa,GAAG,CAAC,KAAa,KAAY;gBAC5C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,6CAA6C,CAAC;gBACxE,IAAI,CAAC,KAAK,EAAE;oBACR,OAAO,EAAE,CAAC;;IAEd,YAAA,MAAM,GAAG,aAAa,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,GAAG,KAAK;gBAChE,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;IACxC,YAAA,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC;gBAClC,OAAO,CAAA,6BAAA,EAAgC,MAAM,CAAU,OAAA,EAAA,KAAK,KAAK,WAAW,CAAA,EAAA,EAAK,OAAO,CAAA,CAAE;IAC9F,SAAC;YACD,IAAI,MAAM,GAAG,EAAE;IAEf,QAAA,IAAI;gBACA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;gBACnD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAuB,oBAAA,EAAA,aAAa,CAAE,CAAA,CAAC;;IACrE,QAAA,OAAO,GAAG,EAAE;IACV,YAAA,MAAM,KAAK,GAAI,GAAa,CAAC,KAAK;gBAClC,IAAI,KAAK,EAAE;IACP,gBAAA,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC;;;IAGrC,QAAA,OAAO,MAAM;;IAGT,IAAA,cAAc,CAAC,GAAW,EAAA;IACpC,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;;QAGd,YAAY,CAAC,MAAc,EAAE,GAAqB,EAAA;YACtD,IAAI,GAAG,EAAE;gBACL,MAAM,eAAe,GAAG,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;IAClD,YAAA,IAAI,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE;;oBAE3C,OAAO,CAAC,IAAI,EAAE;;IACP,iBAAA,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE;IAC9B,gBAAA,IAAI,CAAC,MAAM,GAAG,IAAI;;IACf,iBAAA,IAAI,eAAe,KAAK,IAAI,KAAK,eAAe,IAAI,EAAE,IAAI,eAAe,IAAI,GAAG,CAAC,EAAE;IACtF,gBAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC;;;;QAKrC,iBAAiB,GAAA;IACrB,QAAA,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,UAAU,CAAiB;IAEvD,QAAA,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC;IACnD,YAAA,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC;gBAE9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;gBACvD,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;;iBACnD;gBACH,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,OAAO,CAAC,KAAK,CAAC;;;QAI5D,gBAAgB,GAAA;IACnB,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACpB,IAAI,CAAC,iBAAiB,EAAE;;YAElC,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAY,GAAG,EAAE;IACzE,QAAA,OAAO,GAAG;;QAGD,SAAS,GAAA;YACZ,OAAO,IAAI,CAAC,MAAM;;IAGd,IAAA,KAAK,CAAC,IAAW,EAAE,EAAY,EAAE,KAAa,EAAA;YAClD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,MAAM;IAC/C,QAAA,IAAI,KAAK,KAAK,EAAE,EAAE;gBACd,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAS,KAAK,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE9E,MAAM,cAAc,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,KAAK;IAE3F,YAAA,IAAI,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;IACrC,gBAAA,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC;oBAC7B;;IAGJ,YAAA,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC9B,gBAAA,OAAO,IAAI,CAAC,WAAW,CAAC,YAAW;wBAC/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,CAAC;IAC3D,oBAAA,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACtC,oBAAA,IAAI,IAAI,CAAC,mBAAmB,EAAE;4BAC1B,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;IACvD,wBAAA,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;IAC/B,wBAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;qBAEvB,EAAE,IAAI,CAAC;;qBACL;oBACH,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC;IACrD,gBAAA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;;;iBAErB;IACH,YAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;;;IAItC,IAAA,MAAM,aAAa,CAAC,YAA0B,EAAE,IAAW,EAAA;IAC/D,QAAA,IAAI,YAAY,CAAC,UAAU,EAAE;gBACzB,OAAO,YAAY,CAAC,UAAU;;IAElC,QAAA,YAAY,CAAC,UAAU,GAAG,EAAE;IAC5B,QAAA,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,GAAG,YAAY;IACrD,QAAA,IAAI;gBACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAChD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC;IACjD,YAAA,QAAQ,CAAC;oBACL,QAAQ,EAAE,IAAI,CAAC;IAClB,aAAA,CAAC;;YACJ,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,UAAU,EAAE,KAAK,CAAC;;YAEzD,OAAO,YAAY,CAAC,UAAU;;IAG1B,IAAA,MAAM,gBAAgB,CAAC,OAAoB,EAAE,IAAW,EAAA;IAC5D,QAAA,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE;gBAC9B,OAAO,OAAO,CAAC,MAAM;;IAEzB,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE;IACnC,QAAA,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,KAAK;IAC9D,QAAA,IAAI;gBACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;gBAChD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC;IACjD,YAAA,QAAQ,CAAC;IACL,gBAAA,OAAO,EAAE,CAAC,GAAW,EAAE,KAA4B,KAAI;IACnD,oBAAA,IAAI,CAAC,GAAG,EAAE;IACN,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG;;IAErB,oBAAA,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;;IAE/B,aAAA,CAAC;;YACJ,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,cAAc,EAAE,UAAU,EAAE,KAAK,CAAC;;IAEpD,QAAA,OAAO,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;;QAIzB,MAAM,QAAQ,CAAC,IAAW,EAAA;IAC7B,QAAA,MAAM,EAAE,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC;IAChC,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE;IAClC,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;IAEpD,QAAA,IAAI,MAAM,CAAC,KAAK,EAAE;IACd,YAAA,OAAO,IAAI,CAAC,WAAW,CAAC,YAAW;oBAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC;iBACrC,EAAE,IAAI,CAAC;;IAGZ,QAAA,IAAI,MAAM,CAAC,QAAQ,EAAE;IACjB,YAAA,OAAO,IAAI,CAAC,WAAW,CAAC,YAAW;oBAC/B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC;oBAC9D,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,aAAa,CAAC;iBACtC,EAAE,IAAI,CAAC;;IAGZ,QAAA,IAAI,MAAM,CAAC,OAAO,EAAE;IAChB,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE;IAC1C,YAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ;IAChC,YAAA,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,CAAC;gBAE1C,IAAI,CAAC,YAAY,EAAE;oBACf,OAAO,CAAC,KAAK,CAAC,CAAmB,gBAAA,EAAA,QAAQ,CAAiB,cAAA,EAAA,MAAM,CAAC,YAAY,CAAE,CAAA,CAAC;oBAChF;;IAGJ,YAAA,OAAO,IAAI,CAAC,WAAW,CAAC,YAAW;oBAC/B,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;wBAC7B,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,MAAM,CAAC;;oBAGvE,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC;IAC5C,gBAAA,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO;oBAClC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;oBAC5C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC;oBACzD,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC;iBAC/B,EAAE,IAAI,CAAC;;;IAIR,IAAA,OAAO,aAAa,GAAA;YAChC,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BN;;IAEA;;IChYK,MAAO,cAAe,SAAQ,WAAW,CAAA;IAK3C,IAAA,WAAA,CAAY,EAAO,EAAA;IACf,QAAA,KAAK,EAAE;YAJM,IAAS,CAAA,SAAA,GAAa,EAAE;YACxB,IAAW,CAAA,WAAA,GAAa,EAAE;IAIvC,QAAA,IAAI,CAAC,EAAE,GAAG,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACzE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;;IAG9E;;IAEG;QACI,OAAO,GAAA;IACV,QAAA,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC;;IAG7B;;;;IAIG;QACI,MAAM,SAAS,CAAC,GAAW,EAAA;YAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC;IACjC,QAAA,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;;IAGjC;;;IAGG;IACI,IAAA,SAAS,CAAC,GAAW,EAAA;IACxB,QAAA,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC;;IAG9B;;;;;IAKG;IACI,IAAA,aAAa,CAAC,GAAW,EAAA;IAC5B,QAAA,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;IACzC,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC;;IAEpD,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;;IAG9B;;;;;IAKG;IACI,IAAA,eAAe,CAAC,GAAW,EAAA;IAC9B,QAAA,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;IAC3C,YAAA,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;;IAEtD,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;;QAGzB,MAAM,GAAA;YACT,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE;IACtC,QAAA,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;;QAGxB,SAAS,GAAA;IACZ,QAAA,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE;;IAEjC;;ICtDD,MAAM,IAAI,GAAU,IAAI,IAAI,CAAC;IACzB,IAAA,MAAM,EAAE,aAAa;IACrB,IAAA,WAAW,EAAE,IAAI;IACjB,IAAA,WAAW,EAAE,IAAI;QACjB,YAAY,EAAE,4DAA4D;QAC7E,QAAQ,EAAE,UAAU;IACjB,IAAA,eAAe,EAAE,GAAG;IACpB,IAAA,eAAe,EAAE,GAAG;IACpB,IAAA,KAAK,EAAE,CAAC;IACR,IAAA,OAAO,EAAE,SAAS;IAClB,IAAA,QAAQ,EAAE,EAAE;QACZ,OAAO,EAAE,OAAO;IAChB,IAAA,KAAK,EAAE,EAAE;IACT,IAAA,SAAS,EAAE,IAAI;IACf,IAAA,YAAY,EAAE,KAAK;IACnB,IAAA,UAAU,EAAE;IACf,CAAA,CAAC;IAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,IAAA,MAAM,CAAC,MAAM,GAAG,MAAK;YACjB,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;IACjC,QAAA,MAAM,EAAE,GAAG,IAAI,EAAE,EAAE;YACnB,MAAM,CAAC,QAAQ,GAAG;gBACd,QAAQ,EAAE,IAAI,CAAC,QAAQ;IACvB,YAAA,OAAO,EAAE,CAAC,GAAW,EAAE,KAA4B,KAAI;IACnD,gBAAA,IAAI,CAAC,GAAG,EAAE;IACN,oBAAA,GAAG,GAAG,EAAE,CAAC,iBAAiB,EAAE;;IAEhC,gBAAA,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;;aAE/B;YACD,EAAE,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC;IACzD,KAAC;IACL;IAAO,KAAA;IACH,IAAA,IAAI,SAAS,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;IAClC;;;;;;"}